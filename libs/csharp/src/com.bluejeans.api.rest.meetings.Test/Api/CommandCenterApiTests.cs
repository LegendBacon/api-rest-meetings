/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.bluejeans.api.rest.meetings.Client;
using com.bluejeans.api.rest.meetings.Api;
using com.bluejeans.api.rest.meetings.Model;

namespace com.bluejeans.api.rest.meetings.Test
{
    /// <summary>
    ///  Class for testing CommandCenterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CommandCenterApiTests
    {
        private CommandCenterApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CommandCenterApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CommandCenterApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CommandCenterApi
            //Assert.IsInstanceOfType(typeof(CommandCenterApi), instance, "instance is a CommandCenterApi");
        }

        
        /// <summary>
        /// Test GetEndpointDistribution
        /// </summary>
        [Test]
        public void GetEndpointDistributionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //var response = instance.GetEndpointDistribution(enterpriseId, filter);
            //Assert.IsInstanceOf<AnalyticsEndpointDistribution> (response, "response is AnalyticsEndpointDistribution");
        }
        
        /// <summary>
        /// Test GetEndpointDistributionV2
        /// </summary>
        [Test]
        public void GetEndpointDistributionV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string appName = null;
            //var response = instance.GetEndpointDistributionV2(enterpriseId, filter, appName);
            //Assert.IsInstanceOf<AnalyticsEndpointDistributionV2> (response, "response is AnalyticsEndpointDistributionV2");
        }
        
        /// <summary>
        /// Test GetEnterpriseOverallSummary
        /// </summary>
        [Test]
        public void GetEnterpriseOverallSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string appName = null;
            //var response = instance.GetEnterpriseOverallSummary(enterpriseId, filter, appName);
            //Assert.IsInstanceOf<MeetingSummaryInfo> (response, "response is MeetingSummaryInfo");
        }
        
        /// <summary>
        /// Test GetEnterpriseUsersActive
        /// </summary>
        [Test]
        public void GetEnterpriseUsersActiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string clientTZ = null;
            //int? limit = null;
            //string appName = null;
            //var response = instance.GetEnterpriseUsersActive(enterpriseId, filter, clientTZ, limit, appName);
            //Assert.IsInstanceOf<EnterpriseUsersActive> (response, "response is EnterpriseUsersActive");
        }
        
        /// <summary>
        /// Test GetFeedbackComments
        /// </summary>
        [Test]
        public void GetFeedbackCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string start = null;
            //string end = null;
            //var response = instance.GetFeedbackComments(enterpriseId, start, end);
            //Assert.IsInstanceOf<AnalyticsFeedbackComments> (response, "response is AnalyticsFeedbackComments");
        }
        
        /// <summary>
        /// Test GetFeedbackCommentsV2
        /// </summary>
        [Test]
        public void GetFeedbackCommentsV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //int? limit = null;
            //string appName = null;
            //var response = instance.GetFeedbackCommentsV2(enterpriseId, filter, limit, appName);
            //Assert.IsInstanceOf<AnalyticsFeedbackComments> (response, "response is AnalyticsFeedbackComments");
        }
        
        /// <summary>
        /// Test GetFeedbackCount
        /// </summary>
        [Test]
        public void GetFeedbackCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string start = null;
            //string end = null;
            //var response = instance.GetFeedbackCount(enterpriseId, start, end);
            //Assert.IsInstanceOf<AnalyticsFeedbackScores> (response, "response is AnalyticsFeedbackScores");
        }
        
        /// <summary>
        /// Test GetFeedbackCountV2
        /// </summary>
        [Test]
        public void GetFeedbackCountV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string start = null;
            //string end = null;
            //string appName = null;
            //var response = instance.GetFeedbackCountV2(enterpriseId, start, end, appName);
            //Assert.IsInstanceOf<AnalyticsFeedbackScores> (response, "response is AnalyticsFeedbackScores");
        }
        
        /// <summary>
        /// Test GetGeoMap
        /// </summary>
        [Test]
        public void GetGeoMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //int? offset = null;
            //int? limit = null;
            //string appName = null;
            //var response = instance.GetGeoMap(enterpriseId, filter, offset, limit, appName);
            //Assert.IsInstanceOf<EndpointLocationSummary> (response, "response is EndpointLocationSummary");
        }
        
        /// <summary>
        /// Test GetMeetingEndpointsLiveByEnterprise
        /// </summary>
        [Test]
        public void GetMeetingEndpointsLiveByEnterpriseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string meetingUuid = null;
            //string appName = null;
            //var response = instance.GetMeetingEndpointsLiveByEnterprise(enterpriseId, meetingUuid, appName);
            //Assert.IsInstanceOf<MeetingExtendedIndigo> (response, "response is MeetingExtendedIndigo");
        }
        
        /// <summary>
        /// Test GetMeetingPastByEnterprise
        /// </summary>
        [Test]
        public void GetMeetingPastByEnterpriseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string meetingUuid = null;
            //bool? includeEndpoints = null;
            //string appName = null;
            //var response = instance.GetMeetingPastByEnterprise(enterpriseId, meetingUuid, includeEndpoints, appName);
            //Assert.IsInstanceOf<MeetingExtendedIndigo> (response, "response is MeetingExtendedIndigo");
        }
        
        /// <summary>
        /// Test GetMeetingPastByUser
        /// </summary>
        [Test]
        public void GetMeetingPastByUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingUuid = null;
            //string appName = null;
            //var response = instance.GetMeetingPastByUser(userId, meetingUuid, appName);
            //Assert.IsInstanceOf<MeetingExtendedIndigo> (response, "response is MeetingExtendedIndigo");
        }
        
        /// <summary>
        /// Test GetMeetingUsage
        /// </summary>
        [Test]
        public void GetMeetingUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string clientTZ = null;
            //string filter = null;
            //var response = instance.GetMeetingUsage(enterpriseId, clientTZ, filter);
            //Assert.IsInstanceOf<AnalyticsUsage> (response, "response is AnalyticsUsage");
        }
        
        /// <summary>
        /// Test GetMeetingUsageV2
        /// </summary>
        [Test]
        public void GetMeetingUsageV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string clientTZ = null;
            //string appName = null;
            //var response = instance.GetMeetingUsageV2(enterpriseId, filter, clientTZ, appName);
            //Assert.IsInstanceOf<AnalyticsUsage> (response, "response is AnalyticsUsage");
        }
        
        /// <summary>
        /// Test GetMeetingsLiveByEnterprise
        /// </summary>
        [Test]
        public void GetMeetingsLiveByEnterpriseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string appName = null;
            //var response = instance.GetMeetingsLiveByEnterprise(enterpriseId, appName);
            //Assert.IsInstanceOf<MeetingIndigoList> (response, "response is MeetingIndigoList");
        }
        
        /// <summary>
        /// Test GetMeetingsPastByEnterprise
        /// </summary>
        [Test]
        public void GetMeetingsPastByEnterpriseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //int? offset = null;
            //int? limit = null;
            //string filter = null;
            //bool? count = null;
            //string appName = null;
            //var response = instance.GetMeetingsPastByEnterprise(enterpriseId, offset, limit, filter, count, appName);
            //Assert.IsInstanceOf<MeetingIndigoList> (response, "response is MeetingIndigoList");
        }
        
        /// <summary>
        /// Test GetMeetingsPastByUser
        /// </summary>
        [Test]
        public void GetMeetingsPastByUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string filter = null;
            //string appName = null;
            //var response = instance.GetMeetingsPastByUser(userId, filter, appName);
            //Assert.IsInstanceOf<MeetingIndigoList> (response, "response is MeetingIndigoList");
        }
        
        /// <summary>
        /// Test GetRoiRanges
        /// </summary>
        [Test]
        public void GetRoiRangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //var response = instance.GetRoiRanges(enterpriseId, filter);
            //Assert.IsInstanceOf<AnalyticsRoiData> (response, "response is AnalyticsRoiData");
        }
        
        /// <summary>
        /// Test GetRoiRangesV2
        /// </summary>
        [Test]
        public void GetRoiRangesV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string appName = null;
            //var response = instance.GetRoiRangesV2(enterpriseId, filter, appName);
            //Assert.IsInstanceOf<AnalyticsRoiData> (response, "response is AnalyticsRoiData");
        }
        
        /// <summary>
        /// Test GetTopUsers
        /// </summary>
        [Test]
        public void GetTopUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //var response = instance.GetTopUsers(enterpriseId, filter);
            //Assert.IsInstanceOf<AnalyticsTopUsers> (response, "response is AnalyticsTopUsers");
        }
        
        /// <summary>
        /// Test GetTopUsersV2
        /// </summary>
        [Test]
        public void GetTopUsersV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? enterpriseId = null;
            //string filter = null;
            //string appName = null;
            //var response = instance.GetTopUsersV2(enterpriseId, filter, appName);
            //Assert.IsInstanceOf<AnalyticsTopUsers> (response, "response is AnalyticsTopUsers");
        }
        
    }

}
