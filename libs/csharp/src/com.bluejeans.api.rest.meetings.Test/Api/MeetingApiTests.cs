/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.bluejeans.api.rest.meetings.Client;
using com.bluejeans.api.rest.meetings.Api;
using com.bluejeans.api.rest.meetings.Model;

namespace com.bluejeans.api.rest.meetings.Test
{
    /// <summary>
    ///  Class for testing MeetingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MeetingApiTests
    {
        private MeetingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MeetingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MeetingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MeetingApi
            //Assert.IsInstanceOfType(typeof(MeetingApi), instance, "instance is a MeetingApi");
        }

        
        /// <summary>
        /// Test CancelMeeting
        /// </summary>
        [Test]
        public void CancelMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //bool? email = null;
            //string cancellationMessage = null;
            //instance.CancelMeeting(userId, meetingId, email, cancellationMessage);
            
        }
        
        /// <summary>
        /// Test CreateMeeting
        /// </summary>
        [Test]
        public void CreateMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //ScheduleMeetingMinComp meeting = null;
            //bool? email = null;
            //var response = instance.CreateMeeting(userId, meeting, email);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
        /// <summary>
        /// Test DialoutPstn
        /// </summary>
        [Test]
        public void DialoutPstnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadDialout payloadDialout = null;
            //var response = instance.DialoutPstn(userId, numericMeetingId, payloadDialout);
            //Assert.IsInstanceOf<DialoutPstn> (response, "response is DialoutPstn");
        }
        
        /// <summary>
        /// Test GeneratePairingCodePstn
        /// </summary>
        [Test]
        public void GeneratePairingCodePstnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadPairingCodePstn payloadPairingCodePstn = null;
            //string role = null;
            //var response = instance.GeneratePairingCodePstn(userId, numericMeetingId, payloadPairingCodePstn, role);
            //Assert.IsInstanceOf<PairingCodePSTN> (response, "response is PairingCodePSTN");
        }
        
        /// <summary>
        /// Test GeneratePairingCodeSip
        /// </summary>
        [Test]
        public void GeneratePairingCodeSipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadPairingCodeSIP payloadPairingCodeSIP = null;
            //var response = instance.GeneratePairingCodeSip(userId, numericMeetingId, payloadPairingCodeSIP);
            //Assert.IsInstanceOf<PairingCodeSIP> (response, "response is PairingCodeSIP");
        }
        
        /// <summary>
        /// Test GeneratePairingCodeWebRtc
        /// </summary>
        [Test]
        public void GeneratePairingCodeWebRtcTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadPairingCodeWebRTC payloadPairingCodeWebRTC = null;
            //string role = null;
            //var response = instance.GeneratePairingCodeWebRtc(userId, numericMeetingId, payloadPairingCodeWebRTC, role);
            //Assert.IsInstanceOf<PairingCodeWebRTC> (response, "response is PairingCodeWebRTC");
        }
        
        /// <summary>
        /// Test GetEndpointLayout
        /// </summary>
        [Test]
        public void GetEndpointLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //string endpointGuid = null;
            //var response = instance.GetEndpointLayout(userId, numericMeetingId, endpointGuid);
            //Assert.IsInstanceOf<Layout> (response, "response is Layout");
        }
        
        /// <summary>
        /// Test GetMeeting
        /// </summary>
        [Test]
        public void GetMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //var response = instance.GetMeeting(userId, meetingId);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
        /// <summary>
        /// Test GetMeetingEmails
        /// </summary>
        [Test]
        public void GetMeetingEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //string type = null;
            //string role = null;
            //string action = null;
            //var response = instance.GetMeetingEmails(userId, meetingId, type, role, action);
            //Assert.IsInstanceOf<MeetingEmails> (response, "response is MeetingEmails");
        }
        
        /// <summary>
        /// Test GetMeetingEndpoint
        /// </summary>
        [Test]
        public void GetMeetingEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //string endpointGuid = null;
            //var response = instance.GetMeetingEndpoint(userId, numericMeetingId, endpointGuid);
            //Assert.IsInstanceOf<Endpoint> (response, "response is Endpoint");
        }
        
        /// <summary>
        /// Test GetMeetingEndpoints
        /// </summary>
        [Test]
        public void GetMeetingEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //var response = instance.GetMeetingEndpoints(userId, numericMeetingId);
            //Assert.IsInstanceOf<Endpoints> (response, "response is Endpoints");
        }
        
        /// <summary>
        /// Test GetMeetingNumbers
        /// </summary>
        [Test]
        public void GetMeetingNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //var response = instance.GetMeetingNumbers(userId, meetingId);
            //Assert.IsInstanceOf<Numbers> (response, "response is Numbers");
        }
        
        /// <summary>
        /// Test GetMeetingState
        /// </summary>
        [Test]
        public void GetMeetingStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //var response = instance.GetMeetingState(userId, numericMeetingId);
            //Assert.IsInstanceOf<MeetingState> (response, "response is MeetingState");
        }
        
        /// <summary>
        /// Test ListMeetings
        /// </summary>
        [Test]
        public void ListMeetingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string numericMeetingId = null;
            //var response = instance.ListMeetings(userId, numericMeetingId);
            //Assert.IsInstanceOf<List<Meeting>> (response, "response is List<Meeting>");
        }
        
        /// <summary>
        /// Test SendMeetingInvite
        /// </summary>
        [Test]
        public void SendMeetingInviteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadInvite payloadInvite = null;
            //instance.SendMeetingInvite(userId, numericMeetingId, payloadInvite);
            
        }
        
        /// <summary>
        /// Test UpdateEndpointLayout
        /// </summary>
        [Test]
        public void UpdateEndpointLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //string endpointGuid = null;
            //Layout layout = null;
            //bool? isLeader = null;
            //bool? push = null;
            //instance.UpdateEndpointLayout(userId, numericMeetingId, endpointGuid, layout, isLeader, push);
            
        }
        
        /// <summary>
        /// Test UpdateMeeting
        /// </summary>
        [Test]
        public void UpdateMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //Meeting meeting = null;
            //var response = instance.UpdateMeeting(userId, meetingId, meeting);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
        /// <summary>
        /// Test UpdateMeetingEndpoint
        /// </summary>
        [Test]
        public void UpdateMeetingEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //string endpointGuid = null;
            //bool? muteAudio = null;
            //bool? muteVideo = null;
            //bool? leaveMeeting = null;
            //instance.UpdateMeetingEndpoint(userId, numericMeetingId, endpointGuid, muteAudio, muteVideo, leaveMeeting);
            
        }
        
        /// <summary>
        /// Test UpdateMeetingEndpoints
        /// </summary>
        [Test]
        public void UpdateMeetingEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //bool? mute = null;
            //string media = null;
            //instance.UpdateMeetingEndpoints(userId, numericMeetingId, mute, media);
            
        }
        
        /// <summary>
        /// Test UpdateMeetingState
        /// </summary>
        [Test]
        public void UpdateMeetingStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? numericMeetingId = null;
            //PayloadMeetingState payloadMeetingState = null;
            //int? delay = null;
            //var response = instance.UpdateMeetingState(userId, numericMeetingId, payloadMeetingState, delay);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
    }

}
