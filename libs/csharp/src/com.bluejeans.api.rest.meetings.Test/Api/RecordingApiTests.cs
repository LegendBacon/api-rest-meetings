/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.bluejeans.api.rest.meetings.Client;
using com.bluejeans.api.rest.meetings.Api;
using com.bluejeans.api.rest.meetings.Model;

namespace com.bluejeans.api.rest.meetings.Test
{
    /// <summary>
    ///  Class for testing RecordingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RecordingApiTests
    {
        private RecordingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RecordingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RecordingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RecordingApi
            //Assert.IsInstanceOfType(typeof(RecordingApi), instance, "instance is a RecordingApi");
        }

        
        /// <summary>
        /// Test CreateShareRecordings
        /// </summary>
        [Test]
        public void CreateShareRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingGuid = null;
            //SetSharing setSharing = null;
            //var response = instance.CreateShareRecordings(userId, meetingGuid, setSharing);
            //Assert.IsInstanceOf<MeetingSharing> (response, "response is MeetingSharing");
        }
        
        /// <summary>
        /// Test DeleteAllRecordingsByMeetingGuid
        /// </summary>
        [Test]
        public void DeleteAllRecordingsByMeetingGuidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingGuid = null;
            //var response = instance.DeleteAllRecordingsByMeetingGuid(userId, meetingGuid);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
        /// <summary>
        /// Test DeleteRecordingChapter
        /// </summary>
        [Test]
        public void DeleteRecordingChapterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //int? recordingChapterId = null;
            //var response = instance.DeleteRecordingChapter(userId, meetingId, recordingChapterId);
            //Assert.IsInstanceOf<Meeting> (response, "response is Meeting");
        }
        
        /// <summary>
        /// Test DeleteShareRecordings
        /// </summary>
        [Test]
        public void DeleteShareRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingGuid = null;
            //instance.DeleteShareRecordings(userId, meetingGuid);
            
        }
        
        /// <summary>
        /// Test GetMeetingRecordings
        /// </summary>
        [Test]
        public void GetMeetingRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //string meetingGuid = null;
            //var response = instance.GetMeetingRecordings(userId, meetingId, meetingGuid);
            //Assert.IsInstanceOf<RecordingHistoryList> (response, "response is RecordingHistoryList");
        }
        
        /// <summary>
        /// Test GetRecordingContent
        /// </summary>
        [Test]
        public void GetRecordingContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? contentId = null;
            //bool? isDownloadable = null;
            //var response = instance.GetRecordingContent(userId, contentId, isDownloadable);
            //Assert.IsInstanceOf<Content> (response, "response is Content");
        }
        
        /// <summary>
        /// Test GetShareRecordings
        /// </summary>
        [Test]
        public void GetShareRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingGuid = null;
            //var response = instance.GetShareRecordings(userId, meetingGuid);
            //Assert.IsInstanceOf<MeetingSharing> (response, "response is MeetingSharing");
        }
        
        /// <summary>
        /// Test ModifyShareRecordings
        /// </summary>
        [Test]
        public void ModifyShareRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string meetingGuid = null;
            //string sharingId = null;
            //ModifySharing modifySharing = null;
            //var response = instance.ModifyShareRecordings(userId, meetingGuid, sharingId, modifySharing);
            //Assert.IsInstanceOf<MeetingSharing> (response, "response is MeetingSharing");
        }
        
        /// <summary>
        /// Test MoveRecordingOwner
        /// </summary>
        [Test]
        public void MoveRecordingOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? originalOwner = null;
            //int? newOwner = null;
            //var response = instance.MoveRecordingOwner(userId, originalOwner, newOwner);
            //Assert.IsInstanceOf<RecordingMovedComp> (response, "response is RecordingMovedComp");
        }
        
        /// <summary>
        /// Test StartRecording
        /// </summary>
        [Test]
        public void StartRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //string action = null;
            //instance.StartRecording(userId, meetingId, action);
            
        }
        
        /// <summary>
        /// Test StopRecording
        /// </summary>
        [Test]
        public void StopRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? meetingId = null;
            //string action = null;
            //instance.StopRecording(userId, meetingId, action);
            
        }
        
    }

}
