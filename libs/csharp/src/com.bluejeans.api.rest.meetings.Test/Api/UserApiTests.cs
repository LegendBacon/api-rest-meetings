/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.bluejeans.api.rest.meetings.Client;
using com.bluejeans.api.rest.meetings.Api;
using com.bluejeans.api.rest.meetings.Model;

namespace com.bluejeans.api.rest.meetings.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test ChangeUserTags
        /// </summary>
        [Test]
        public void ChangeUserTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string action = null;
            //string tag = null;
            //var response = instance.ChangeUserTags(userId, action, tag);
            //Assert.IsInstanceOf<TagListComp> (response, "response is TagListComp");
        }
        
        /// <summary>
        /// Test CreateRoom
        /// </summary>
        [Test]
        public void CreateRoomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //Room room = null;
            //var response = instance.CreateRoom(userId, room);
            //Assert.IsInstanceOf<Room> (response, "response is Room");
        }
        
        /// <summary>
        /// Test GetEnterpriseProfile
        /// </summary>
        [Test]
        public void GetEnterpriseProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetEnterpriseProfile(userId);
            //Assert.IsInstanceOf<Enterprise> (response, "response is Enterprise");
        }
        
        /// <summary>
        /// Test GetGrantedApplications
        /// </summary>
        [Test]
        public void GetGrantedApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetGrantedApplications(userId);
            //Assert.IsInstanceOf<GrantedApplications> (response, "response is GrantedApplications");
        }
        
        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Test]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetGroups(userId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetPersonalMeeting
        /// </summary>
        [Test]
        public void GetPersonalMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetPersonalMeeting(userId);
            //Assert.IsInstanceOf<PersonalMeetingRoom> (response, "response is PersonalMeetingRoom");
        }
        
        /// <summary>
        /// Test GetRoom
        /// </summary>
        [Test]
        public void GetRoomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetRoom(userId);
            //Assert.IsInstanceOf<Room> (response, "response is Room");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserTags
        /// </summary>
        [Test]
        public void GetUserTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetUserTags(userId);
            //Assert.IsInstanceOf<TagListComp> (response, "response is TagListComp");
        }
        
        /// <summary>
        /// Test RevokeGrantedApplication
        /// </summary>
        [Test]
        public void RevokeGrantedApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string clientId = null;
            //instance.RevokeGrantedApplication(userId, clientId);
            
        }
        
        /// <summary>
        /// Test SetGroups
        /// </summary>
        [Test]
        public void SetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string enable = null;
            //string disable = null;
            //instance.SetGroups(userId, enable, disable);
            
        }
        
        /// <summary>
        /// Test UpdatePeresonalMeeting
        /// </summary>
        [Test]
        public void UpdatePeresonalMeetingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //PersonalMeetingRoom personalMeeting = null;
            //var response = instance.UpdatePeresonalMeeting(userId, personalMeeting);
            //Assert.IsInstanceOf<PersonalMeetingRoom> (response, "response is PersonalMeetingRoom");
        }
        
        /// <summary>
        /// Test UpdateRoom
        /// </summary>
        [Test]
        public void UpdateRoomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //Room room = null;
            //var response = instance.UpdateRoom(userId, room);
            //Assert.IsInstanceOf<Room> (response, "response is Room");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //User user = null;
            //var response = instance.UpdateUser(userId, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UpdateUserProfilePicture
        /// </summary>
        [Test]
        public void UpdateUserProfilePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //System.IO.Stream file = null;
            //var response = instance.UpdateUserProfilePicture(userId, file);
            //Assert.IsInstanceOf<UploadPhotoResponse> (response, "response is UploadPhotoResponse");
        }
        
    }

}
