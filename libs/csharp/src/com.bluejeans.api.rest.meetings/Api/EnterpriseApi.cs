/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.bluejeans.api.rest.meetings.Client;
using com.bluejeans.api.rest.meetings.Model;

namespace com.bluejeans.api.rest.meetings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnterpriseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>TagListComp</returns>
        TagListComp ChangeEnterpriseTags (int? enterpriseId, string action, string tag);

        /// <summary>
        /// Set Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>ApiResponse of TagListComp</returns>
        ApiResponse<TagListComp> ChangeEnterpriseTagsWithHttpInfo (int? enterpriseId, string action, string tag);
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>UserId</returns>
        UserId CreateEnterpriseUser (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null);

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>ApiResponse of UserId</returns>
        ApiResponse<UserId> CreateEnterpriseUserWithHttpInfo (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null);
        /// <summary>
        /// Export Enterprise Users
        /// </summary>
        /// <remarks>
        /// This endpoint exports existing users into a CSV file.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns></returns>
        void ExportUsers (int? enterpriseId);

        /// <summary>
        /// Export Enterprise Users
        /// </summary>
        /// <remarks>
        /// This endpoint exports existing users into a CSV file.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExportUsersWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// List Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>TagListComp</returns>
        TagListComp GetEnterpriseTags (int? enterpriseId);

        /// <summary>
        /// List Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of TagListComp</returns>
        ApiResponse<TagListComp> GetEnterpriseTagsWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// Remove Enterprise User
        /// </summary>
        /// <remarks>
        /// This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns></returns>
        void RemoveUser (int? enterpriseId, int? userId);

        /// <summary>
        /// Remove Enterprise User
        /// </summary>
        /// <remarks>
        /// This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserWithHttpInfo (int? enterpriseId, int? userId);
        /// <summary>
        /// Search for User(s)
        /// </summary>
        /// <remarks>
        /// This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>EnterpriseUserSearch</returns>
        EnterpriseUserSearch SearchUsers (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// Search for User(s)
        /// </summary>
        /// <remarks>
        /// This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>ApiResponse of EnterpriseUserSearch</returns>
        ApiResponse<EnterpriseUserSearch> SearchUsersWithHttpInfo (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>Task of TagListComp</returns>
        System.Threading.Tasks.Task<TagListComp> ChangeEnterpriseTagsAsync (int? enterpriseId, string action, string tag);

        /// <summary>
        /// Set Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>Task of ApiResponse (TagListComp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListComp>> ChangeEnterpriseTagsAsyncWithHttpInfo (int? enterpriseId, string action, string tag);
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>Task of UserId</returns>
        System.Threading.Tasks.Task<UserId> CreateEnterpriseUserAsync (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null);

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>Task of ApiResponse (UserId)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserId>> CreateEnterpriseUserAsyncWithHttpInfo (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null);
        /// <summary>
        /// Export Enterprise Users
        /// </summary>
        /// <remarks>
        /// This endpoint exports existing users into a CSV file.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExportUsersAsync (int? enterpriseId);

        /// <summary>
        /// Export Enterprise Users
        /// </summary>
        /// <remarks>
        /// This endpoint exports existing users into a CSV file.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportUsersAsyncWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// List Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of TagListComp</returns>
        System.Threading.Tasks.Task<TagListComp> GetEnterpriseTagsAsync (int? enterpriseId);

        /// <summary>
        /// List Enterprise Tags
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse (TagListComp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListComp>> GetEnterpriseTagsAsyncWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// Remove Enterprise User
        /// </summary>
        /// <remarks>
        /// This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserAsync (int? enterpriseId, int? userId);

        /// <summary>
        /// Remove Enterprise User
        /// </summary>
        /// <remarks>
        /// This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserAsyncWithHttpInfo (int? enterpriseId, int? userId);
        /// <summary>
        /// Search for User(s)
        /// </summary>
        /// <remarks>
        /// This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>Task of EnterpriseUserSearch</returns>
        System.Threading.Tasks.Task<EnterpriseUserSearch> SearchUsersAsync (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// Search for User(s)
        /// </summary>
        /// <remarks>
        /// This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>Task of ApiResponse (EnterpriseUserSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnterpriseUserSearch>> SearchUsersAsyncWithHttpInfo (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnterpriseApi : IEnterpriseApi
    {
        private com.bluejeans.api.rest.meetings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnterpriseApi(String basePath)
        {
            this.Configuration = new com.bluejeans.api.rest.meetings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.bluejeans.api.rest.meetings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnterpriseApi(com.bluejeans.api.rest.meetings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.bluejeans.api.rest.meetings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.bluejeans.api.rest.meetings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.bluejeans.api.rest.meetings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.bluejeans.api.rest.meetings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set Enterprise Tags This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>TagListComp</returns>
        public TagListComp ChangeEnterpriseTags (int? enterpriseId, string action, string tag)
        {
             ApiResponse<TagListComp> localVarResponse = ChangeEnterpriseTagsWithHttpInfo(enterpriseId, action, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Enterprise Tags This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>ApiResponse of TagListComp</returns>
        public ApiResponse< TagListComp > ChangeEnterpriseTagsWithHttpInfo (int? enterpriseId, string action, string tag)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->ChangeEnterpriseTags");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling EnterpriseApi->ChangeEnterpriseTags");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling EnterpriseApi->ChangeEnterpriseTags");

            var localVarPath = "/v1/enterprise/{enterpriseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeEnterpriseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListComp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListComp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListComp)));
        }

        /// <summary>
        /// Set Enterprise Tags This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>Task of TagListComp</returns>
        public async System.Threading.Tasks.Task<TagListComp> ChangeEnterpriseTagsAsync (int? enterpriseId, string action, string tag)
        {
             ApiResponse<TagListComp> localVarResponse = await ChangeEnterpriseTagsAsyncWithHttpInfo(enterpriseId, action, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Enterprise Tags This endpoint modifies the list of profile tags associated with the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="action">Type of operation to be done</param>
        /// <param name="tag">The name of tag</param>
        /// <returns>Task of ApiResponse (TagListComp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListComp>> ChangeEnterpriseTagsAsyncWithHttpInfo (int? enterpriseId, string action, string tag)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->ChangeEnterpriseTags");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling EnterpriseApi->ChangeEnterpriseTags");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling EnterpriseApi->ChangeEnterpriseTags");

            var localVarPath = "/v1/enterprise/{enterpriseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeEnterpriseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListComp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListComp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListComp)));
        }

        /// <summary>
        /// Create User This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>UserId</returns>
        public UserId CreateEnterpriseUser (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null)
        {
             ApiResponse<UserId> localVarResponse = CreateEnterpriseUserWithHttpInfo(enterpriseId, enterpriseUser, billingCategory, forcePasswordChange, isAdmin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create User This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>ApiResponse of UserId</returns>
        public ApiResponse< UserId > CreateEnterpriseUserWithHttpInfo (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->CreateEnterpriseUser");
            // verify the required parameter 'enterpriseUser' is set
            if (enterpriseUser == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseUser' when calling EnterpriseApi->CreateEnterpriseUser");

            var localVarPath = "/v1/enterprise/{enterpriseId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (billingCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billingCategory", billingCategory)); // query parameter
            if (forcePasswordChange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forcePasswordChange", forcePasswordChange)); // query parameter
            if (isAdmin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdmin", isAdmin)); // query parameter
            if (enterpriseUser != null && enterpriseUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enterpriseUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enterpriseUser; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEnterpriseUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserId)));
        }

        /// <summary>
        /// Create User This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>Task of UserId</returns>
        public async System.Threading.Tasks.Task<UserId> CreateEnterpriseUserAsync (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null)
        {
             ApiResponse<UserId> localVarResponse = await CreateEnterpriseUserAsyncWithHttpInfo(enterpriseId, enterpriseUser, billingCategory, forcePasswordChange, isAdmin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create User This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="enterpriseUser">Basic Enterprise Account information</param>
        /// <param name="billingCategory">What general billing group does this profile belong? (optional, default to ENTERPRISE)</param>
        /// <param name="forcePasswordChange">Create profile and force user to change password on next login (optional)</param>
        /// <param name="isAdmin">Create this account to have Administrative Privileges for the enterprise (optional)</param>
        /// <returns>Task of ApiResponse (UserId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserId>> CreateEnterpriseUserAsyncWithHttpInfo (int? enterpriseId, EnterpriseCreateUser enterpriseUser, string billingCategory = null, bool? forcePasswordChange = null, bool? isAdmin = null)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->CreateEnterpriseUser");
            // verify the required parameter 'enterpriseUser' is set
            if (enterpriseUser == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseUser' when calling EnterpriseApi->CreateEnterpriseUser");

            var localVarPath = "/v1/enterprise/{enterpriseId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (billingCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billingCategory", billingCategory)); // query parameter
            if (forcePasswordChange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forcePasswordChange", forcePasswordChange)); // query parameter
            if (isAdmin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdmin", isAdmin)); // query parameter
            if (enterpriseUser != null && enterpriseUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enterpriseUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enterpriseUser; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEnterpriseUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserId)));
        }

        /// <summary>
        /// Export Enterprise Users This endpoint exports existing users into a CSV file.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns></returns>
        public void ExportUsers (int? enterpriseId)
        {
             ExportUsersWithHttpInfo(enterpriseId);
        }

        /// <summary>
        /// Export Enterprise Users This endpoint exports existing users into a CSV file.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExportUsersWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->ExportUsers");

            var localVarPath = "/v1/enterprise/{enterprise_id}/users/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Export Enterprise Users This endpoint exports existing users into a CSV file.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExportUsersAsync (int? enterpriseId)
        {
             await ExportUsersAsyncWithHttpInfo(enterpriseId);

        }

        /// <summary>
        /// Export Enterprise Users This endpoint exports existing users into a CSV file.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportUsersAsyncWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->ExportUsers");

            var localVarPath = "/v1/enterprise/{enterprise_id}/users/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Enterprise Tags This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>TagListComp</returns>
        public TagListComp GetEnterpriseTags (int? enterpriseId)
        {
             ApiResponse<TagListComp> localVarResponse = GetEnterpriseTagsWithHttpInfo(enterpriseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Enterprise Tags This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of TagListComp</returns>
        public ApiResponse< TagListComp > GetEnterpriseTagsWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->GetEnterpriseTags");

            var localVarPath = "/v1/enterprise/{enterpriseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnterpriseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListComp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListComp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListComp)));
        }

        /// <summary>
        /// List Enterprise Tags This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of TagListComp</returns>
        public async System.Threading.Tasks.Task<TagListComp> GetEnterpriseTagsAsync (int? enterpriseId)
        {
             ApiResponse<TagListComp> localVarResponse = await GetEnterpriseTagsAsyncWithHttpInfo(enterpriseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Enterprise Tags This endpoint retrieves all profile tags defined for the specified enterprise.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse (TagListComp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListComp>> GetEnterpriseTagsAsyncWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->GetEnterpriseTags");

            var localVarPath = "/v1/enterprise/{enterpriseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnterpriseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListComp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListComp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListComp)));
        }

        /// <summary>
        /// Remove Enterprise User This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns></returns>
        public void RemoveUser (int? enterpriseId, int? userId)
        {
             RemoveUserWithHttpInfo(enterpriseId, userId);
        }

        /// <summary>
        /// Remove Enterprise User This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveUserWithHttpInfo (int? enterpriseId, int? userId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->RemoveUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling EnterpriseApi->RemoveUser");

            var localVarPath = "/v1/enterprise/{enterprise_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove Enterprise User This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserAsync (int? enterpriseId, int? userId)
        {
             await RemoveUserAsyncWithHttpInfo(enterpriseId, userId);

        }

        /// <summary>
        /// Remove Enterprise User This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserAsyncWithHttpInfo (int? enterpriseId, int? userId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->RemoveUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling EnterpriseApi->RemoveUser");

            var localVarPath = "/v1/enterprise/{enterprise_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search for User(s) This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>EnterpriseUserSearch</returns>
        public EnterpriseUserSearch SearchUsers (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<EnterpriseUserSearch> localVarResponse = SearchUsersWithHttpInfo(enterpriseId, fields, order, sortBy, textSearch, emailId, pageSize, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for User(s) This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>ApiResponse of EnterpriseUserSearch</returns>
        public ApiResponse< EnterpriseUserSearch > SearchUsersWithHttpInfo (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->SearchUsers");

            var localVarPath = "/v1/enterprise/{enterpriseId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (textSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "textSearch", textSearch)); // query parameter
            if (emailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "emailId", emailId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnterpriseUserSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnterpriseUserSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnterpriseUserSearch)));
        }

        /// <summary>
        /// Search for User(s) This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>Task of EnterpriseUserSearch</returns>
        public async System.Threading.Tasks.Task<EnterpriseUserSearch> SearchUsersAsync (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<EnterpriseUserSearch> localVarResponse = await SearchUsersAsyncWithHttpInfo(enterpriseId, fields, order, sortBy, textSearch, emailId, pageSize, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for User(s) This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.meetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="fields">A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email (optional)</param>
        /// <param name="order">If specificed, order defines how the API sorts results- ascending or descending (optional)</param>
        /// <param name="sortBy">Name of BlueJeans profile field by with API response data is sorted (optional)</param>
        /// <param name="textSearch">If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users (optional)</param>
        /// <param name="emailId">If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value. (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return (1-based value) (optional)</param>
        /// <returns>Task of ApiResponse (EnterpriseUserSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnterpriseUserSearch>> SearchUsersAsyncWithHttpInfo (int? enterpriseId, string fields = null, string order = null, string sortBy = null, string textSearch = null, string emailId = null, int? pageSize = null, int? pageNumber = null)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling EnterpriseApi->SearchUsers");

            var localVarPath = "/v1/enterprise/{enterpriseId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enterpriseId != null) localVarPathParams.Add("enterpriseId", this.Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (textSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "textSearch", textSearch)); // query parameter
            if (emailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "emailId", emailId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnterpriseUserSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnterpriseUserSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnterpriseUserSearch)));
        }

    }
}
