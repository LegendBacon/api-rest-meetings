/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.bluejeans.api.rest.meetings.Client.SwaggerDateConverter;

namespace com.bluejeans.api.rest.meetings.Model
{
    /// <summary>
    /// FilterObject
    /// </summary>
    [DataContract]
    public partial class FilterObject :  IEquatable<FilterObject>, IValidatableObject
    {
        /// <summary>
        /// The data type of the comparison variable as selected from this list
        /// </summary>
        /// <value>The data type of the comparison variable as selected from this list</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,
            
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 2,
            
            /// <summary>
            /// Enum Numeric for value: numeric
            /// </summary>
            [EnumMember(Value = "numeric")]
            Numeric = 3,
            
            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4,
            
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 5
        }

        /// <summary>
        /// The data type of the comparison variable as selected from this list
        /// </summary>
        /// <value>The data type of the comparison variable as selected from this list</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// One of the BlueJeans meetings fields selected from this list to be used for comparison testing
        /// </summary>
        /// <value>One of the BlueJeans meetings fields selected from this list to be used for comparison testing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            
            /// <summary>
            /// Enum StartTime for value: startTime
            /// </summary>
            [EnumMember(Value = "startTime")]
            StartTime = 1,
            
            /// <summary>
            /// Enum EndTime for value: endTime
            /// </summary>
            [EnumMember(Value = "endTime")]
            EndTime = 2,
            
            /// <summary>
            /// Enum MeetingUUID for value: meetingUUID
            /// </summary>
            [EnumMember(Value = "meetingUUID")]
            MeetingUUID = 3,
            
            /// <summary>
            /// Enum UserId for value: userId
            /// </summary>
            [EnumMember(Value = "userId")]
            UserId = 4,
            
            /// <summary>
            /// Enum EnterpriseId for value: enterpriseId
            /// </summary>
            [EnumMember(Value = "enterpriseId")]
            EnterpriseId = 5
        }

        /// <summary>
        /// One of the BlueJeans meetings fields selected from this list to be used for comparison testing
        /// </summary>
        /// <value>One of the BlueJeans meetings fields selected from this list to be used for comparison testing</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldEnum? Field { get; set; }
        /// <summary>
        /// A comparison operator selected from this list- less than, greater than, equal,and in
        /// </summary>
        /// <value>A comparison operator selected from this list- less than, greater than, equal,and in</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComparisonEnum
        {
            
            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 1,
            
            /// <summary>
            /// Enum Gt for value: gt
            /// </summary>
            [EnumMember(Value = "gt")]
            Gt = 2,
            
            /// <summary>
            /// Enum Eq for value: eq
            /// </summary>
            [EnumMember(Value = "eq")]
            Eq = 3,
            
            /// <summary>
            /// Enum In for value: in
            /// </summary>
            [EnumMember(Value = "in")]
            In = 4
        }

        /// <summary>
        /// A comparison operator selected from this list- less than, greater than, equal,and in
        /// </summary>
        /// <value>A comparison operator selected from this list- less than, greater than, equal,and in</value>
        [DataMember(Name="comparison", EmitDefaultValue=false)]
        public ComparisonEnum? Comparison { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterObject" /> class.
        /// </summary>
        /// <param name="type">The data type of the comparison variable as selected from this list.</param>
        /// <param name="value">Value for comparison testing.  A time field must be formatted as yyyy-mm-ddThh:mm:ss (gmt offset). Example 2018-05-10T23:59:00-07:00.</param>
        /// <param name="field">One of the BlueJeans meetings fields selected from this list to be used for comparison testing.</param>
        /// <param name="comparison">A comparison operator selected from this list- less than, greater than, equal,and in.</param>
        public FilterObject(TypeEnum? type = default(TypeEnum?), string value = default(string), FieldEnum? field = default(FieldEnum?), ComparisonEnum? comparison = default(ComparisonEnum?))
        {
            this.Type = type;
            this.Value = value;
            this.Field = field;
            this.Comparison = comparison;
        }
        

        /// <summary>
        /// Value for comparison testing.  A time field must be formatted as yyyy-mm-ddThh:mm:ss (gmt offset). Example 2018-05-10T23:59:00-07:00
        /// </summary>
        /// <value>Value for comparison testing.  A time field must be formatted as yyyy-mm-ddThh:mm:ss (gmt offset). Example 2018-05-10T23:59:00-07:00</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterObject {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Comparison: ").Append(Comparison).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterObject);
        }

        /// <summary>
        /// Returns true if FilterObject instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Comparison == input.Comparison ||
                    (this.Comparison != null &&
                    this.Comparison.Equals(input.Comparison))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Comparison != null)
                    hashCode = hashCode * 59 + this.Comparison.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
