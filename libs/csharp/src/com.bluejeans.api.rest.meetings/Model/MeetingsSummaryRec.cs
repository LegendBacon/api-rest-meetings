/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.bluejeans.api.rest.meetings.Client.SwaggerDateConverter;

namespace com.bluejeans.api.rest.meetings.Model
{
    /// <summary>
    /// MeetingsSummaryRec
    /// </summary>
    [DataContract]
    public partial class MeetingsSummaryRec :  IEquatable<MeetingsSummaryRec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingsSummaryRec" /> class.
        /// </summary>
        /// <param name="meetingsCount">Number of meetings held.</param>
        /// <param name="countryCount">Number of countries with participants in a meeting.</param>
        /// <param name="registeredUsers">Number of registered BlueJeans users who were in meetings..</param>
        /// <param name="activeUsers">activeUsers.</param>
        /// <param name="totalMinutes">Total minutes of meetings..</param>
        /// <param name="averageCallDuration">Average number of minutes participants were in a meeting..</param>
        /// <param name="totalParticipants">Total people who were in meetings..</param>
        /// <param name="recordingCount">Total number of meetings recorded..</param>
        /// <param name="averageParticipants">Average number of participants per meeting..</param>
        /// <param name="videoShareCount">videoShareCount.</param>
        /// <param name="cityCount">Total number of cities with meeting participants..</param>
        /// <param name="recordingViewCount">Total number of times that recordings were viewed..</param>
        public MeetingsSummaryRec(int? meetingsCount = default(int?), int? countryCount = default(int?), int? registeredUsers = default(int?), int? activeUsers = default(int?), int? totalMinutes = default(int?), decimal? averageCallDuration = default(decimal?), int? totalParticipants = default(int?), int? recordingCount = default(int?), decimal? averageParticipants = default(decimal?), int? videoShareCount = default(int?), int? cityCount = default(int?), int? recordingViewCount = default(int?))
        {
            this.MeetingsCount = meetingsCount;
            this.CountryCount = countryCount;
            this.RegisteredUsers = registeredUsers;
            this.ActiveUsers = activeUsers;
            this.TotalMinutes = totalMinutes;
            this.AverageCallDuration = averageCallDuration;
            this.TotalParticipants = totalParticipants;
            this.RecordingCount = recordingCount;
            this.AverageParticipants = averageParticipants;
            this.VideoShareCount = videoShareCount;
            this.CityCount = cityCount;
            this.RecordingViewCount = recordingViewCount;
        }
        
        /// <summary>
        /// Number of meetings held
        /// </summary>
        /// <value>Number of meetings held</value>
        [DataMember(Name="meetings_count", EmitDefaultValue=false)]
        public int? MeetingsCount { get; set; }

        /// <summary>
        /// Number of countries with participants in a meeting
        /// </summary>
        /// <value>Number of countries with participants in a meeting</value>
        [DataMember(Name="country_count", EmitDefaultValue=false)]
        public int? CountryCount { get; set; }

        /// <summary>
        /// Number of registered BlueJeans users who were in meetings.
        /// </summary>
        /// <value>Number of registered BlueJeans users who were in meetings.</value>
        [DataMember(Name="registered_users", EmitDefaultValue=false)]
        public int? RegisteredUsers { get; set; }

        /// <summary>
        /// Gets or Sets ActiveUsers
        /// </summary>
        [DataMember(Name="active_users", EmitDefaultValue=false)]
        public int? ActiveUsers { get; set; }

        /// <summary>
        /// Total minutes of meetings.
        /// </summary>
        /// <value>Total minutes of meetings.</value>
        [DataMember(Name="total_minutes", EmitDefaultValue=false)]
        public int? TotalMinutes { get; set; }

        /// <summary>
        /// Average number of minutes participants were in a meeting.
        /// </summary>
        /// <value>Average number of minutes participants were in a meeting.</value>
        [DataMember(Name="average_call_duration", EmitDefaultValue=false)]
        public decimal? AverageCallDuration { get; set; }

        /// <summary>
        /// Total people who were in meetings.
        /// </summary>
        /// <value>Total people who were in meetings.</value>
        [DataMember(Name="total_participants", EmitDefaultValue=false)]
        public int? TotalParticipants { get; set; }

        /// <summary>
        /// Total number of meetings recorded.
        /// </summary>
        /// <value>Total number of meetings recorded.</value>
        [DataMember(Name="recording_count", EmitDefaultValue=false)]
        public int? RecordingCount { get; set; }

        /// <summary>
        /// Average number of participants per meeting.
        /// </summary>
        /// <value>Average number of participants per meeting.</value>
        [DataMember(Name="average_participants", EmitDefaultValue=false)]
        public decimal? AverageParticipants { get; set; }

        /// <summary>
        /// Gets or Sets VideoShareCount
        /// </summary>
        [DataMember(Name="video_share_count", EmitDefaultValue=false)]
        public int? VideoShareCount { get; set; }

        /// <summary>
        /// Total number of cities with meeting participants.
        /// </summary>
        /// <value>Total number of cities with meeting participants.</value>
        [DataMember(Name="city_count", EmitDefaultValue=false)]
        public int? CityCount { get; set; }

        /// <summary>
        /// Total number of times that recordings were viewed.
        /// </summary>
        /// <value>Total number of times that recordings were viewed.</value>
        [DataMember(Name="recording_view_count", EmitDefaultValue=false)]
        public int? RecordingViewCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingsSummaryRec {\n");
            sb.Append("  MeetingsCount: ").Append(MeetingsCount).Append("\n");
            sb.Append("  CountryCount: ").Append(CountryCount).Append("\n");
            sb.Append("  RegisteredUsers: ").Append(RegisteredUsers).Append("\n");
            sb.Append("  ActiveUsers: ").Append(ActiveUsers).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  AverageCallDuration: ").Append(AverageCallDuration).Append("\n");
            sb.Append("  TotalParticipants: ").Append(TotalParticipants).Append("\n");
            sb.Append("  RecordingCount: ").Append(RecordingCount).Append("\n");
            sb.Append("  AverageParticipants: ").Append(AverageParticipants).Append("\n");
            sb.Append("  VideoShareCount: ").Append(VideoShareCount).Append("\n");
            sb.Append("  CityCount: ").Append(CityCount).Append("\n");
            sb.Append("  RecordingViewCount: ").Append(RecordingViewCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingsSummaryRec);
        }

        /// <summary>
        /// Returns true if MeetingsSummaryRec instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingsSummaryRec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingsSummaryRec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MeetingsCount == input.MeetingsCount ||
                    (this.MeetingsCount != null &&
                    this.MeetingsCount.Equals(input.MeetingsCount))
                ) && 
                (
                    this.CountryCount == input.CountryCount ||
                    (this.CountryCount != null &&
                    this.CountryCount.Equals(input.CountryCount))
                ) && 
                (
                    this.RegisteredUsers == input.RegisteredUsers ||
                    (this.RegisteredUsers != null &&
                    this.RegisteredUsers.Equals(input.RegisteredUsers))
                ) && 
                (
                    this.ActiveUsers == input.ActiveUsers ||
                    (this.ActiveUsers != null &&
                    this.ActiveUsers.Equals(input.ActiveUsers))
                ) && 
                (
                    this.TotalMinutes == input.TotalMinutes ||
                    (this.TotalMinutes != null &&
                    this.TotalMinutes.Equals(input.TotalMinutes))
                ) && 
                (
                    this.AverageCallDuration == input.AverageCallDuration ||
                    (this.AverageCallDuration != null &&
                    this.AverageCallDuration.Equals(input.AverageCallDuration))
                ) && 
                (
                    this.TotalParticipants == input.TotalParticipants ||
                    (this.TotalParticipants != null &&
                    this.TotalParticipants.Equals(input.TotalParticipants))
                ) && 
                (
                    this.RecordingCount == input.RecordingCount ||
                    (this.RecordingCount != null &&
                    this.RecordingCount.Equals(input.RecordingCount))
                ) && 
                (
                    this.AverageParticipants == input.AverageParticipants ||
                    (this.AverageParticipants != null &&
                    this.AverageParticipants.Equals(input.AverageParticipants))
                ) && 
                (
                    this.VideoShareCount == input.VideoShareCount ||
                    (this.VideoShareCount != null &&
                    this.VideoShareCount.Equals(input.VideoShareCount))
                ) && 
                (
                    this.CityCount == input.CityCount ||
                    (this.CityCount != null &&
                    this.CityCount.Equals(input.CityCount))
                ) && 
                (
                    this.RecordingViewCount == input.RecordingViewCount ||
                    (this.RecordingViewCount != null &&
                    this.RecordingViewCount.Equals(input.RecordingViewCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeetingsCount != null)
                    hashCode = hashCode * 59 + this.MeetingsCount.GetHashCode();
                if (this.CountryCount != null)
                    hashCode = hashCode * 59 + this.CountryCount.GetHashCode();
                if (this.RegisteredUsers != null)
                    hashCode = hashCode * 59 + this.RegisteredUsers.GetHashCode();
                if (this.ActiveUsers != null)
                    hashCode = hashCode * 59 + this.ActiveUsers.GetHashCode();
                if (this.TotalMinutes != null)
                    hashCode = hashCode * 59 + this.TotalMinutes.GetHashCode();
                if (this.AverageCallDuration != null)
                    hashCode = hashCode * 59 + this.AverageCallDuration.GetHashCode();
                if (this.TotalParticipants != null)
                    hashCode = hashCode * 59 + this.TotalParticipants.GetHashCode();
                if (this.RecordingCount != null)
                    hashCode = hashCode * 59 + this.RecordingCount.GetHashCode();
                if (this.AverageParticipants != null)
                    hashCode = hashCode * 59 + this.AverageParticipants.GetHashCode();
                if (this.VideoShareCount != null)
                    hashCode = hashCode * 59 + this.VideoShareCount.GetHashCode();
                if (this.CityCount != null)
                    hashCode = hashCode * 59 + this.CityCount.GetHashCode();
                if (this.RecordingViewCount != null)
                    hashCode = hashCode * 59 + this.RecordingViewCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
