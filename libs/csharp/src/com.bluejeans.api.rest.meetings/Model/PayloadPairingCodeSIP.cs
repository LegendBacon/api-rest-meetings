/* 
 * BlueJeans Meetings REST API
 *
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.bluejeans.api.rest.meetings.Client.SwaggerDateConverter;

namespace com.bluejeans.api.rest.meetings.Model
{
    /// <summary>
    /// PayloadPairingCodeSIP
    /// </summary>
    [DataContract]
    public partial class PayloadPairingCodeSIP :  IEquatable<PayloadPairingCodeSIP>, IValidatableObject
    {
        /// <summary>
        /// Type of physical device is pairing.
        /// </summary>
        /// <value>Type of physical device is pairing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndpointTypeEnum
        {
            
            /// <summary>
            /// Enum GENERIC for value: GENERIC
            /// </summary>
            [EnumMember(Value = "GENERIC")]
            GENERIC = 1,
            
            /// <summary>
            /// Enum LYNC for value: LYNC
            /// </summary>
            [EnumMember(Value = "LYNC")]
            LYNC = 2,
            
            /// <summary>
            /// Enum JABBER for value: JABBER
            /// </summary>
            [EnumMember(Value = "JABBER")]
            JABBER = 3,
            
            /// <summary>
            /// Enum BlueJeansBrowserEndpoint for value: BlueJeansBrowserEndpoint
            /// </summary>
            [EnumMember(Value = "BlueJeansBrowserEndpoint")]
            BlueJeansBrowserEndpoint = 4,
            
            /// <summary>
            /// Enum BlueJeansMobileEndpoint for value: BlueJeansMobileEndpoint
            /// </summary>
            [EnumMember(Value = "BlueJeansMobileEndpoint")]
            BlueJeansMobileEndpoint = 5,
            
            /// <summary>
            /// Enum WranglerSkypeEndpoint for value: WranglerSkypeEndpoint
            /// </summary>
            [EnumMember(Value = "WranglerSkypeEndpoint")]
            WranglerSkypeEndpoint = 6,
            
            /// <summary>
            /// Enum PSTN for value: PSTN
            /// </summary>
            [EnumMember(Value = "PSTN")]
            PSTN = 7,
            
            /// <summary>
            /// Enum DCPAudioOnly for value: DCPAudioOnly
            /// </summary>
            [EnumMember(Value = "DCPAudioOnly")]
            DCPAudioOnly = 8
        }

        /// <summary>
        /// Type of physical device is pairing.
        /// </summary>
        /// <value>Type of physical device is pairing.</value>
        [DataMember(Name="endpointType", EmitDefaultValue=false)]
        public EndpointTypeEnum EndpointType { get; set; }
        /// <summary>
        /// Optional language code
        /// </summary>
        /// <value>Optional language code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageCodeEnum
        {
            
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,
            
            /// <summary>
            /// Enum EnUs for value: en-us
            /// </summary>
            [EnumMember(Value = "en-us")]
            EnUs = 2,
            
            /// <summary>
            /// Enum EnGb for value: en-gb
            /// </summary>
            [EnumMember(Value = "en-gb")]
            EnGb = 3,
            
            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 4
        }

        /// <summary>
        /// Optional language code
        /// </summary>
        /// <value>Optional language code</value>
        [DataMember(Name="languageCode", EmitDefaultValue=false)]
        public LanguageCodeEnum? LanguageCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayloadPairingCodeSIP" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayloadPairingCodeSIP() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayloadPairingCodeSIP" /> class.
        /// </summary>
        /// <param name="endpointType">Type of physical device is pairing. (required).</param>
        /// <param name="userId">Optional database id of user associated with endpoint.</param>
        /// <param name="languageCode">Optional language code (default to LanguageCodeEnum.En).</param>
        /// <param name="endpointName">Optional name of endpoint (default to &quot;My Test Endpoint&quot;).</param>
        public PayloadPairingCodeSIP(EndpointTypeEnum endpointType = default(EndpointTypeEnum), int? userId = default(int?), LanguageCodeEnum? languageCode = LanguageCodeEnum.En, string endpointName = "My Test Endpoint")
        {
            // to ensure "endpointType" is required (not null)
            if (endpointType == null)
            {
                throw new InvalidDataException("endpointType is a required property for PayloadPairingCodeSIP and cannot be null");
            }
            else
            {
                this.EndpointType = endpointType;
            }
            this.UserId = userId;
            // use default value if no "languageCode" provided
            if (languageCode == null)
            {
                this.LanguageCode = LanguageCodeEnum.En;
            }
            else
            {
                this.LanguageCode = languageCode;
            }
            // use default value if no "endpointName" provided
            if (endpointName == null)
            {
                this.EndpointName = "My Test Endpoint";
            }
            else
            {
                this.EndpointName = endpointName;
            }
        }
        

        /// <summary>
        /// Optional database id of user associated with endpoint
        /// </summary>
        /// <value>Optional database id of user associated with endpoint</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }


        /// <summary>
        /// Optional name of endpoint
        /// </summary>
        /// <value>Optional name of endpoint</value>
        [DataMember(Name="endpointName", EmitDefaultValue=false)]
        public string EndpointName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayloadPairingCodeSIP {\n");
            sb.Append("  EndpointType: ").Append(EndpointType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  EndpointName: ").Append(EndpointName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayloadPairingCodeSIP);
        }

        /// <summary>
        /// Returns true if PayloadPairingCodeSIP instances are equal
        /// </summary>
        /// <param name="input">Instance of PayloadPairingCodeSIP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayloadPairingCodeSIP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndpointType == input.EndpointType ||
                    (this.EndpointType != null &&
                    this.EndpointType.Equals(input.EndpointType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.EndpointName == input.EndpointName ||
                    (this.EndpointName != null &&
                    this.EndpointName.Equals(input.EndpointName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointType != null)
                    hashCode = hashCode * 59 + this.EndpointType.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                if (this.EndpointName != null)
                    hashCode = hashCode * 59 + this.EndpointName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
