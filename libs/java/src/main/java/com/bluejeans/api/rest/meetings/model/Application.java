/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Application
 */

public class Application {
  @SerializedName("description")
  private String description = null;

  @SerializedName("appName")
  private String appName = null;

  @SerializedName("appLogoUrl")
  private String appLogoUrl = null;

  @SerializedName("redirectUrls")
  private List<String> redirectUrls = null;

  @SerializedName("clientId")
  private String clientId = null;

  @SerializedName("clientSecret")
  private String clientSecret = null;

  public Application description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A summary of the client application.
   * @return description
  **/
  @ApiModelProperty(value = "A summary of the client application.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Application appName(String appName) {
    this.appName = appName;
    return this;
  }

   /**
   * The name of the client application.
   * @return appName
  **/
  @ApiModelProperty(value = "The name of the client application.")
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }

  public Application appLogoUrl(String appLogoUrl) {
    this.appLogoUrl = appLogoUrl;
    return this;
  }

   /**
   * A URL of an image that will be displayed to users during authorization.
   * @return appLogoUrl
  **/
  @ApiModelProperty(value = "A URL of an image that will be displayed to users during authorization.")
  public String getAppLogoUrl() {
    return appLogoUrl;
  }

  public void setAppLogoUrl(String appLogoUrl) {
    this.appLogoUrl = appLogoUrl;
  }

  public Application redirectUrls(List<String> redirectUrls) {
    this.redirectUrls = redirectUrls;
    return this;
  }

  public Application addRedirectUrlsItem(String redirectUrlsItem) {
    if (this.redirectUrls == null) {
      this.redirectUrls = new ArrayList<String>();
    }
    this.redirectUrls.add(redirectUrlsItem);
    return this;
  }

   /**
   * Get redirectUrls
   * @return redirectUrls
  **/
  @ApiModelProperty(value = "")
  public List<String> getRedirectUrls() {
    return redirectUrls;
  }

  public void setRedirectUrls(List<String> redirectUrls) {
    this.redirectUrls = redirectUrls;
  }

   /**
   * The client ID will be generated on creation of the application. Normally, a 32 character hexadecimal numeric string.
   * @return clientId
  **/
  @ApiModelProperty(value = "The client ID will be generated on creation of the application. Normally, a 32 character hexadecimal numeric string.")
  public String getClientId() {
    return clientId;
  }

   /**
   * The client secret will be generated on creation of the application. Retain this value as it will only be revealed one time. If lost, you will need to regenerate.
   * @return clientSecret
  **/
  @ApiModelProperty(value = "The client secret will be generated on creation of the application. Retain this value as it will only be revealed one time. If lost, you will need to regenerate.")
  public String getClientSecret() {
    return clientSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.description, application.description) &&
        Objects.equals(this.appName, application.appName) &&
        Objects.equals(this.appLogoUrl, application.appLogoUrl) &&
        Objects.equals(this.redirectUrls, application.redirectUrls) &&
        Objects.equals(this.clientId, application.clientId) &&
        Objects.equals(this.clientSecret, application.clientSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, appName, appLogoUrl, redirectUrls, clientId, clientSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appLogoUrl: ").append(toIndentedString(appLogoUrl)).append("\n");
    sb.append("    redirectUrls: ").append(toIndentedString(redirectUrls)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

