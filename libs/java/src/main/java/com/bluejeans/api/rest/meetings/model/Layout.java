/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Layout
 */

public class Layout {
  /**
   * Gets or Sets layoutMode
   */
  @JsonAdapter(LayoutModeEnum.Adapter.class)
  public enum LayoutModeEnum {
    VIDEO("Video");

    private String value;

    LayoutModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutModeEnum fromValue(String text) {
      for (LayoutModeEnum b : LayoutModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LayoutModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayoutModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("layoutMode")
  private LayoutModeEnum layoutMode = null;

  /**
   * Note misspelling in Continuous Presence enum.
   */
  @JsonAdapter(SubLayoutModeEnum.Adapter.class)
  public enum SubLayoutModeEnum {
    VIDEOCURRENTSPEAKER_1_VIDEOCONTINIOUSPRESENCE_2_VIDEOCONSTANTPRESENCE_3_VIDEOCONTINUOUSPRESENCE_4_("VideoCurrentSpeaker(1) VideoContiniousPresence(2) VideoConstantPresence(3) VideoContinuousPresence(4)");

    private String value;

    SubLayoutModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubLayoutModeEnum fromValue(String text) {
      for (SubLayoutModeEnum b : SubLayoutModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SubLayoutModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubLayoutModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubLayoutModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SubLayoutModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("subLayoutMode")
  private SubLayoutModeEnum subLayoutMode = null;

  public Layout layoutMode(LayoutModeEnum layoutMode) {
    this.layoutMode = layoutMode;
    return this;
  }

   /**
   * Get layoutMode
   * @return layoutMode
  **/
  @ApiModelProperty(value = "")
  public LayoutModeEnum getLayoutMode() {
    return layoutMode;
  }

  public void setLayoutMode(LayoutModeEnum layoutMode) {
    this.layoutMode = layoutMode;
  }

  public Layout subLayoutMode(SubLayoutModeEnum subLayoutMode) {
    this.subLayoutMode = subLayoutMode;
    return this;
  }

   /**
   * Note misspelling in Continuous Presence enum.
   * @return subLayoutMode
  **/
  @ApiModelProperty(value = "Note misspelling in Continuous Presence enum.")
  public SubLayoutModeEnum getSubLayoutMode() {
    return subLayoutMode;
  }

  public void setSubLayoutMode(SubLayoutModeEnum subLayoutMode) {
    this.subLayoutMode = subLayoutMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Layout layout = (Layout) o;
    return Objects.equals(this.layoutMode, layout.layoutMode) &&
        Objects.equals(this.subLayoutMode, layout.subLayoutMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layoutMode, subLayoutMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Layout {\n");
    
    sb.append("    layoutMode: ").append(toIndentedString(layoutMode)).append("\n");
    sb.append("    subLayoutMode: ").append(toIndentedString(subLayoutMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

