/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MeetingRecurrencePattern
 */

public class MeetingRecurrencePattern {
  /**
   * Gets or Sets recurrenceType
   */
  @JsonAdapter(RecurrenceTypeEnum.Adapter.class)
  public enum RecurrenceTypeEnum {
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY");

    private String value;

    RecurrenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceTypeEnum fromValue(String text) {
      for (RecurrenceTypeEnum b : RecurrenceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RecurrenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecurrenceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("recurrenceType")
  private RecurrenceTypeEnum recurrenceType = null;

  @SerializedName("endDate")
  private Long endDate = null;

  @SerializedName("recurrenceCount")
  private Integer recurrenceCount = null;

  @SerializedName("frequency")
  private Integer frequency = null;

  @SerializedName("daysOfWeekMask")
  private Integer daysOfWeekMask = null;

  @SerializedName("dayOfMonth")
  private Integer dayOfMonth = null;

  /**
   * the numerical week in the month for reoccuring meetings.
   */
  @JsonAdapter(WeekOfMonthEnum.Adapter.class)
  public enum WeekOfMonthEnum {
    NONE("NONE"),
    
    FIRST("FIRST"),
    
    SECOND("SECOND"),
    
    THIRD("THIRD"),
    
    FOURTH("FOURTH"),
    
    LAST("LAST");

    private String value;

    WeekOfMonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeekOfMonthEnum fromValue(String text) {
      for (WeekOfMonthEnum b : WeekOfMonthEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WeekOfMonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeekOfMonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeekOfMonthEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WeekOfMonthEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("weekOfMonth")
  private WeekOfMonthEnum weekOfMonth = WeekOfMonthEnum.NONE;

  /**
   * the month in the year for reoccurring meetings.
   */
  @JsonAdapter(MonthOfYearEnum.Adapter.class)
  public enum MonthOfYearEnum {
    NONE("NONE"),
    
    JANUARY("JANUARY"),
    
    FEBRUARY("FEBRUARY"),
    
    MARCH("MARCH"),
    
    APRIL("APRIL"),
    
    MAY("MAY"),
    
    JUNE("JUNE"),
    
    JULY("JULY"),
    
    AUGUST("AUGUST"),
    
    SEPTEMBER("SEPTEMBER"),
    
    OCTOBER("OCTOBER"),
    
    NOVEMBER("NOVEMBER"),
    
    DECEMBER("DECEMBER");

    private String value;

    MonthOfYearEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthOfYearEnum fromValue(String text) {
      for (MonthOfYearEnum b : MonthOfYearEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MonthOfYearEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthOfYearEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthOfYearEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MonthOfYearEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("monthOfYear")
  private MonthOfYearEnum monthOfYear = MonthOfYearEnum.NONE;

  public MeetingRecurrencePattern recurrenceType(RecurrenceTypeEnum recurrenceType) {
    this.recurrenceType = recurrenceType;
    return this;
  }

   /**
   * Get recurrenceType
   * @return recurrenceType
  **/
  @ApiModelProperty(value = "")
  public RecurrenceTypeEnum getRecurrenceType() {
    return recurrenceType;
  }

  public void setRecurrenceType(RecurrenceTypeEnum recurrenceType) {
    this.recurrenceType = recurrenceType;
  }

  public MeetingRecurrencePattern endDate(Long endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * This is the epoch-based ending-time (in milliseconds) for the recurrence chain of meetings.
   * @return endDate
  **/
  @ApiModelProperty(value = "This is the epoch-based ending-time (in milliseconds) for the recurrence chain of meetings.")
  public Long getEndDate() {
    return endDate;
  }

  public void setEndDate(Long endDate) {
    this.endDate = endDate;
  }

  public MeetingRecurrencePattern recurrenceCount(Integer recurrenceCount) {
    this.recurrenceCount = recurrenceCount;
    return this;
  }

   /**
   * The number of reoccurring meetings
   * @return recurrenceCount
  **/
  @ApiModelProperty(value = "The number of reoccurring meetings")
  public Integer getRecurrenceCount() {
    return recurrenceCount;
  }

  public void setRecurrenceCount(Integer recurrenceCount) {
    this.recurrenceCount = recurrenceCount;
  }

  public MeetingRecurrencePattern frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * the interval of reoccurring meetings.
   * @return frequency
  **/
  @ApiModelProperty(value = "the interval of reoccurring meetings.")
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }

  public MeetingRecurrencePattern daysOfWeekMask(Integer daysOfWeekMask) {
    this.daysOfWeekMask = daysOfWeekMask;
    return this;
  }

   /**
   * bit mask for selecting which days of the week.  Sunday:1, Monday:2, Tuesday:4, Wednesday:8, Thursday:16, Friday:32, and Saturday:64
   * @return daysOfWeekMask
  **/
  @ApiModelProperty(value = "bit mask for selecting which days of the week.  Sunday:1, Monday:2, Tuesday:4, Wednesday:8, Thursday:16, Friday:32, and Saturday:64")
  public Integer getDaysOfWeekMask() {
    return daysOfWeekMask;
  }

  public void setDaysOfWeekMask(Integer daysOfWeekMask) {
    this.daysOfWeekMask = daysOfWeekMask;
  }

  public MeetingRecurrencePattern dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

   /**
   * the numerical day in the month for monthly reoccurring meetings.
   * @return dayOfMonth
  **/
  @ApiModelProperty(value = "the numerical day in the month for monthly reoccurring meetings.")
  public Integer getDayOfMonth() {
    return dayOfMonth;
  }

  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }

  public MeetingRecurrencePattern weekOfMonth(WeekOfMonthEnum weekOfMonth) {
    this.weekOfMonth = weekOfMonth;
    return this;
  }

   /**
   * the numerical week in the month for reoccuring meetings.
   * @return weekOfMonth
  **/
  @ApiModelProperty(value = "the numerical week in the month for reoccuring meetings.")
  public WeekOfMonthEnum getWeekOfMonth() {
    return weekOfMonth;
  }

  public void setWeekOfMonth(WeekOfMonthEnum weekOfMonth) {
    this.weekOfMonth = weekOfMonth;
  }

  public MeetingRecurrencePattern monthOfYear(MonthOfYearEnum monthOfYear) {
    this.monthOfYear = monthOfYear;
    return this;
  }

   /**
   * the month in the year for reoccurring meetings.
   * @return monthOfYear
  **/
  @ApiModelProperty(value = "the month in the year for reoccurring meetings.")
  public MonthOfYearEnum getMonthOfYear() {
    return monthOfYear;
  }

  public void setMonthOfYear(MonthOfYearEnum monthOfYear) {
    this.monthOfYear = monthOfYear;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingRecurrencePattern meetingRecurrencePattern = (MeetingRecurrencePattern) o;
    return Objects.equals(this.recurrenceType, meetingRecurrencePattern.recurrenceType) &&
        Objects.equals(this.endDate, meetingRecurrencePattern.endDate) &&
        Objects.equals(this.recurrenceCount, meetingRecurrencePattern.recurrenceCount) &&
        Objects.equals(this.frequency, meetingRecurrencePattern.frequency) &&
        Objects.equals(this.daysOfWeekMask, meetingRecurrencePattern.daysOfWeekMask) &&
        Objects.equals(this.dayOfMonth, meetingRecurrencePattern.dayOfMonth) &&
        Objects.equals(this.weekOfMonth, meetingRecurrencePattern.weekOfMonth) &&
        Objects.equals(this.monthOfYear, meetingRecurrencePattern.monthOfYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recurrenceType, endDate, recurrenceCount, frequency, daysOfWeekMask, dayOfMonth, weekOfMonth, monthOfYear);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingRecurrencePattern {\n");
    
    sb.append("    recurrenceType: ").append(toIndentedString(recurrenceType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    recurrenceCount: ").append(toIndentedString(recurrenceCount)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    daysOfWeekMask: ").append(toIndentedString(daysOfWeekMask)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    weekOfMonth: ").append(toIndentedString(weekOfMonth)).append("\n");
    sb.append("    monthOfYear: ").append(toIndentedString(monthOfYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

