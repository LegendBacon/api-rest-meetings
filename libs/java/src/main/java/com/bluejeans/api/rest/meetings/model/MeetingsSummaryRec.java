/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * MeetingsSummaryRec
 */

public class MeetingsSummaryRec {
  @SerializedName("meetings_count")
  private Integer meetingsCount = null;

  @SerializedName("country_count")
  private Integer countryCount = null;

  @SerializedName("registered_users")
  private Integer registeredUsers = null;

  @SerializedName("active_users")
  private Integer activeUsers = null;

  @SerializedName("total_minutes")
  private Integer totalMinutes = null;

  @SerializedName("average_call_duration")
  private BigDecimal averageCallDuration = null;

  @SerializedName("total_participants")
  private Integer totalParticipants = null;

  @SerializedName("recording_count")
  private Integer recordingCount = null;

  @SerializedName("average_participants")
  private BigDecimal averageParticipants = null;

  @SerializedName("video_share_count")
  private Integer videoShareCount = null;

  @SerializedName("city_count")
  private Integer cityCount = null;

  @SerializedName("recording_view_count")
  private Integer recordingViewCount = null;

  public MeetingsSummaryRec meetingsCount(Integer meetingsCount) {
    this.meetingsCount = meetingsCount;
    return this;
  }

   /**
   * Number of meetings held
   * @return meetingsCount
  **/
  @ApiModelProperty(value = "Number of meetings held")
  public Integer getMeetingsCount() {
    return meetingsCount;
  }

  public void setMeetingsCount(Integer meetingsCount) {
    this.meetingsCount = meetingsCount;
  }

  public MeetingsSummaryRec countryCount(Integer countryCount) {
    this.countryCount = countryCount;
    return this;
  }

   /**
   * Number of countries with participants in a meeting
   * @return countryCount
  **/
  @ApiModelProperty(value = "Number of countries with participants in a meeting")
  public Integer getCountryCount() {
    return countryCount;
  }

  public void setCountryCount(Integer countryCount) {
    this.countryCount = countryCount;
  }

  public MeetingsSummaryRec registeredUsers(Integer registeredUsers) {
    this.registeredUsers = registeredUsers;
    return this;
  }

   /**
   * Number of registered BlueJeans users who were in meetings.
   * @return registeredUsers
  **/
  @ApiModelProperty(value = "Number of registered BlueJeans users who were in meetings.")
  public Integer getRegisteredUsers() {
    return registeredUsers;
  }

  public void setRegisteredUsers(Integer registeredUsers) {
    this.registeredUsers = registeredUsers;
  }

  public MeetingsSummaryRec activeUsers(Integer activeUsers) {
    this.activeUsers = activeUsers;
    return this;
  }

   /**
   * Get activeUsers
   * @return activeUsers
  **/
  @ApiModelProperty(value = "")
  public Integer getActiveUsers() {
    return activeUsers;
  }

  public void setActiveUsers(Integer activeUsers) {
    this.activeUsers = activeUsers;
  }

  public MeetingsSummaryRec totalMinutes(Integer totalMinutes) {
    this.totalMinutes = totalMinutes;
    return this;
  }

   /**
   * Total minutes of meetings.
   * @return totalMinutes
  **/
  @ApiModelProperty(value = "Total minutes of meetings.")
  public Integer getTotalMinutes() {
    return totalMinutes;
  }

  public void setTotalMinutes(Integer totalMinutes) {
    this.totalMinutes = totalMinutes;
  }

  public MeetingsSummaryRec averageCallDuration(BigDecimal averageCallDuration) {
    this.averageCallDuration = averageCallDuration;
    return this;
  }

   /**
   * Average number of minutes participants were in a meeting.
   * @return averageCallDuration
  **/
  @ApiModelProperty(value = "Average number of minutes participants were in a meeting.")
  public BigDecimal getAverageCallDuration() {
    return averageCallDuration;
  }

  public void setAverageCallDuration(BigDecimal averageCallDuration) {
    this.averageCallDuration = averageCallDuration;
  }

  public MeetingsSummaryRec totalParticipants(Integer totalParticipants) {
    this.totalParticipants = totalParticipants;
    return this;
  }

   /**
   * Total people who were in meetings.
   * @return totalParticipants
  **/
  @ApiModelProperty(value = "Total people who were in meetings.")
  public Integer getTotalParticipants() {
    return totalParticipants;
  }

  public void setTotalParticipants(Integer totalParticipants) {
    this.totalParticipants = totalParticipants;
  }

  public MeetingsSummaryRec recordingCount(Integer recordingCount) {
    this.recordingCount = recordingCount;
    return this;
  }

   /**
   * Total number of meetings recorded.
   * @return recordingCount
  **/
  @ApiModelProperty(value = "Total number of meetings recorded.")
  public Integer getRecordingCount() {
    return recordingCount;
  }

  public void setRecordingCount(Integer recordingCount) {
    this.recordingCount = recordingCount;
  }

  public MeetingsSummaryRec averageParticipants(BigDecimal averageParticipants) {
    this.averageParticipants = averageParticipants;
    return this;
  }

   /**
   * Average number of participants per meeting.
   * @return averageParticipants
  **/
  @ApiModelProperty(value = "Average number of participants per meeting.")
  public BigDecimal getAverageParticipants() {
    return averageParticipants;
  }

  public void setAverageParticipants(BigDecimal averageParticipants) {
    this.averageParticipants = averageParticipants;
  }

  public MeetingsSummaryRec videoShareCount(Integer videoShareCount) {
    this.videoShareCount = videoShareCount;
    return this;
  }

   /**
   * Get videoShareCount
   * @return videoShareCount
  **/
  @ApiModelProperty(value = "")
  public Integer getVideoShareCount() {
    return videoShareCount;
  }

  public void setVideoShareCount(Integer videoShareCount) {
    this.videoShareCount = videoShareCount;
  }

  public MeetingsSummaryRec cityCount(Integer cityCount) {
    this.cityCount = cityCount;
    return this;
  }

   /**
   * Total number of cities with meeting participants.
   * @return cityCount
  **/
  @ApiModelProperty(value = "Total number of cities with meeting participants.")
  public Integer getCityCount() {
    return cityCount;
  }

  public void setCityCount(Integer cityCount) {
    this.cityCount = cityCount;
  }

  public MeetingsSummaryRec recordingViewCount(Integer recordingViewCount) {
    this.recordingViewCount = recordingViewCount;
    return this;
  }

   /**
   * Total number of times that recordings were viewed.
   * @return recordingViewCount
  **/
  @ApiModelProperty(value = "Total number of times that recordings were viewed.")
  public Integer getRecordingViewCount() {
    return recordingViewCount;
  }

  public void setRecordingViewCount(Integer recordingViewCount) {
    this.recordingViewCount = recordingViewCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsSummaryRec meetingsSummaryRec = (MeetingsSummaryRec) o;
    return Objects.equals(this.meetingsCount, meetingsSummaryRec.meetingsCount) &&
        Objects.equals(this.countryCount, meetingsSummaryRec.countryCount) &&
        Objects.equals(this.registeredUsers, meetingsSummaryRec.registeredUsers) &&
        Objects.equals(this.activeUsers, meetingsSummaryRec.activeUsers) &&
        Objects.equals(this.totalMinutes, meetingsSummaryRec.totalMinutes) &&
        Objects.equals(this.averageCallDuration, meetingsSummaryRec.averageCallDuration) &&
        Objects.equals(this.totalParticipants, meetingsSummaryRec.totalParticipants) &&
        Objects.equals(this.recordingCount, meetingsSummaryRec.recordingCount) &&
        Objects.equals(this.averageParticipants, meetingsSummaryRec.averageParticipants) &&
        Objects.equals(this.videoShareCount, meetingsSummaryRec.videoShareCount) &&
        Objects.equals(this.cityCount, meetingsSummaryRec.cityCount) &&
        Objects.equals(this.recordingViewCount, meetingsSummaryRec.recordingViewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meetingsCount, countryCount, registeredUsers, activeUsers, totalMinutes, averageCallDuration, totalParticipants, recordingCount, averageParticipants, videoShareCount, cityCount, recordingViewCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsSummaryRec {\n");
    
    sb.append("    meetingsCount: ").append(toIndentedString(meetingsCount)).append("\n");
    sb.append("    countryCount: ").append(toIndentedString(countryCount)).append("\n");
    sb.append("    registeredUsers: ").append(toIndentedString(registeredUsers)).append("\n");
    sb.append("    activeUsers: ").append(toIndentedString(activeUsers)).append("\n");
    sb.append("    totalMinutes: ").append(toIndentedString(totalMinutes)).append("\n");
    sb.append("    averageCallDuration: ").append(toIndentedString(averageCallDuration)).append("\n");
    sb.append("    totalParticipants: ").append(toIndentedString(totalParticipants)).append("\n");
    sb.append("    recordingCount: ").append(toIndentedString(recordingCount)).append("\n");
    sb.append("    averageParticipants: ").append(toIndentedString(averageParticipants)).append("\n");
    sb.append("    videoShareCount: ").append(toIndentedString(videoShareCount)).append("\n");
    sb.append("    cityCount: ").append(toIndentedString(cityCount)).append("\n");
    sb.append("    recordingViewCount: ").append(toIndentedString(recordingViewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

