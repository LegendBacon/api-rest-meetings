/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.bluejeans.api.rest.meetings.model.PersonalMeetingRoomAdvancedMeetingOptionsEditability;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PersonalMeetingRoomAdvancedMeetingOptions
 */

public class PersonalMeetingRoomAdvancedMeetingOptions {
  @SerializedName("videoBestFit")
  private Boolean videoBestFit = null;

  @SerializedName("publishMeeting")
  private Boolean publishMeeting = null;

  /**
   * How this meeting is to be encrypted.
   */
  @JsonAdapter(EncryptionTypeEnum.Adapter.class)
  public enum EncryptionTypeEnum {
    NO_ENCRYPTION("NO_ENCRYPTION"),
    
    ENCRYPTED_ONLY("ENCRYPTED_ONLY"),
    
    ENCRYPTED_OR_PSTN_ONLY("ENCRYPTED_OR_PSTN_ONLY");

    private String value;

    EncryptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionTypeEnum fromValue(String text) {
      for (EncryptionTypeEnum b : EncryptionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EncryptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EncryptionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("encryptionType")
  private EncryptionTypeEnum encryptionType = null;

  @SerializedName("moderatorLess")
  private Boolean moderatorLess = null;

  @SerializedName("allowStream")
  private Boolean allowStream = null;

  @SerializedName("autoRecord")
  private Boolean autoRecord = null;

  @SerializedName("disallowChat")
  private Boolean disallowChat = null;

  @SerializedName("muteParticipantsOnEntry")
  private Boolean muteParticipantsOnEntry = null;

  @SerializedName("showAllAttendeesInMeetingInvite")
  private Boolean showAllAttendeesInMeetingInvite = null;

  @SerializedName("editability")
  private PersonalMeetingRoomAdvancedMeetingOptionsEditability editability = null;

  public PersonalMeetingRoomAdvancedMeetingOptions videoBestFit(Boolean videoBestFit) {
    this.videoBestFit = videoBestFit;
    return this;
  }

   /**
   * Same user ID as passed in path parameter.
   * @return videoBestFit
  **/
  @ApiModelProperty(value = "Same user ID as passed in path parameter.")
  public Boolean isVideoBestFit() {
    return videoBestFit;
  }

  public void setVideoBestFit(Boolean videoBestFit) {
    this.videoBestFit = videoBestFit;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions publishMeeting(Boolean publishMeeting) {
    this.publishMeeting = publishMeeting;
    return this;
  }

   /**
   * Same user ID as passed in path parameter.
   * @return publishMeeting
  **/
  @ApiModelProperty(value = "Same user ID as passed in path parameter.")
  public Boolean isPublishMeeting() {
    return publishMeeting;
  }

  public void setPublishMeeting(Boolean publishMeeting) {
    this.publishMeeting = publishMeeting;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions encryptionType(EncryptionTypeEnum encryptionType) {
    this.encryptionType = encryptionType;
    return this;
  }

   /**
   * How this meeting is to be encrypted.
   * @return encryptionType
  **/
  @ApiModelProperty(value = "How this meeting is to be encrypted.")
  public EncryptionTypeEnum getEncryptionType() {
    return encryptionType;
  }

  public void setEncryptionType(EncryptionTypeEnum encryptionType) {
    this.encryptionType = encryptionType;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions moderatorLess(Boolean moderatorLess) {
    this.moderatorLess = moderatorLess;
    return this;
  }

   /**
   * If set require that a user enter&#39;s a moderator passcode to start meeting.
   * @return moderatorLess
  **/
  @ApiModelProperty(value = "If set require that a user enter's a moderator passcode to start meeting.")
  public Boolean isModeratorLess() {
    return moderatorLess;
  }

  public void setModeratorLess(Boolean moderatorLess) {
    this.moderatorLess = moderatorLess;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions allowStream(Boolean allowStream) {
    this.allowStream = allowStream;
    return this;
  }

   /**
   * Allow sending of streamed video
   * @return allowStream
  **/
  @ApiModelProperty(value = "Allow sending of streamed video")
  public Boolean isAllowStream() {
    return allowStream;
  }

  public void setAllowStream(Boolean allowStream) {
    this.allowStream = allowStream;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions autoRecord(Boolean autoRecord) {
    this.autoRecord = autoRecord;
    return this;
  }

   /**
   * By default start recording anytime 2 or more join this room.
   * @return autoRecord
  **/
  @ApiModelProperty(value = "By default start recording anytime 2 or more join this room.")
  public Boolean isAutoRecord() {
    return autoRecord;
  }

  public void setAutoRecord(Boolean autoRecord) {
    this.autoRecord = autoRecord;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions disallowChat(Boolean disallowChat) {
    this.disallowChat = disallowChat;
    return this;
  }

   /**
   * If set, disable the ability to send chat message within this meeting.
   * @return disallowChat
  **/
  @ApiModelProperty(value = "If set, disable the ability to send chat message within this meeting.")
  public Boolean isDisallowChat() {
    return disallowChat;
  }

  public void setDisallowChat(Boolean disallowChat) {
    this.disallowChat = disallowChat;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions muteParticipantsOnEntry(Boolean muteParticipantsOnEntry) {
    this.muteParticipantsOnEntry = muteParticipantsOnEntry;
    return this;
  }

   /**
   * If set, force each joining participant to be muted.
   * @return muteParticipantsOnEntry
  **/
  @ApiModelProperty(value = "If set, force each joining participant to be muted.")
  public Boolean isMuteParticipantsOnEntry() {
    return muteParticipantsOnEntry;
  }

  public void setMuteParticipantsOnEntry(Boolean muteParticipantsOnEntry) {
    this.muteParticipantsOnEntry = muteParticipantsOnEntry;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions showAllAttendeesInMeetingInvite(Boolean showAllAttendeesInMeetingInvite) {
    this.showAllAttendeesInMeetingInvite = showAllAttendeesInMeetingInvite;
    return this;
  }

   /**
   * When sending email invitations, include the exhaustive list of invited people.
   * @return showAllAttendeesInMeetingInvite
  **/
  @ApiModelProperty(value = "When sending email invitations, include the exhaustive list of invited people.")
  public Boolean isShowAllAttendeesInMeetingInvite() {
    return showAllAttendeesInMeetingInvite;
  }

  public void setShowAllAttendeesInMeetingInvite(Boolean showAllAttendeesInMeetingInvite) {
    this.showAllAttendeesInMeetingInvite = showAllAttendeesInMeetingInvite;
  }

  public PersonalMeetingRoomAdvancedMeetingOptions editability(PersonalMeetingRoomAdvancedMeetingOptionsEditability editability) {
    this.editability = editability;
    return this;
  }

   /**
   * Get editability
   * @return editability
  **/
  @ApiModelProperty(value = "")
  public PersonalMeetingRoomAdvancedMeetingOptionsEditability getEditability() {
    return editability;
  }

  public void setEditability(PersonalMeetingRoomAdvancedMeetingOptionsEditability editability) {
    this.editability = editability;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalMeetingRoomAdvancedMeetingOptions personalMeetingRoomAdvancedMeetingOptions = (PersonalMeetingRoomAdvancedMeetingOptions) o;
    return Objects.equals(this.videoBestFit, personalMeetingRoomAdvancedMeetingOptions.videoBestFit) &&
        Objects.equals(this.publishMeeting, personalMeetingRoomAdvancedMeetingOptions.publishMeeting) &&
        Objects.equals(this.encryptionType, personalMeetingRoomAdvancedMeetingOptions.encryptionType) &&
        Objects.equals(this.moderatorLess, personalMeetingRoomAdvancedMeetingOptions.moderatorLess) &&
        Objects.equals(this.allowStream, personalMeetingRoomAdvancedMeetingOptions.allowStream) &&
        Objects.equals(this.autoRecord, personalMeetingRoomAdvancedMeetingOptions.autoRecord) &&
        Objects.equals(this.disallowChat, personalMeetingRoomAdvancedMeetingOptions.disallowChat) &&
        Objects.equals(this.muteParticipantsOnEntry, personalMeetingRoomAdvancedMeetingOptions.muteParticipantsOnEntry) &&
        Objects.equals(this.showAllAttendeesInMeetingInvite, personalMeetingRoomAdvancedMeetingOptions.showAllAttendeesInMeetingInvite) &&
        Objects.equals(this.editability, personalMeetingRoomAdvancedMeetingOptions.editability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videoBestFit, publishMeeting, encryptionType, moderatorLess, allowStream, autoRecord, disallowChat, muteParticipantsOnEntry, showAllAttendeesInMeetingInvite, editability);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalMeetingRoomAdvancedMeetingOptions {\n");
    
    sb.append("    videoBestFit: ").append(toIndentedString(videoBestFit)).append("\n");
    sb.append("    publishMeeting: ").append(toIndentedString(publishMeeting)).append("\n");
    sb.append("    encryptionType: ").append(toIndentedString(encryptionType)).append("\n");
    sb.append("    moderatorLess: ").append(toIndentedString(moderatorLess)).append("\n");
    sb.append("    allowStream: ").append(toIndentedString(allowStream)).append("\n");
    sb.append("    autoRecord: ").append(toIndentedString(autoRecord)).append("\n");
    sb.append("    disallowChat: ").append(toIndentedString(disallowChat)).append("\n");
    sb.append("    muteParticipantsOnEntry: ").append(toIndentedString(muteParticipantsOnEntry)).append("\n");
    sb.append("    showAllAttendeesInMeetingInvite: ").append(toIndentedString(showAllAttendeesInMeetingInvite)).append("\n");
    sb.append("    editability: ").append(toIndentedString(editability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

