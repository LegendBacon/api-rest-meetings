/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.api;

import com.bluejeans.api.rest.meetings.ApiException;
import com.bluejeans.api.rest.meetings.model.Error;
import com.bluejeans.api.rest.meetings.model.GrantClient;
import com.bluejeans.api.rest.meetings.model.GrantCode;
import com.bluejeans.api.rest.meetings.model.GrantMeeting;
import com.bluejeans.api.rest.meetings.model.GrantPassword;
import com.bluejeans.api.rest.meetings.model.GrantRefresh;
import com.bluejeans.api.rest.meetings.model.GrantRequestClient;
import com.bluejeans.api.rest.meetings.model.GrantRequestCode;
import com.bluejeans.api.rest.meetings.model.GrantRequestMeeting;
import com.bluejeans.api.rest.meetings.model.GrantRequestPassword;
import com.bluejeans.api.rest.meetings.model.GrantRequestRefresh;
import com.bluejeans.api.rest.meetings.model.GrantRequestRevoke;
import com.bluejeans.api.rest.meetings.model.InlineResponse200;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    
    /**
     * Get Authorization Code
     *
     * This is **not a true REST endpoint**. &lt;br /&gt; This URL should be used by a user&#39;s browser-client application to perform authorization. &lt;br /&gt;This API call takes the user to a BlueJeans page that allows the user to login and approve application access.&lt;br /&gt;Upon completion, the user will be redirected back to the client application with a code return value. &lt;br /&gt;**Note**&lt;ul&gt;&lt;li&gt;This API is activated through &lt;b&gt; https://bluejeans.com/oauth2/authorize &lt;/b&gt;&lt;/li&gt;&lt;li&gt;The API&#39;s return code has a very short valid period of &lt;b&gt;30 seconds&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Your application must call the &lt;b&gt;/oauth2/token?Code&lt;/b&gt; API as soon as possible to exchange the authorization code for an access token.&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizationCodeTest() throws ApiException {
        String clientId = null;
        String redirectUri = null;
        String state = null;
        String scope = null;
        String responseType = null;
        String appName = null;
        String appLogoUrl = null;
        api.getAuthorizationCode(clientId, redirectUri, state, scope, responseType, appName, appLogoUrl);

        // TODO: test validations
    }
    
    /**
     * Authentication via Client Grant Type
     *
     * This API is typically called from an application that needs to make API requests.  The values for the calling parameters, Client ID, and Secret, are provisioned within the BlueJeans Enterprise Administration console.  A BlueJeans administrator must generate these parameters and provide them to the customer/developer. &lt;br /&gt;**NOTE:** &lt;br /&gt;&amp;nbsp;&amp;nbsp;When calling this API, you must set the field, **grant_type** to equal \&quot;**client_credentials**\&quot; (string).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByClientTest() throws ApiException {
        GrantRequestClient grantRequestClient = null;
        GrantClient response = api.getTokenByClient(grantRequestClient);

        // TODO: test validations
    }
    
    /**
     * Authentication via Code Grant Type
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.  The user will be redirected here after successfully authorizing BlueJeans to grant the application access.  You must pass to this API the authorization code received from BlueJeans along with the applications OAuth client_id and secret keys.  Include as well a *success URL* to which the user will be redirected upon successful authentication. &lt;br /&gt;**NOTE:** &lt;br /&gt;&amp;nbsp;&amp;nbsp;When calling this API, you must set the field, **grant_type** to equal \&quot;**authorization_code**\&quot; (string).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByCodeTest() throws ApiException {
        GrantRequestCode grantRequestCode = null;
        GrantCode response = api.getTokenByCode(grantRequestCode);

        // TODO: test validations
    }
    
    /**
     * Authentication via Meeting Grant Type
     *
     * This API uses an OAuth-like grant/request method similar to the Password grant type.  The API returns an access token whose scope is limited to the meeting only. &lt;br /&gt;Call this API with the meeting&#39;s numeric ID, and the meeting passcode (if one exists). &lt;br /&gt;&amp;nbsp;&amp;nbsp;If you call the API with a Moderator passcode, moderator privileges are granted. &lt;br /&gt;&amp;nbsp;&amp;nbsp;If an Attendee access code is passed, the access token will grant attendee abilities.&lt;br /&gt;**NOTE:** &lt;br /&gt;&amp;nbsp;&amp;nbsp;When calling this API, you must set the field, **grant_type** to equal \&quot;**meeting_passcode**\&quot; (string).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByMeetingTest() throws ApiException {
        GrantRequestMeeting grantRequestMeeting = null;
        GrantMeeting response = api.getTokenByMeeting(grantRequestMeeting);

        // TODO: test validations
    }
    
    /**
     * Authentication via Password Grant Type
     *
     * This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password. &lt;br /&gt;**NOTE:** &lt;br /&gt;&amp;nbsp;&amp;nbsp;When calling this API, you must set the field, **grant_type** to equal \&quot;**password**\&quot; (string).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByPasswordTest() throws ApiException {
        GrantRequestPassword grantRequestPassword = null;
        GrantPassword response = api.getTokenByPassword(grantRequestPassword);

        // TODO: test validations
    }
    
    /**
     * Authentication via Refresh Grant Type
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.  It only works for access tokens obtained via /oauth2/token?Code endpoint. It allows an application to refresh an existing access token.  You must pass to this API your OAuth client and secret keys as well as the current access token being refreshed.  &lt;br /&gt;**NOTE:** &lt;br /&gt;&amp;nbsp;&amp;nbsp;When calling this API, you must set the field, **grant_type** to equal \&quot;**refresh_token**\&quot; (string).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByRefreshTest() throws ApiException {
        GrantRequestRefresh grantRequestRefresh = null;
        GrantRefresh response = api.getTokenByRefresh(grantRequestRefresh);

        // TODO: test validations
    }
    
    /**
     * Validate a Token
     *
     * This endpoint will determine if a token is valid or not.  If the token is valid, it returns the user ID for the owner of the token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenInfoTest() throws ApiException {
        String accessToken = null;
        InlineResponse200 response = api.getTokenInfo(accessToken);

        // TODO: test validations
    }
    
    /**
     * Revoke Access Token
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeAccessTokenTest() throws ApiException {
        GrantRequestRevoke grantRequestRevoke = null;
        String accessToken = null;
        api.revokeAccessToken(grantRequestRevoke, accessToken);

        // TODO: test validations
    }
    
}
