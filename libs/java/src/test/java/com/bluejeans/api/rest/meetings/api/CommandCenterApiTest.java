/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.api;

import com.bluejeans.api.rest.meetings.ApiException;
import com.bluejeans.api.rest.meetings.model.AnalyticsEndpointDistribution;
import com.bluejeans.api.rest.meetings.model.AnalyticsEndpointDistributionV2;
import com.bluejeans.api.rest.meetings.model.AnalyticsFeedbackComments;
import com.bluejeans.api.rest.meetings.model.AnalyticsFeedbackScores;
import com.bluejeans.api.rest.meetings.model.AnalyticsRoiData;
import com.bluejeans.api.rest.meetings.model.AnalyticsTopUsers;
import com.bluejeans.api.rest.meetings.model.AnalyticsUsage;
import com.bluejeans.api.rest.meetings.model.EndpointLocationSummary;
import com.bluejeans.api.rest.meetings.model.EnterpriseUsersActive;
import com.bluejeans.api.rest.meetings.model.Error;
import com.bluejeans.api.rest.meetings.model.MeetingExtendedIndigo;
import com.bluejeans.api.rest.meetings.model.MeetingIndigoList;
import com.bluejeans.api.rest.meetings.model.MeetingSummaryInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommandCenterApi
 */
@Ignore
public class CommandCenterApiTest {

    private final CommandCenterApi api = new CommandCenterApi();

    
    /**
     * Endpoint Distribution
     *
     * This endpoint retrieves endpoint connection type distribution by enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointDistributionTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        AnalyticsEndpointDistribution response = api.getEndpointDistribution(enterpriseId, filter);

        // TODO: test validations
    }
    
    /**
     * Endpoint Distribution
     *
     * This endpoint retrieves endpoint connection type distribution by enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointDistributionV2Test() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String appName = null;
        AnalyticsEndpointDistributionV2 response = api.getEndpointDistributionV2(enterpriseId, filter, appName);

        // TODO: test validations
    }
    
    /**
     * Overall Enterprise Summary
     *
     * This endpoint lists the summary usage statistics for the specified Enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnterpriseOverallSummaryTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String appName = null;
        MeetingSummaryInfo response = api.getEnterpriseOverallSummary(enterpriseId, filter, appName);

        // TODO: test validations
    }
    
    /**
     * Enterprise User Summary
     *
     * This endpoint lists the summary of active users statistics for the specified Enterprise.  Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnterpriseUsersActiveTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String clientTZ = null;
        Integer limit = null;
        String appName = null;
        EnterpriseUsersActive response = api.getEnterpriseUsersActive(enterpriseId, filter, clientTZ, limit, appName);

        // TODO: test validations
    }
    
    /**
     * Survey Feedback Comments
     *
     * This endpoint lists end of meeting survey comments by enterprise by time period. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeedbackCommentsTest() throws ApiException {
        Integer enterpriseId = null;
        String start = null;
        String end = null;
        AnalyticsFeedbackComments response = api.getFeedbackComments(enterpriseId, start, end);

        // TODO: test validations
    }
    
    /**
     * Survey Feedback Comments
     *
     * This endpoint lists end of meeting survey comments by enterprise by time period. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeedbackCommentsV2Test() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        Integer limit = null;
        String appName = null;
        AnalyticsFeedbackComments response = api.getFeedbackCommentsV2(enterpriseId, filter, limit, appName);

        // TODO: test validations
    }
    
    /**
     * Survey Feedback Scores
     *
     * This endpoint lists end of meeting survey scores by enterprise by time period. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeedbackCountTest() throws ApiException {
        Integer enterpriseId = null;
        String start = null;
        String end = null;
        AnalyticsFeedbackScores response = api.getFeedbackCount(enterpriseId, start, end);

        // TODO: test validations
    }
    
    /**
     * Survey Feedback Scores
     *
     * This endpoint lists end of meeting survey scores by enterprise by time period. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeedbackCountV2Test() throws ApiException {
        Integer enterpriseId = null;
        String start = null;
        String end = null;
        String appName = null;
        AnalyticsFeedbackScores response = api.getFeedbackCountV2(enterpriseId, start, end, appName);

        // TODO: test validations
    }
    
    /**
     * Geographic Demographics
     *
     * This endpoint lists the Geographic endpoint accesses.  Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeoMapTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        Integer offset = null;
        Integer limit = null;
        String appName = null;
        EndpointLocationSummary response = api.getGeoMap(enterpriseId, filter, offset, limit, appName);

        // TODO: test validations
    }
    
    /**
     * List Live Meeting Endpoints by Enterprise
     *
     * This endpoint lists endpoints for a given meeting in progress. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEndpointsLiveByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        String meetingUuid = null;
        String appName = null;
        MeetingExtendedIndigo response = api.getMeetingEndpointsLiveByEnterprise(enterpriseId, meetingUuid, appName);

        // TODO: test validations
    }
    
    /**
     * List Meeting Endpoints &amp; Stats by Enterprise
     *
     * This endpoint lists meeting endpoints for completed meetings by enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingPastByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        String meetingUuid = null;
        Boolean includeEndpoints = null;
        String appName = null;
        MeetingExtendedIndigo response = api.getMeetingPastByEnterprise(enterpriseId, meetingUuid, includeEndpoints, appName);

        // TODO: test validations
    }
    
    /**
     * List Meeting Endpoints &amp; Stats by User
     *
     * This endpoint lists meeting endpoints for completed meetings by user. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingPastByUserTest() throws ApiException {
        Integer userId = null;
        String meetingUuid = null;
        String appName = null;
        MeetingExtendedIndigo response = api.getMeetingPastByUser(userId, meetingUuid, appName);

        // TODO: test validations
    }
    
    /**
     * Meeting Usage Over Time
     *
     * This endpoint reports on meeting usage. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingUsageTest() throws ApiException {
        Integer enterpriseId = null;
        String clientTZ = null;
        String filter = null;
        AnalyticsUsage response = api.getMeetingUsage(enterpriseId, clientTZ, filter);

        // TODO: test validations
    }
    
    /**
     * Meeting Usage Over Time
     *
     * This endpoint reports on meeting usage.  Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingUsageV2Test() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String clientTZ = null;
        String appName = null;
        AnalyticsUsage response = api.getMeetingUsageV2(enterpriseId, filter, clientTZ, appName);

        // TODO: test validations
    }
    
    /**
     * Live Meetings Summary by Enterprise
     *
     * This endpoint lists meetings in progress by enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingsLiveByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        String appName = null;
        MeetingIndigoList response = api.getMeetingsLiveByEnterprise(enterpriseId, appName);

        // TODO: test validations
    }
    
    /**
     * List Past Meetings by Enterprise
     *
     * This endpoint lists completed meetings by enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingsPastByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        Boolean count = null;
        String appName = null;
        MeetingIndigoList response = api.getMeetingsPastByEnterprise(enterpriseId, offset, limit, filter, count, appName);

        // TODO: test validations
    }
    
    /**
     * List Past Meetings by User
     *
     * This endpoint lists completed meetings by user. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingsPastByUserTest() throws ApiException {
        Integer userId = null;
        String filter = null;
        String appName = null;
        MeetingIndigoList response = api.getMeetingsPastByUser(userId, filter, appName);

        // TODO: test validations
    }
    
    /**
     * ROI Data
     *
     * This endpoint lists return on investment (ROI) data for meetings. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoiRangesTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        AnalyticsRoiData response = api.getRoiRanges(enterpriseId, filter);

        // TODO: test validations
    }
    
    /**
     * ROI Data
     *
     * This endpoint lists return on investment (ROI) data for meetings. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoiRangesV2Test() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String appName = null;
        AnalyticsRoiData response = api.getRoiRangesV2(enterpriseId, filter, appName);

        // TODO: test validations
    }
    
    /**
     * Top Users
     *
     * This endpoint retrieves the top users by usage for an enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopUsersTest() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        AnalyticsTopUsers response = api.getTopUsers(enterpriseId, filter);

        // TODO: test validations
    }
    
    /**
     * Top Users
     *
     * This endpoint retrieves the top users by usage for an enterprise. Requires enterprise administrator access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopUsersV2Test() throws ApiException {
        Integer enterpriseId = null;
        String filter = null;
        String appName = null;
        AnalyticsTopUsers response = api.getTopUsersV2(enterpriseId, filter, appName);

        // TODO: test validations
    }
    
}
