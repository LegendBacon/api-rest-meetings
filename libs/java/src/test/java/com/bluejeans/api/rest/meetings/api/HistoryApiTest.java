/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.api;

import com.bluejeans.api.rest.meetings.ApiException;
import com.bluejeans.api.rest.meetings.model.Error;
import com.bluejeans.api.rest.meetings.model.MeetingHistory;
import com.bluejeans.api.rest.meetings.model.MeetingHistorySharing;
import com.bluejeans.api.rest.meetings.model.Recording;
import com.bluejeans.api.rest.meetings.model.RecordingSummary;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
@Ignore
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    
    /**
     * Get Meeting History by Enterprise
     *
     * This endpoint retrieves the meeting history for a specific instance of a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        String meetingGuid = null;
        MeetingHistory response = api.getHistoryByEnterprise(enterpriseId, meetingGuid);

        // TODO: test validations
    }
    
    /**
     * Get Meeting History by User
     *
     * This endpoint retrieves the meeting history for a specific instance of a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryByUserTest() throws ApiException {
        Integer userId = null;
        String meetingGuid = null;
        MeetingHistory response = api.getHistoryByUser(userId, meetingGuid);

        // TODO: test validations
    }
    
    /**
     * Get Meeting History Sharing by User
     *
     * This endpoint retrieves the meeting history sharing for a specific instance of a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistorySharingByUserTest() throws ApiException {
        Integer userId = null;
        String meetingGuid = null;
        MeetingHistorySharing response = api.getHistorySharingByUser(userId, meetingGuid);

        // TODO: test validations
    }
    
    /**
     * Get Recording
     *
     * This endpoint retrieves the details about a meeting recording.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingTest() throws ApiException {
        Integer userId = null;
        Integer recordingEntityId = null;
        Recording response = api.getRecording(userId, recordingEntityId);

        // TODO: test validations
    }
    
    /**
     * List History by Enterprise
     *
     * This endpoint retrieves a list of meeting histories by the given enterprise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHistoryByEnterpriseTest() throws ApiException {
        Integer enterpriseId = null;
        List<MeetingHistory> response = api.listHistoryByEnterprise(enterpriseId);

        // TODO: test validations
    }
    
    /**
     * List History by User
     *
     * This endpoint retrieves a list of meeting histories by the given user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHistoryByUserTest() throws ApiException {
        Integer userId = null;
        String meetingId = null;
        String startDate = null;
        String endDate = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String order = null;
        List<MeetingHistory> response = api.listHistoryByUser(userId, meetingId, startDate, endDate, pageSize, pageNumber, order);

        // TODO: test validations
    }
    
    /**
     * List Meeting Recordings
     *
     * This endpoint retrieves a list of meeting recordings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRecordingsTest() throws ApiException {
        Integer userId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String sortBy = null;
        String order = null;
        List<RecordingSummary> response = api.listRecordings(userId, pageSize, pageNumber, sortBy, order);

        // TODO: test validations
    }
    
}
