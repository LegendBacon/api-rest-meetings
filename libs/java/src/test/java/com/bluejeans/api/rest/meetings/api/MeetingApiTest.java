/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.api;

import com.bluejeans.api.rest.meetings.ApiException;
import com.bluejeans.api.rest.meetings.model.DialoutPstn;
import com.bluejeans.api.rest.meetings.model.Endpoint;
import com.bluejeans.api.rest.meetings.model.Endpoints;
import com.bluejeans.api.rest.meetings.model.Error;
import com.bluejeans.api.rest.meetings.model.Layout;
import com.bluejeans.api.rest.meetings.model.Meeting;
import com.bluejeans.api.rest.meetings.model.MeetingEmails;
import com.bluejeans.api.rest.meetings.model.MeetingState;
import com.bluejeans.api.rest.meetings.model.Numbers;
import com.bluejeans.api.rest.meetings.model.PairingCodePSTN;
import com.bluejeans.api.rest.meetings.model.PairingCodeSIP;
import com.bluejeans.api.rest.meetings.model.PairingCodeWebRTC;
import com.bluejeans.api.rest.meetings.model.PayloadDialout;
import com.bluejeans.api.rest.meetings.model.PayloadInvite;
import com.bluejeans.api.rest.meetings.model.PayloadMeetingState;
import com.bluejeans.api.rest.meetings.model.PayloadPairingCodePstn;
import com.bluejeans.api.rest.meetings.model.PayloadPairingCodeSIP;
import com.bluejeans.api.rest.meetings.model.PayloadPairingCodeWebRTC;
import com.bluejeans.api.rest.meetings.model.ScheduleMeetingMinComp;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeetingApi
 */
@Ignore
public class MeetingApiTest {

    private final MeetingApi api = new MeetingApi();

    
    /**
     * Cancel Meeting
     *
     * This endpoint deletes a scheuled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Boolean email = null;
        String cancellationMessage = null;
        api.cancelMeeting(userId, meetingId, email, cancellationMessage);

        // TODO: test validations
    }
    
    /**
     * Create Meeting
     *
     * This endpoint will create a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMeetingTest() throws ApiException {
        Integer userId = null;
        ScheduleMeetingMinComp meeting = null;
        Boolean email = null;
        Meeting response = api.createMeeting(userId, meeting, email);

        // TODO: test validations
    }
    
    /**
     * Dialout via PSTN
     *
     * Places a PSTN call to a user to join meeting. **Note:** call this API using a meeting access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dialoutPstnTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadDialout payloadDialout = null;
        DialoutPstn response = api.dialoutPstn(userId, numericMeetingId, payloadDialout);

        // TODO: test validations
    }
    
    /**
     * Generate Pairing Code (PSTN)
     *
     * This endpoint generates a PSTN pairing code that can be used to connect to a meeting via telephone. **Note:** call this API using a meeting access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePairingCodePstnTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadPairingCodePstn payloadPairingCodePstn = null;
        String role = null;
        PairingCodePSTN response = api.generatePairingCodePstn(userId, numericMeetingId, payloadPairingCodePstn, role);

        // TODO: test validations
    }
    
    /**
     * Generate Pairing Code (SIP)
     *
     * This endpoint generates a SIP pairing code that can be used to connect to a meeting. **Note:** call this API using a meeting access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePairingCodeSipTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadPairingCodeSIP payloadPairingCodeSIP = null;
        PairingCodeSIP response = api.generatePairingCodeSip(userId, numericMeetingId, payloadPairingCodeSIP);

        // TODO: test validations
    }
    
    /**
     * Generate Pairing Code (WebRTC)
     *
     * This endpoint generates a WebRTC pairing code that can be used to connect to a meeting. **Note:** call this API using a meeting access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePairingCodeWebRtcTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadPairingCodeWebRTC payloadPairingCodeWebRTC = null;
        String role = null;
        PairingCodeWebRTC response = api.generatePairingCodeWebRtc(userId, numericMeetingId, payloadPairingCodeWebRTC, role);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Layout
     *
     * This endpoint allows you to retrieve an individual endpoint’s current layout setting.  Can use either of a general or meeting access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointLayoutTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        String endpointGuid = null;
        Layout response = api.getEndpointLayout(userId, numericMeetingId, endpointGuid);

        // TODO: test validations
    }
    
    /**
     * Get Meeting
     *
     * This endpoint gets the settings for a user&#39;s meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Meeting response = api.getMeeting(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting Email
     *
     * This endpoint retrieves the email object for a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEmailsTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String type = null;
        String role = null;
        String action = null;
        MeetingEmails response = api.getMeetingEmails(userId, meetingId, type, role, action);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Information
     *
     * This endpoint allows you to retrieve information about an endpoint in the meeting.  Can use either of a general or meeting access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEndpointTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        String endpointGuid = null;
        Endpoint response = api.getMeetingEndpoint(userId, numericMeetingId, endpointGuid);

        // TODO: test validations
    }
    
    /**
     * List Meeting Endpoints
     *
     * This endpoint returns an array of all endpoints in the current meeting.  Can use either of a general or meeting access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEndpointsTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        Endpoints response = api.getMeetingEndpoints(userId, numericMeetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting Join Info
     *
     * This endpoint retrieves the join information for a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingNumbersTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Numbers response = api.getMeetingNumbers(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting State
     *
     * This endpoint’s purpose is to return whether the meeting is in progress or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingStateTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        MeetingState response = api.getMeetingState(userId, numericMeetingId);

        // TODO: test validations
    }
    
    /**
     * List Meetings
     *
     * This endpoint gets a list of the user&#39;s scheduled upcoming meetings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMeetingsTest() throws ApiException {
        Integer userId = null;
        String numericMeetingId = null;
        List<Meeting> response = api.listMeetings(userId, numericMeetingId);

        // TODO: test validations
    }
    
    /**
     * Send Email Invite
     *
     * This endpoint generates an email invite to the specified meeting. **Note:** call this API using a meeting access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMeetingInviteTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadInvite payloadInvite = null;
        api.sendMeetingInvite(userId, numericMeetingId, payloadInvite);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Layout
     *
     * This endpoint allows you to update an individual endpoint’s current layout setting. Requires Meeting access token with moderator privileges
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEndpointLayoutTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        String endpointGuid = null;
        Layout layout = null;
        Boolean isLeader = null;
        Boolean push = null;
        api.updateEndpointLayout(userId, numericMeetingId, endpointGuid, layout, isLeader, push);

        // TODO: test validations
    }
    
    /**
     * Update Meeting
     *
     * This endpoint changes the settings for a user&#39;s meeting. For example, use for rescheduling.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Meeting meeting = null;
        Meeting response = api.updateMeeting(userId, meetingId, meeting);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Video/Audio State
     *
     * This endpoint allows you to update an individual endpoint’s ability to send audio or video, and also allows removing an endpoint from the meeting. Requires Meeting access token with moderator privileges
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingEndpointTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        String endpointGuid = null;
        Boolean muteAudio = null;
        Boolean muteVideo = null;
        Boolean leaveMeeting = null;
        api.updateMeetingEndpoint(userId, numericMeetingId, endpointGuid, muteAudio, muteVideo, leaveMeeting);

        // TODO: test validations
    }
    
    /**
     * Update Meeting Endpoints State
     *
     * This endpoint’s purpose is to be able to modify the endpoints in a meeting. Requires Meeting access token with moderator privileges
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingEndpointsTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        Boolean mute = null;
        String media = null;
        api.updateMeetingEndpoints(userId, numericMeetingId, mute, media);

        // TODO: test validations
    }
    
    /**
     * Update Meeting State
     *
     * This endpoint’s purpose is to be able to modify a meeting. Actions include locking the meeting, or terminating the meeting.  This API requires a meeting access token with moderator privileges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingStateTest() throws ApiException {
        Integer userId = null;
        Integer numericMeetingId = null;
        PayloadMeetingState payloadMeetingState = null;
        Integer delay = null;
        Meeting response = api.updateMeetingState(userId, numericMeetingId, payloadMeetingState, delay);

        // TODO: test validations
    }
    
}
