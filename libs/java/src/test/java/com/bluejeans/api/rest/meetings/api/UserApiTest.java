/*
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.meetings.api;

import com.bluejeans.api.rest.meetings.ApiException;
import com.bluejeans.api.rest.meetings.model.Enterprise;
import com.bluejeans.api.rest.meetings.model.Error;
import java.io.File;
import com.bluejeans.api.rest.meetings.model.GrantedApplications;
import com.bluejeans.api.rest.meetings.model.PersonalMeetingRoom;
import com.bluejeans.api.rest.meetings.model.Room;
import com.bluejeans.api.rest.meetings.model.TagListComp;
import com.bluejeans.api.rest.meetings.model.UploadPhotoResponse;
import com.bluejeans.api.rest.meetings.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Set User Tags
     *
     * This endpoint modifies the list of tags associated with the specified user. &lt;b&gt;NOTE&lt;/b&gt; Adding a tag that is not defined in the user&#39;s Enterprise returns a 200 (success) status code.  It is recommended you validate the returned list of tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeUserTagsTest() throws ApiException {
        Integer userId = null;
        String action = null;
        String tag = null;
        TagListComp response = api.changeUserTags(userId, action, tag);

        // TODO: test validations
    }
    
    /**
     * Create User’s Default Meeting Settings
     *
     * This endpoint creates the user’s default meeting settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoomTest() throws ApiException {
        Integer userId = null;
        Room room = null;
        Room response = api.createRoom(userId, room);

        // TODO: test validations
    }
    
    /**
     * Get Enterprise Profile
     *
     * This endpoint retrieves the enterprise profile associated with the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnterpriseProfileTest() throws ApiException {
        Integer userId = null;
        Enterprise response = api.getEnterpriseProfile(userId);

        // TODO: test validations
    }
    
    /**
     * Get Granted Applications
     *
     * This endpoint retrieves the granted applications associated with the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGrantedApplicationsTest() throws ApiException {
        Integer userId = null;
        GrantedApplications response = api.getGrantedApplications(userId);

        // TODO: test validations
    }
    
    /**
     * Get User Feature Groups
     *
     * This endpoint retrieves the feature groups associated with the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        Integer userId = null;
        List<String> response = api.getGroups(userId);

        // TODO: test validations
    }
    
    /**
     * Get Personal Meeting
     *
     * This endpoint gets the settings for a user&#39;s personal meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonalMeetingTest() throws ApiException {
        Integer userId = null;
        PersonalMeetingRoom response = api.getPersonalMeeting(userId);

        // TODO: test validations
    }
    
    /**
     * Get User’s Default Meeting Settings
     *
     * This endpoint gets a user’s default meeting settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoomTest() throws ApiException {
        Integer userId = null;
        Room response = api.getRoom(userId);

        // TODO: test validations
    }
    
    /**
     * Get User Account Details
     *
     * This endpoint retrieves the basic account details for a given user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        User response = api.getUser(userId);

        // TODO: test validations
    }
    
    /**
     * List User Tags
     *
     * This endpoint retrieves all tags associated with the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTagsTest() throws ApiException {
        Integer userId = null;
        TagListComp response = api.getUserTags(userId);

        // TODO: test validations
    }
    
    /**
     * Remove Granted Application
     *
     * This endpoint revokes the granted application associated with the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeGrantedApplicationTest() throws ApiException {
        Integer userId = null;
        String clientId = null;
        api.revokeGrantedApplication(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * Set User Feature Groups
     *
     * This endpoint sets the feature groups associated with the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setGroupsTest() throws ApiException {
        Integer userId = null;
        String enable = null;
        String disable = null;
        api.setGroups(userId, enable, disable);

        // TODO: test validations
    }
    
    /**
     * Update Personal Meeting
     *
     * This endpoint changes the settings for a user&#39;s personal meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePeresonalMeetingTest() throws ApiException {
        Integer userId = null;
        PersonalMeetingRoom personalMeeting = null;
        PersonalMeetingRoom response = api.updatePeresonalMeeting(userId, personalMeeting);

        // TODO: test validations
    }
    
    /**
     * Update User’s Default Meeting Settings
     *
     * This endpoint allows updating a user’s default meeting settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoomTest() throws ApiException {
        Integer userId = null;
        Room room = null;
        Room response = api.updateRoom(userId, room);

        // TODO: test validations
    }
    
    /**
     * Update User Account Details
     *
     * This endpoint allows updating a user’s basic account details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        Integer userId = null;
        User user = null;
        User response = api.updateUser(userId, user);

        // TODO: test validations
    }
    
    /**
     * Update User Account Photograph
     *
     * This endpoint uploads a photograph to the user profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserProfilePictureTest() throws ApiException {
        Integer userId = null;
        File file = null;
        UploadPhotoResponse response = api.updateUserProfilePicture(userId, file);

        // TODO: test validations
    }
    
}
