/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/ApplicationList', 'model/ApplicationSecret', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Application'), require('../model/ApplicationList'), require('../model/ApplicationSecret'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansMeetingsRestApi) {
      root.BlueJeansMeetingsRestApi = {};
    }
    root.BlueJeansMeetingsRestApi.ApplicationApi = factory(root.BlueJeansMeetingsRestApi.ApiClient, root.BlueJeansMeetingsRestApi.Application, root.BlueJeansMeetingsRestApi.ApplicationList, root.BlueJeansMeetingsRestApi.ApplicationSecret, root.BlueJeansMeetingsRestApi.Error);
  }
}(this, function(ApiClient, Application, ApplicationList, ApplicationSecret, Error) {
  'use strict';

  /**
   * Application service.
   * @module api/ApplicationApi
   * @version 1.0.4402212019
   */

  /**
   * Constructs a new ApplicationApi. 
   * @alias module:api/ApplicationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createClientApplication operation.
     * @callback module:api/ApplicationApi~createClientApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Client Application
     * This endpoint creates a client application for use in 3-legged OAuth2 authorization.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {module:model/Application} application The information about the new client application.
     * @param {module:api/ApplicationApi~createClientApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.createClientApplication = function(userId, application, callback) {
      var postBody = application;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createClientApplication");
      }

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling createClientApplication");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/developer_applications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listClientApplications operation.
     * @callback module:api/ApplicationApi~listClientApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Client Applications
     * This endpoint lists all the client applications associated with the access_token.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {module:api/ApplicationApi~listClientApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationList}
     */
    this.listClientApplications = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listClientApplications");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationList;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/developer_applications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateClientApplicationSecret operation.
     * @callback module:api/ApplicationApi~regenerateClientApplicationSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate Client Application Secret
     * This endpoint forces the regeneration of a client application secret for use in 3-legged OAuth2 authorization.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} clientId The ID of the client application of interest. This value was given as a response during client application creation.
     * @param {module:api/ApplicationApi~regenerateClientApplicationSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationSecret}
     */
    this.regenerateClientApplicationSecret = function(userId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling regenerateClientApplicationSecret");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling regenerateClientApplicationSecret");
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationSecret;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/developer_applications/{client_id}/secret', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientApplication operation.
     * @callback module:api/ApplicationApi~updateClientApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Client Application
     * This endpoint updates a client application for use in 3-legged OAuth2 authorization.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} clientId The ID of the client application of interest. This value was given as a response during client application creation.
     * @param {module:model/Application} application The information about the new client application.
     * @param {module:api/ApplicationApi~updateClientApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.updateClientApplication = function(userId, clientId, application, callback) {
      var postBody = application;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateClientApplication");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClientApplication");
      }

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling updateClientApplication");
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/developer_applications/{client_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
