/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EnterpriseCreateUser', 'model/EnterpriseUserSearch', 'model/Error', 'model/TagListComp', 'model/UserId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EnterpriseCreateUser'), require('../model/EnterpriseUserSearch'), require('../model/Error'), require('../model/TagListComp'), require('../model/UserId'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansMeetingsRestApi) {
      root.BlueJeansMeetingsRestApi = {};
    }
    root.BlueJeansMeetingsRestApi.EnterpriseApi = factory(root.BlueJeansMeetingsRestApi.ApiClient, root.BlueJeansMeetingsRestApi.EnterpriseCreateUser, root.BlueJeansMeetingsRestApi.EnterpriseUserSearch, root.BlueJeansMeetingsRestApi.Error, root.BlueJeansMeetingsRestApi.TagListComp, root.BlueJeansMeetingsRestApi.UserId);
  }
}(this, function(ApiClient, EnterpriseCreateUser, EnterpriseUserSearch, Error, TagListComp, UserId) {
  'use strict';

  /**
   * Enterprise service.
   * @module api/EnterpriseApi
   * @version 1.0.4402212019
   */

  /**
   * Constructs a new EnterpriseApi. 
   * @alias module:api/EnterpriseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changeEnterpriseTags operation.
     * @callback module:api/EnterpriseApi~changeEnterpriseTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagListComp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Enterprise Tags
     * This endpoint modifies the list of profile tags associated with the specified enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:model/String} action Type of operation to be done
     * @param {String} tag The name of tag
     * @param {module:api/EnterpriseApi~changeEnterpriseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagListComp}
     */
    this.changeEnterpriseTags = function(enterpriseId, action, tag, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling changeEnterpriseTags");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling changeEnterpriseTags");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling changeEnterpriseTags");
      }


      var pathParams = {
        'enterpriseId': enterpriseId
      };
      var queryParams = {
        'action': action,
        'tag': tag,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TagListComp;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterpriseId}/tags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEnterpriseUser operation.
     * @callback module:api/EnterpriseApi~createEnterpriseUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * This endpoint creates a user profile within the specified enterprise.  It is the first of the 2-step process to create a BlueJeans user.  It should be followed by an API call to create the user&#39;s personal meeting room.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:model/EnterpriseCreateUser} enterpriseUser Basic Enterprise Account information
     * @param {Object} opts Optional parameters
     * @param {String} opts.billingCategory What general billing group does this profile belong? (default to ENTERPRISE)
     * @param {Boolean} opts.forcePasswordChange Create profile and force user to change password on next login
     * @param {Boolean} opts.isAdmin Create this account to have Administrative Privileges for the enterprise
     * @param {module:api/EnterpriseApi~createEnterpriseUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserId}
     */
    this.createEnterpriseUser = function(enterpriseId, enterpriseUser, opts, callback) {
      opts = opts || {};
      var postBody = enterpriseUser;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling createEnterpriseUser");
      }

      // verify the required parameter 'enterpriseUser' is set
      if (enterpriseUser === undefined || enterpriseUser === null) {
        throw new Error("Missing the required parameter 'enterpriseUser' when calling createEnterpriseUser");
      }


      var pathParams = {
        'enterpriseId': enterpriseId
      };
      var queryParams = {
        'billingCategory': opts['billingCategory'],
        'forcePasswordChange': opts['forcePasswordChange'],
        'isAdmin': opts['isAdmin'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserId;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterpriseId}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportUsers operation.
     * @callback module:api/EnterpriseApi~exportUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Enterprise Users
     * This endpoint exports existing users into a CSV file.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:api/EnterpriseApi~exportUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.exportUsers = function(enterpriseId, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling exportUsers");
      }


      var pathParams = {
        'enterprise_id': enterpriseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/users/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnterpriseTags operation.
     * @callback module:api/EnterpriseApi~getEnterpriseTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagListComp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Enterprise Tags
     * This endpoint retrieves all profile tags defined for the specified enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:api/EnterpriseApi~getEnterpriseTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagListComp}
     */
    this.getEnterpriseTags = function(enterpriseId, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getEnterpriseTags");
      }


      var pathParams = {
        'enterpriseId': enterpriseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TagListComp;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterpriseId}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUser operation.
     * @callback module:api/EnterpriseApi~removeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Enterprise User
     * This endpoint allows removing a user from an enterprise; it does not delete the user. Requires enterprise admin access level.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {module:api/EnterpriseApi~removeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeUser = function(enterpriseId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling removeUser");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUser");
      }


      var pathParams = {
        'enterprise_id': enterpriseId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/users/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/EnterpriseApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseUserSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for User(s)
     * This endpoint provides a search facility for the specified enterprise.  &lt;ul&gt;&lt;li&gt;If textSearch is provided, the results will be a partial string-match search of the given textSearch value.&lt;/li&gt;&lt;li&gt; Otherwise, the search will return an exact lookup by emailId.&lt;/li&gt;&lt;/ul&gt;
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields A comma-separated list one or more of these BlueJeans enteprise profile fields to include in the API responses- username, firstName, middleName, lastName, isEnterpriseAdmin, enterpriseJoinDate, email
     * @param {module:model/String} opts.order If specificed, order defines how the API sorts results- ascending or descending
     * @param {String} opts.sortBy Name of BlueJeans profile field by with API response data is sorted
     * @param {String} opts.textSearch If specified textSearch provides a string (partial or complete) by which to search the list of BlueJeans users
     * @param {String} opts.emailId If specified, emailId specifies performing a search for the user profile associated with this email address.  Wildcards are &lt;b&gt;not&lt;/b&gt; supported for the email address value.
     * @param {Number} opts.pageSize Sets number of items returned per page.
     * @param {Number} opts.pageNumber Selects which page of results to return (1-based value)
     * @param {module:api/EnterpriseApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseUserSearch}
     */
    this.searchUsers = function(enterpriseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling searchUsers");
      }


      var pathParams = {
        'enterpriseId': enterpriseId
      };
      var queryParams = {
        'fields': opts['fields'],
        'order': opts['order'],
        'sortBy': opts['sortBy'],
        'textSearch': opts['textSearch'],
        'emailId': opts['emailId'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EnterpriseUserSearch;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterpriseId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
