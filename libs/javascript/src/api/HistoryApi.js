/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/MeetingHistory', 'model/MeetingHistorySharing', 'model/Recording', 'model/RecordingSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/MeetingHistory'), require('../model/MeetingHistorySharing'), require('../model/Recording'), require('../model/RecordingSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansMeetingsRestApi) {
      root.BlueJeansMeetingsRestApi = {};
    }
    root.BlueJeansMeetingsRestApi.HistoryApi = factory(root.BlueJeansMeetingsRestApi.ApiClient, root.BlueJeansMeetingsRestApi.Error, root.BlueJeansMeetingsRestApi.MeetingHistory, root.BlueJeansMeetingsRestApi.MeetingHistorySharing, root.BlueJeansMeetingsRestApi.Recording, root.BlueJeansMeetingsRestApi.RecordingSummary);
  }
}(this, function(ApiClient, Error, MeetingHistory, MeetingHistorySharing, Recording, RecordingSummary) {
  'use strict';

  /**
   * History service.
   * @module api/HistoryApi
   * @version 1.0.4402212019
   */

  /**
   * Constructs a new HistoryApi. 
   * @alias module:api/HistoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getHistoryByEnterprise operation.
     * @callback module:api/HistoryApi~getHistoryByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Meeting History by Enterprise
     * This endpoint retrieves the meeting history for a specific instance of a meeting.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/HistoryApi~getHistoryByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingHistory}
     */
    this.getHistoryByEnterprise = function(enterpriseId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getHistoryByEnterprise");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling getHistoryByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingHistory;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/meeting_history/{meeting_guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistoryByUser operation.
     * @callback module:api/HistoryApi~getHistoryByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Meeting History by User
     * This endpoint retrieves the meeting history for a specific instance of a meeting.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/HistoryApi~getHistoryByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingHistory}
     */
    this.getHistoryByUser = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getHistoryByUser");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling getHistoryByUser");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingHistory;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistorySharingByUser operation.
     * @callback module:api/HistoryApi~getHistorySharingByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingHistorySharing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Meeting History Sharing by User
     * This endpoint retrieves the meeting history sharing for a specific instance of a meeting.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/HistoryApi~getHistorySharingByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingHistorySharing}
     */
    this.getHistorySharingByUser = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getHistorySharingByUser");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling getHistorySharingByUser");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingHistorySharing;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_guid}/sharing', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecording operation.
     * @callback module:api/HistoryApi~getRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recording
     * This endpoint retrieves the details about a meeting recording.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} recordingEntityId The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.
     * @param {module:api/HistoryApi~getRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recording}
     */
    this.getRecording = function(userId, recordingEntityId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRecording");
      }

      // verify the required parameter 'recordingEntityId' is set
      if (recordingEntityId === undefined || recordingEntityId === null) {
        throw new Error("Missing the required parameter 'recordingEntityId' when calling getRecording");
      }


      var pathParams = {
        'user_id': userId,
        'recording_entity_id': recordingEntityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Recording;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/recordings/{recording_entity_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listHistoryByEnterprise operation.
     * @callback module:api/HistoryApi~listHistoryByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List History by Enterprise
     * This endpoint retrieves a list of meeting histories by the given enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:api/HistoryApi~listHistoryByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingHistory>}
     */
    this.listHistoryByEnterprise = function(enterpriseId, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling listHistoryByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MeetingHistory];

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/meeting_history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listHistoryByUser operation.
     * @callback module:api/HistoryApi~listHistoryByUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MeetingHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List History by User
     * This endpoint retrieves a list of meeting histories by the given user.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.meetingId Return only meetings with the specified meeting numeric ID.
     * @param {String} opts.startDate Return meetings starting from the specified date. MM/DD/YYYY
     * @param {String} opts.endDate Return meetings up until the specified date. MM/DD/YYYY
     * @param {Number} opts.pageSize Sets number of items returned per page.
     * @param {Number} opts.pageNumber Selects which page of results to return.
     * @param {String} opts.order Puts results in ascending or descending order. asc/desc
     * @param {module:api/HistoryApi~listHistoryByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MeetingHistory>}
     */
    this.listHistoryByUser = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listHistoryByUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'meetingId': opts['meetingId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MeetingHistory];

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecordings operation.
     * @callback module:api/HistoryApi~listRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordingSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Meeting Recordings
     * This endpoint retrieves a list of meeting recordings.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Sets number of items returned per page. (default to 10)
     * @param {Number} opts.pageNumber Selects which page of results to return. (default to 1)
     * @param {String} opts.sortBy Selects which page of results to return. (default to start_time)
     * @param {module:model/String} opts.order Puts results in ascending or descending order. (default to desc)
     * @param {module:api/HistoryApi~listRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordingSummary>}
     */
    this.listRecordings = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listRecordings");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'sortBy': opts['sortBy'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RecordingSummary];

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/recordings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
