/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Content', 'model/Error', 'model/Meeting', 'model/MeetingSharing', 'model/ModifySharing', 'model/RecordingHistoryList', 'model/RecordingMovedComp', 'model/SetSharing'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Content'), require('../model/Error'), require('../model/Meeting'), require('../model/MeetingSharing'), require('../model/ModifySharing'), require('../model/RecordingHistoryList'), require('../model/RecordingMovedComp'), require('../model/SetSharing'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansMeetingsRestApi) {
      root.BlueJeansMeetingsRestApi = {};
    }
    root.BlueJeansMeetingsRestApi.RecordingApi = factory(root.BlueJeansMeetingsRestApi.ApiClient, root.BlueJeansMeetingsRestApi.Content, root.BlueJeansMeetingsRestApi.Error, root.BlueJeansMeetingsRestApi.Meeting, root.BlueJeansMeetingsRestApi.MeetingSharing, root.BlueJeansMeetingsRestApi.ModifySharing, root.BlueJeansMeetingsRestApi.RecordingHistoryList, root.BlueJeansMeetingsRestApi.RecordingMovedComp, root.BlueJeansMeetingsRestApi.SetSharing);
  }
}(this, function(ApiClient, Content, Error, Meeting, MeetingSharing, ModifySharing, RecordingHistoryList, RecordingMovedComp, SetSharing) {
  'use strict';

  /**
   * Recording service.
   * @module api/RecordingApi
   * @version 1.0.4402212019
   */

  /**
   * Constructs a new RecordingApi. 
   * @alias module:api/RecordingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createShareRecordings operation.
     * @callback module:api/RecordingApi~createShareRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingSharing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Recording Sharing
     * This endpoint creates a sharing authorization record for the specified meeting recording.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes.
     * @param {module:model/SetSharing} setSharing 
     * @param {module:api/RecordingApi~createShareRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingSharing}
     */
    this.createShareRecordings = function(userId, meetingGuid, setSharing, callback) {
      var postBody = setSharing;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createShareRecordings");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling createShareRecordings");
      }

      // verify the required parameter 'setSharing' is set
      if (setSharing === undefined || setSharing === null) {
        throw new Error("Missing the required parameter 'setSharing' when calling createShareRecordings");
      }


      var pathParams = {
        'user_id': userId,
        'meetingGuid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingSharing;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllRecordingsByMeetingGuid operation.
     * @callback module:api/RecordingApi~deleteAllRecordingsByMeetingGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Recordings for a Specified Meeting GUID
     * This endpoint stops recording for a meeting in progress. 
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/RecordingApi~deleteAllRecordingsByMeetingGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.deleteAllRecordingsByMeetingGuid = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAllRecordingsByMeetingGuid");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling deleteAllRecordingsByMeetingGuid");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_guid}/recordings/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecordingChapter operation.
     * @callback module:api/RecordingApi~deleteRecordingChapterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Specified Recording Chapter
     * This endpoint stops recording for a meeting in progress.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {Number} recordingChapterId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:api/RecordingApi~deleteRecordingChapterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.deleteRecordingChapter = function(userId, meetingId, recordingChapterId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteRecordingChapter");
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling deleteRecordingChapter");
      }

      // verify the required parameter 'recordingChapterId' is set
      if (recordingChapterId === undefined || recordingChapterId === null) {
        throw new Error("Missing the required parameter 'recordingChapterId' when calling deleteRecordingChapter");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId,
        'recording_chapter_id': recordingChapterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_id}/recordings/{recording_chapter_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteShareRecordings operation.
     * @callback module:api/RecordingApi~deleteShareRecordingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Recording Sharing
     * This endpoint deletes the sharing authorization associated with a meeting recording.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes.
     * @param {module:api/RecordingApi~deleteShareRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteShareRecordings = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteShareRecordings");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling deleteShareRecordings");
      }


      var pathParams = {
        'user_id': userId,
        'meetingGuid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingRecordings operation.
     * @callback module:api/RecordingApi~getMeetingRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordingHistoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Recordings for a Specified Meeting ID
     * This endpoint lists the recordings for a meeting.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/RecordingApi~getMeetingRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordingHistoryList}
     */
    this.getMeetingRecordings = function(userId, meetingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getMeetingRecordings");
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling getMeetingRecordings");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
        'meetingGuid': opts['meetingGuid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordingHistoryList;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_id}/recordings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingContent operation.
     * @callback module:api/RecordingApi~getRecordingContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recording Download Link
     * This endpoint retrieves properties about the recording chapter.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} contentId The recording properties fetched with other API endpoints will return a compositeContentId or a contentId. That value can be used for this argument.
     * @param {Boolean} isDownloadable Set to true.
     * @param {module:api/RecordingApi~getRecordingContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Content}
     */
    this.getRecordingContent = function(userId, contentId, isDownloadable, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRecordingContent");
      }

      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getRecordingContent");
      }

      // verify the required parameter 'isDownloadable' is set
      if (isDownloadable === undefined || isDownloadable === null) {
        throw new Error("Missing the required parameter 'isDownloadable' when calling getRecordingContent");
      }


      var pathParams = {
        'user_id': userId,
        'content_id': contentId
      };
      var queryParams = {
        'isDownloadable': isDownloadable,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Content;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/cms/{content_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShareRecordings operation.
     * @callback module:api/RecordingApi~getShareRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingSharing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Recording Sharing
     * This endpoint retrieves a the sharing authorization information for a meeting&#39;s recording. If no sharing has been authorized for the meeting, this API returns a 404 error.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes.
     * @param {module:api/RecordingApi~getShareRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingSharing}
     */
    this.getShareRecordings = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getShareRecordings");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling getShareRecordings");
      }


      var pathParams = {
        'user_id': userId,
        'meetingGuid': meetingGuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingSharing;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyShareRecordings operation.
     * @callback module:api/RecordingApi~modifyShareRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingSharing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Recording Sharing
     * This endpoint modifieds the sharing authorization attributes for a meeting recording.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes.
     * @param {String} sharingId The identifier of the sharing authorization record.  This value can be obtained from the \&quot;Id\&quot; in the response to the API GET /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing
     * @param {module:model/ModifySharing} modifySharing 
     * @param {module:api/RecordingApi~modifyShareRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingSharing}
     */
    this.modifyShareRecordings = function(userId, meetingGuid, sharingId, modifySharing, callback) {
      var postBody = modifySharing;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling modifyShareRecordings");
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid === undefined || meetingGuid === null) {
        throw new Error("Missing the required parameter 'meetingGuid' when calling modifyShareRecordings");
      }

      // verify the required parameter 'sharingId' is set
      if (sharingId === undefined || sharingId === null) {
        throw new Error("Missing the required parameter 'sharingId' when calling modifyShareRecordings");
      }

      // verify the required parameter 'modifySharing' is set
      if (modifySharing === undefined || modifySharing === null) {
        throw new Error("Missing the required parameter 'modifySharing' when calling modifyShareRecordings");
      }


      var pathParams = {
        'user_id': userId,
        'meetingGuid': meetingGuid,
        'sharingId': sharingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingSharing;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/{sharingId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveRecordingOwner operation.
     * @callback module:api/RecordingApi~moveRecordingOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordingMovedComp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move Recording Ownership
     * This endpoint changes the ownership for all recordings from the original owner account and moves them to the new owner account.
     * @param {Number} userId The ID of the user requesting the move.  This user must have Enterprise Administrator privileges.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} originalOwner The ID of the recording&#39;s current owner.
     * @param {Number} newOwner The ID of the intended owner for the recording.
     * @param {module:api/RecordingApi~moveRecordingOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordingMovedComp}
     */
    this.moveRecordingOwner = function(userId, originalOwner, newOwner, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling moveRecordingOwner");
      }

      // verify the required parameter 'originalOwner' is set
      if (originalOwner === undefined || originalOwner === null) {
        throw new Error("Missing the required parameter 'originalOwner' when calling moveRecordingOwner");
      }

      // verify the required parameter 'newOwner' is set
      if (newOwner === undefined || newOwner === null) {
        throw new Error("Missing the required parameter 'newOwner' when calling moveRecordingOwner");
      }


      var pathParams = {
        'user_id': userId,
        'originalOwner': originalOwner,
        'newOwner': newOwner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordingMovedComp;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/move_recordings/from_user/{originalOwner}/to_user/{newOwner}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startRecording operation.
     * @callback module:api/RecordingApi~startRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Recording
     * This endpoint starts recording for a meeting in progress. Note that this is a POST operation. Stop is a PUT operation.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:model/String} action Always set to \&quot;start\&quot; in order to start recording.
     * @param {module:api/RecordingApi~startRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startRecording = function(userId, meetingId, action, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling startRecording");
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling startRecording");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling startRecording");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
        'action': action,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRecording operation.
     * @callback module:api/RecordingApi~stopRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop Recording
     * This endpoint stops recording for a meeting in progress. Note that this is a PUT operation. Start is a POST operation.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Number} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:model/String} action Always set to \&quot;stop\&quot; in order to stop recording.
     * @param {module:api/RecordingApi~stopRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stopRecording = function(userId, meetingId, action, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stopRecording");
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId === undefined || meetingId === null) {
        throw new Error("Missing the required parameter 'meetingId' when calling stopRecording");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling stopRecording");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
        'action': action,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
