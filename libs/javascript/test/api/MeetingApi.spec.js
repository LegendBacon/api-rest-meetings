/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlueJeansMeetingsRestApi);
  }
}(this, function(expect, BlueJeansMeetingsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlueJeansMeetingsRestApi.MeetingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingApi', function() {
    describe('cancelMeeting', function() {
      it('should call cancelMeeting successfully', function(done) {
        //uncomment below and update the code to test cancelMeeting
        //instance.cancelMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeeting', function() {
      it('should call createMeeting successfully', function(done) {
        //uncomment below and update the code to test createMeeting
        //instance.createMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dialoutPstn', function() {
      it('should call dialoutPstn successfully', function(done) {
        //uncomment below and update the code to test dialoutPstn
        //instance.dialoutPstn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePairingCodePstn', function() {
      it('should call generatePairingCodePstn successfully', function(done) {
        //uncomment below and update the code to test generatePairingCodePstn
        //instance.generatePairingCodePstn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePairingCodeSip', function() {
      it('should call generatePairingCodeSip successfully', function(done) {
        //uncomment below and update the code to test generatePairingCodeSip
        //instance.generatePairingCodeSip(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePairingCodeWebRtc', function() {
      it('should call generatePairingCodeWebRtc successfully', function(done) {
        //uncomment below and update the code to test generatePairingCodeWebRtc
        //instance.generatePairingCodeWebRtc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointLayout', function() {
      it('should call getEndpointLayout successfully', function(done) {
        //uncomment below and update the code to test getEndpointLayout
        //instance.getEndpointLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeeting', function() {
      it('should call getMeeting successfully', function(done) {
        //uncomment below and update the code to test getMeeting
        //instance.getMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEmails', function() {
      it('should call getMeetingEmails successfully', function(done) {
        //uncomment below and update the code to test getMeetingEmails
        //instance.getMeetingEmails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEndpoint', function() {
      it('should call getMeetingEndpoint successfully', function(done) {
        //uncomment below and update the code to test getMeetingEndpoint
        //instance.getMeetingEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEndpoints', function() {
      it('should call getMeetingEndpoints successfully', function(done) {
        //uncomment below and update the code to test getMeetingEndpoints
        //instance.getMeetingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingNumbers', function() {
      it('should call getMeetingNumbers successfully', function(done) {
        //uncomment below and update the code to test getMeetingNumbers
        //instance.getMeetingNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingState', function() {
      it('should call getMeetingState successfully', function(done) {
        //uncomment below and update the code to test getMeetingState
        //instance.getMeetingState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeetings', function() {
      it('should call listMeetings successfully', function(done) {
        //uncomment below and update the code to test listMeetings
        //instance.listMeetings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMeetingInvite', function() {
      it('should call sendMeetingInvite successfully', function(done) {
        //uncomment below and update the code to test sendMeetingInvite
        //instance.sendMeetingInvite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpointLayout', function() {
      it('should call updateEndpointLayout successfully', function(done) {
        //uncomment below and update the code to test updateEndpointLayout
        //instance.updateEndpointLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeeting', function() {
      it('should call updateMeeting successfully', function(done) {
        //uncomment below and update the code to test updateMeeting
        //instance.updateMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEndpoint', function() {
      it('should call updateMeetingEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEndpoint
        //instance.updateMeetingEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEndpoints', function() {
      it('should call updateMeetingEndpoints successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEndpoints
        //instance.updateMeetingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingState', function() {
      it('should call updateMeetingState successfully', function(done) {
        //uncomment below and update the code to test updateMeetingState
        //instance.updateMeetingState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
