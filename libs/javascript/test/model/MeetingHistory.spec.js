/**
 * BlueJeans Meetings REST API
 *  ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr> 
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlueJeansMeetingsRestApi);
  }
}(this, function(expect, BlueJeansMeetingsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlueJeansMeetingsRestApi.MeetingHistory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingHistory', function() {
    it('should create an instance of MeetingHistory', function() {
      // uncomment below and update the code to test MeetingHistory
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be.a(BlueJeansMeetingsRestApi.MeetingHistory);
    });

    it('should have the property meetingGuid (base name: "meetingGuid")', function() {
      // uncomment below and update the code to test the property meetingGuid
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingNumericId (base name: "meetingNumericId")', function() {
      // uncomment below and update the code to test the property meetingNumericId
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property leaderInfo (base name: "leaderInfo")', function() {
      // uncomment below and update the code to test the property leaderInfo
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingDuration (base name: "meetingDuration")', function() {
      // uncomment below and update the code to test the property meetingDuration
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property maxParticipantCount (base name: "maxParticipantCount")', function() {
      // uncomment below and update the code to test the property maxParticipantCount
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property totalParticipantMinutes (base name: "totalParticipantMinutes")', function() {
      // uncomment below and update the code to test the property totalParticipantMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property maxParticipantMinutes (base name: "maxParticipantMinutes")', function() {
      // uncomment below and update the code to test the property maxParticipantMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property extraParticipantMinutes (base name: "extraParticipantMinutes")', function() {
      // uncomment below and update the code to test the property extraParticipantMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property isdnEndpoints (base name: "isdnEndpoints")', function() {
      // uncomment below and update the code to test the property isdnEndpoints
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property totalDialoutMinutes (base name: "totalDialoutMinutes")', function() {
      // uncomment below and update the code to test the property totalDialoutMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property totalTollFreeMinutes (base name: "totalTollFreeMinutes")', function() {
      // uncomment below and update the code to test the property totalTollFreeMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property callDIDMinutes (base name: "callDIDMinutes")', function() {
      // uncomment below and update the code to test the property callDIDMinutes
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingStatus (base name: "meetingStatus")', function() {
      // uncomment below and update the code to test the property meetingStatus
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property meetingThumbnail (base name: "meetingThumbnail")', function() {
      // uncomment below and update the code to test the property meetingThumbnail
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property startTimeZone (base name: "startTimeZone")', function() {
      // uncomment below and update the code to test the property startTimeZone
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property processingStatus (base name: "processingStatus")', function() {
      // uncomment below and update the code to test the property processingStatus
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property concurrentCalls (base name: "concurrentCalls")', function() {
      // uncomment below and update the code to test the property concurrentCalls
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property uploadStatus (base name: "uploadStatus")', function() {
      // uncomment below and update the code to test the property uploadStatus
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property pstnonly (base name: "pstnonly")', function() {
      // uncomment below and update the code to test the property pstnonly
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

    it('should have the property participantList (base name: "participantList")', function() {
      // uncomment below and update the code to test the property participantList
      //var instance = new BlueJeansMeetingsRestApi.MeetingHistory();
      //expect(instance).to.be();
    });

  });

}));
