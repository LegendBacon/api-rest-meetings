<?php
/**
 * ContentContentProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * ContentContentProperties Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentContentProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Content_contentProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duration' => 'int',
        'thumbnail' => 'string',
        'thumbnail_sprite' => 'string',
        'hds_url' => 'string',
        'thumbnail_count' => 'int',
        'thumbnail_width' => 'int',
        'thumbnail_height' => 'int',
        'thumbnail_interval' => 'int',
        'hls_url' => 'string',
        'levels' => '\BlueJeansMeetingsRestApi\Model\ContentContentPropertiesLevels[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duration' => 'int64',
        'thumbnail' => null,
        'thumbnail_sprite' => null,
        'hds_url' => null,
        'thumbnail_count' => null,
        'thumbnail_width' => null,
        'thumbnail_height' => null,
        'thumbnail_interval' => null,
        'hls_url' => null,
        'levels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration' => 'duration',
        'thumbnail' => 'thumbnail',
        'thumbnail_sprite' => 'thumbnailSprite',
        'hds_url' => 'hdsUrl',
        'thumbnail_count' => 'thumbnailCount',
        'thumbnail_width' => 'thumbnailWidth',
        'thumbnail_height' => 'thumbnailHeight',
        'thumbnail_interval' => 'thumbnailInterval',
        'hls_url' => 'hlsUrl',
        'levels' => 'levels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration' => 'setDuration',
        'thumbnail' => 'setThumbnail',
        'thumbnail_sprite' => 'setThumbnailSprite',
        'hds_url' => 'setHdsUrl',
        'thumbnail_count' => 'setThumbnailCount',
        'thumbnail_width' => 'setThumbnailWidth',
        'thumbnail_height' => 'setThumbnailHeight',
        'thumbnail_interval' => 'setThumbnailInterval',
        'hls_url' => 'setHlsUrl',
        'levels' => 'setLevels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration' => 'getDuration',
        'thumbnail' => 'getThumbnail',
        'thumbnail_sprite' => 'getThumbnailSprite',
        'hds_url' => 'getHdsUrl',
        'thumbnail_count' => 'getThumbnailCount',
        'thumbnail_width' => 'getThumbnailWidth',
        'thumbnail_height' => 'getThumbnailHeight',
        'thumbnail_interval' => 'getThumbnailInterval',
        'hls_url' => 'getHlsUrl',
        'levels' => 'getLevels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['thumbnail_sprite'] = isset($data['thumbnail_sprite']) ? $data['thumbnail_sprite'] : null;
        $this->container['hds_url'] = isset($data['hds_url']) ? $data['hds_url'] : null;
        $this->container['thumbnail_count'] = isset($data['thumbnail_count']) ? $data['thumbnail_count'] : null;
        $this->container['thumbnail_width'] = isset($data['thumbnail_width']) ? $data['thumbnail_width'] : null;
        $this->container['thumbnail_height'] = isset($data['thumbnail_height']) ? $data['thumbnail_height'] : null;
        $this->container['thumbnail_interval'] = isset($data['thumbnail_interval']) ? $data['thumbnail_interval'] : null;
        $this->container['hls_url'] = isset($data['hls_url']) ? $data['hls_url'] : null;
        $this->container['levels'] = isset($data['levels']) ? $data['levels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string $thumbnail thumbnail
     *
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets thumbnail_sprite
     *
     * @return string
     */
    public function getThumbnailSprite()
    {
        return $this->container['thumbnail_sprite'];
    }

    /**
     * Sets thumbnail_sprite
     *
     * @param string $thumbnail_sprite thumbnail_sprite
     *
     * @return $this
     */
    public function setThumbnailSprite($thumbnail_sprite)
    {
        $this->container['thumbnail_sprite'] = $thumbnail_sprite;

        return $this;
    }

    /**
     * Gets hds_url
     *
     * @return string
     */
    public function getHdsUrl()
    {
        return $this->container['hds_url'];
    }

    /**
     * Sets hds_url
     *
     * @param string $hds_url hds_url
     *
     * @return $this
     */
    public function setHdsUrl($hds_url)
    {
        $this->container['hds_url'] = $hds_url;

        return $this;
    }

    /**
     * Gets thumbnail_count
     *
     * @return int
     */
    public function getThumbnailCount()
    {
        return $this->container['thumbnail_count'];
    }

    /**
     * Sets thumbnail_count
     *
     * @param int $thumbnail_count thumbnail_count
     *
     * @return $this
     */
    public function setThumbnailCount($thumbnail_count)
    {
        $this->container['thumbnail_count'] = $thumbnail_count;

        return $this;
    }

    /**
     * Gets thumbnail_width
     *
     * @return int
     */
    public function getThumbnailWidth()
    {
        return $this->container['thumbnail_width'];
    }

    /**
     * Sets thumbnail_width
     *
     * @param int $thumbnail_width thumbnail_width
     *
     * @return $this
     */
    public function setThumbnailWidth($thumbnail_width)
    {
        $this->container['thumbnail_width'] = $thumbnail_width;

        return $this;
    }

    /**
     * Gets thumbnail_height
     *
     * @return int
     */
    public function getThumbnailHeight()
    {
        return $this->container['thumbnail_height'];
    }

    /**
     * Sets thumbnail_height
     *
     * @param int $thumbnail_height thumbnail_height
     *
     * @return $this
     */
    public function setThumbnailHeight($thumbnail_height)
    {
        $this->container['thumbnail_height'] = $thumbnail_height;

        return $this;
    }

    /**
     * Gets thumbnail_interval
     *
     * @return int
     */
    public function getThumbnailInterval()
    {
        return $this->container['thumbnail_interval'];
    }

    /**
     * Sets thumbnail_interval
     *
     * @param int $thumbnail_interval thumbnail_interval
     *
     * @return $this
     */
    public function setThumbnailInterval($thumbnail_interval)
    {
        $this->container['thumbnail_interval'] = $thumbnail_interval;

        return $this;
    }

    /**
     * Gets hls_url
     *
     * @return string
     */
    public function getHlsUrl()
    {
        return $this->container['hls_url'];
    }

    /**
     * Sets hls_url
     *
     * @param string $hls_url hls_url
     *
     * @return $this
     */
    public function setHlsUrl($hls_url)
    {
        $this->container['hls_url'] = $hls_url;

        return $this;
    }

    /**
     * Gets levels
     *
     * @return \BlueJeansMeetingsRestApi\Model\ContentContentPropertiesLevels[]
     */
    public function getLevels()
    {
        return $this->container['levels'];
    }

    /**
     * Sets levels
     *
     * @param \BlueJeansMeetingsRestApi\Model\ContentContentPropertiesLevels[] $levels levels
     *
     * @return $this
     */
    public function setLevels($levels)
    {
        $this->container['levels'] = $levels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


