<?php
/**
 * MeetingExtendedIndigo
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * MeetingExtendedIndigo Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeetingExtendedIndigo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MeetingExtendedIndigo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meeting_id' => 'string',
        'meeting_uuid' => 'string',
        'user_name' => 'string',
        'email' => 'string',
        'encryption_type' => 'int',
        'title' => 'string',
        'user_full_name' => 'string',
        'phone_number' => 'string',
        'user_features' => 'string',
        'scheduled_from' => 'string',
        'invitee_count' => 'int',
        'personal' => 'bool',
        'mute_on_entry' => 'bool',
        'auto_record' => 'bool',
        'enterprise_name' => 'string',
        'moderator_less' => 'bool',
        'start_time' => 'int',
        'end_time' => 'int',
        'total_call_seconds' => 'int',
        'create_time' => 'int',
        'endpoints_count' => 'int',
        'concurrent_endpoints' => 'int',
        'live_visible_endpoints_count' => 'int',
        'qualaroo_rating' => 'int',
        'qualaroo_count' => 'int',
        'meeting_recording' => 'bool',
        'video_share' => 'bool',
        'content_share' => 'bool',
        'live_recording' => 'bool',
        'live_video_share' => 'bool',
        'live_content_share' => 'bool',
        'large_meeting' => 'bool',
        'roi_distance' => 'float',
        'mpls' => 'bool',
        'id' => 'string',
        'endpoints' => '\BlueJeansMeetingsRestApi\Model\EndpointIndigo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meeting_id' => null,
        'meeting_uuid' => null,
        'user_name' => null,
        'email' => null,
        'encryption_type' => null,
        'title' => null,
        'user_full_name' => null,
        'phone_number' => null,
        'user_features' => null,
        'scheduled_from' => null,
        'invitee_count' => null,
        'personal' => null,
        'mute_on_entry' => null,
        'auto_record' => null,
        'enterprise_name' => null,
        'moderator_less' => null,
        'start_time' => 'int64',
        'end_time' => 'int64',
        'total_call_seconds' => null,
        'create_time' => 'int64',
        'endpoints_count' => null,
        'concurrent_endpoints' => null,
        'live_visible_endpoints_count' => null,
        'qualaroo_rating' => null,
        'qualaroo_count' => null,
        'meeting_recording' => null,
        'video_share' => null,
        'content_share' => null,
        'live_recording' => null,
        'live_video_share' => null,
        'live_content_share' => null,
        'large_meeting' => null,
        'roi_distance' => 'float',
        'mpls' => null,
        'id' => null,
        'endpoints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meeting_id' => 'meetingId',
        'meeting_uuid' => 'meetingUUID',
        'user_name' => 'userName',
        'email' => 'email',
        'encryption_type' => 'encryptionType',
        'title' => 'title',
        'user_full_name' => 'userFullName',
        'phone_number' => 'phoneNumber',
        'user_features' => 'userFeatures',
        'scheduled_from' => 'scheduledFrom',
        'invitee_count' => 'inviteeCount',
        'personal' => 'personal',
        'mute_on_entry' => 'muteOnEntry',
        'auto_record' => 'autoRecord',
        'enterprise_name' => 'enterpriseName',
        'moderator_less' => 'moderatorLess',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'total_call_seconds' => 'totalCallSeconds',
        'create_time' => 'createTime',
        'endpoints_count' => 'endpointsCount',
        'concurrent_endpoints' => 'concurrentEndpoints',
        'live_visible_endpoints_count' => 'liveVisibleEndpointsCount',
        'qualaroo_rating' => 'qualarooRating',
        'qualaroo_count' => 'qualarooCount',
        'meeting_recording' => 'meetingRecording',
        'video_share' => 'videoShare',
        'content_share' => 'contentShare',
        'live_recording' => 'liveRecording',
        'live_video_share' => 'liveVideoShare',
        'live_content_share' => 'liveContentShare',
        'large_meeting' => 'largeMeeting',
        'roi_distance' => 'roiDistance',
        'mpls' => 'mpls',
        'id' => 'id',
        'endpoints' => 'endpoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meeting_id' => 'setMeetingId',
        'meeting_uuid' => 'setMeetingUuid',
        'user_name' => 'setUserName',
        'email' => 'setEmail',
        'encryption_type' => 'setEncryptionType',
        'title' => 'setTitle',
        'user_full_name' => 'setUserFullName',
        'phone_number' => 'setPhoneNumber',
        'user_features' => 'setUserFeatures',
        'scheduled_from' => 'setScheduledFrom',
        'invitee_count' => 'setInviteeCount',
        'personal' => 'setPersonal',
        'mute_on_entry' => 'setMuteOnEntry',
        'auto_record' => 'setAutoRecord',
        'enterprise_name' => 'setEnterpriseName',
        'moderator_less' => 'setModeratorLess',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'total_call_seconds' => 'setTotalCallSeconds',
        'create_time' => 'setCreateTime',
        'endpoints_count' => 'setEndpointsCount',
        'concurrent_endpoints' => 'setConcurrentEndpoints',
        'live_visible_endpoints_count' => 'setLiveVisibleEndpointsCount',
        'qualaroo_rating' => 'setQualarooRating',
        'qualaroo_count' => 'setQualarooCount',
        'meeting_recording' => 'setMeetingRecording',
        'video_share' => 'setVideoShare',
        'content_share' => 'setContentShare',
        'live_recording' => 'setLiveRecording',
        'live_video_share' => 'setLiveVideoShare',
        'live_content_share' => 'setLiveContentShare',
        'large_meeting' => 'setLargeMeeting',
        'roi_distance' => 'setRoiDistance',
        'mpls' => 'setMpls',
        'id' => 'setId',
        'endpoints' => 'setEndpoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meeting_id' => 'getMeetingId',
        'meeting_uuid' => 'getMeetingUuid',
        'user_name' => 'getUserName',
        'email' => 'getEmail',
        'encryption_type' => 'getEncryptionType',
        'title' => 'getTitle',
        'user_full_name' => 'getUserFullName',
        'phone_number' => 'getPhoneNumber',
        'user_features' => 'getUserFeatures',
        'scheduled_from' => 'getScheduledFrom',
        'invitee_count' => 'getInviteeCount',
        'personal' => 'getPersonal',
        'mute_on_entry' => 'getMuteOnEntry',
        'auto_record' => 'getAutoRecord',
        'enterprise_name' => 'getEnterpriseName',
        'moderator_less' => 'getModeratorLess',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'total_call_seconds' => 'getTotalCallSeconds',
        'create_time' => 'getCreateTime',
        'endpoints_count' => 'getEndpointsCount',
        'concurrent_endpoints' => 'getConcurrentEndpoints',
        'live_visible_endpoints_count' => 'getLiveVisibleEndpointsCount',
        'qualaroo_rating' => 'getQualarooRating',
        'qualaroo_count' => 'getQualarooCount',
        'meeting_recording' => 'getMeetingRecording',
        'video_share' => 'getVideoShare',
        'content_share' => 'getContentShare',
        'live_recording' => 'getLiveRecording',
        'live_video_share' => 'getLiveVideoShare',
        'live_content_share' => 'getLiveContentShare',
        'large_meeting' => 'getLargeMeeting',
        'roi_distance' => 'getRoiDistance',
        'mpls' => 'getMpls',
        'id' => 'getId',
        'endpoints' => 'getEndpoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCHEDULED_FROM_WEB_APP = 'WEB_APP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduledFromAllowableValues()
    {
        return [
            self::SCHEDULED_FROM_WEB_APP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meeting_id'] = isset($data['meeting_id']) ? $data['meeting_id'] : null;
        $this->container['meeting_uuid'] = isset($data['meeting_uuid']) ? $data['meeting_uuid'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['encryption_type'] = isset($data['encryption_type']) ? $data['encryption_type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['user_full_name'] = isset($data['user_full_name']) ? $data['user_full_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['user_features'] = isset($data['user_features']) ? $data['user_features'] : null;
        $this->container['scheduled_from'] = isset($data['scheduled_from']) ? $data['scheduled_from'] : null;
        $this->container['invitee_count'] = isset($data['invitee_count']) ? $data['invitee_count'] : null;
        $this->container['personal'] = isset($data['personal']) ? $data['personal'] : null;
        $this->container['mute_on_entry'] = isset($data['mute_on_entry']) ? $data['mute_on_entry'] : null;
        $this->container['auto_record'] = isset($data['auto_record']) ? $data['auto_record'] : null;
        $this->container['enterprise_name'] = isset($data['enterprise_name']) ? $data['enterprise_name'] : null;
        $this->container['moderator_less'] = isset($data['moderator_less']) ? $data['moderator_less'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['total_call_seconds'] = isset($data['total_call_seconds']) ? $data['total_call_seconds'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['endpoints_count'] = isset($data['endpoints_count']) ? $data['endpoints_count'] : null;
        $this->container['concurrent_endpoints'] = isset($data['concurrent_endpoints']) ? $data['concurrent_endpoints'] : null;
        $this->container['live_visible_endpoints_count'] = isset($data['live_visible_endpoints_count']) ? $data['live_visible_endpoints_count'] : null;
        $this->container['qualaroo_rating'] = isset($data['qualaroo_rating']) ? $data['qualaroo_rating'] : null;
        $this->container['qualaroo_count'] = isset($data['qualaroo_count']) ? $data['qualaroo_count'] : null;
        $this->container['meeting_recording'] = isset($data['meeting_recording']) ? $data['meeting_recording'] : null;
        $this->container['video_share'] = isset($data['video_share']) ? $data['video_share'] : null;
        $this->container['content_share'] = isset($data['content_share']) ? $data['content_share'] : null;
        $this->container['live_recording'] = isset($data['live_recording']) ? $data['live_recording'] : null;
        $this->container['live_video_share'] = isset($data['live_video_share']) ? $data['live_video_share'] : null;
        $this->container['live_content_share'] = isset($data['live_content_share']) ? $data['live_content_share'] : null;
        $this->container['large_meeting'] = isset($data['large_meeting']) ? $data['large_meeting'] : null;
        $this->container['roi_distance'] = isset($data['roi_distance']) ? $data['roi_distance'] : null;
        $this->container['mpls'] = isset($data['mpls']) ? $data['mpls'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['endpoints'] = isset($data['endpoints']) ? $data['endpoints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScheduledFromAllowableValues();
        if (!is_null($this->container['scheduled_from']) && !in_array($this->container['scheduled_from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scheduled_from', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meeting_id
     *
     * @return string
     */
    public function getMeetingId()
    {
        return $this->container['meeting_id'];
    }

    /**
     * Sets meeting_id
     *
     * @param string $meeting_id This is the same as the numericMeetingId found elsewhere. We should have been more consistent.
     *
     * @return $this
     */
    public function setMeetingId($meeting_id)
    {
        $this->container['meeting_id'] = $meeting_id;

        return $this;
    }

    /**
     * Gets meeting_uuid
     *
     * @return string
     */
    public function getMeetingUuid()
    {
        return $this->container['meeting_uuid'];
    }

    /**
     * Sets meeting_uuid
     *
     * @param string $meeting_uuid The universally unique identifier (UUID) of the meeting. This value is a string which contains 6 alphanumeric segments separated by dashes.
     *
     * @return $this
     */
    public function setMeetingUuid($meeting_uuid)
    {
        $this->container['meeting_uuid'] = $meeting_uuid;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets encryption_type
     *
     * @return int
     */
    public function getEncryptionType()
    {
        return $this->container['encryption_type'];
    }

    /**
     * Sets encryption_type
     *
     * @param int $encryption_type encryption_type
     *
     * @return $this
     */
    public function setEncryptionType($encryption_type)
    {
        $this->container['encryption_type'] = $encryption_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_full_name
     *
     * @return string
     */
    public function getUserFullName()
    {
        return $this->container['user_full_name'];
    }

    /**
     * Sets user_full_name
     *
     * @param string $user_full_name user_full_name
     *
     * @return $this
     */
    public function setUserFullName($user_full_name)
    {
        $this->container['user_full_name'] = $user_full_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets user_features
     *
     * @return string
     */
    public function getUserFeatures()
    {
        return $this->container['user_features'];
    }

    /**
     * Sets user_features
     *
     * @param string $user_features user_features
     *
     * @return $this
     */
    public function setUserFeatures($user_features)
    {
        $this->container['user_features'] = $user_features;

        return $this;
    }

    /**
     * Gets scheduled_from
     *
     * @return string
     */
    public function getScheduledFrom()
    {
        return $this->container['scheduled_from'];
    }

    /**
     * Sets scheduled_from
     *
     * @param string $scheduled_from scheduled_from
     *
     * @return $this
     */
    public function setScheduledFrom($scheduled_from)
    {
        $allowedValues = $this->getScheduledFromAllowableValues();
        if (!is_null($scheduled_from) && !in_array($scheduled_from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scheduled_from', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scheduled_from'] = $scheduled_from;

        return $this;
    }

    /**
     * Gets invitee_count
     *
     * @return int
     */
    public function getInviteeCount()
    {
        return $this->container['invitee_count'];
    }

    /**
     * Sets invitee_count
     *
     * @param int $invitee_count invitee_count
     *
     * @return $this
     */
    public function setInviteeCount($invitee_count)
    {
        $this->container['invitee_count'] = $invitee_count;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return bool
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param bool $personal personal
     *
     * @return $this
     */
    public function setPersonal($personal)
    {
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets mute_on_entry
     *
     * @return bool
     */
    public function getMuteOnEntry()
    {
        return $this->container['mute_on_entry'];
    }

    /**
     * Sets mute_on_entry
     *
     * @param bool $mute_on_entry mute_on_entry
     *
     * @return $this
     */
    public function setMuteOnEntry($mute_on_entry)
    {
        $this->container['mute_on_entry'] = $mute_on_entry;

        return $this;
    }

    /**
     * Gets auto_record
     *
     * @return bool
     */
    public function getAutoRecord()
    {
        return $this->container['auto_record'];
    }

    /**
     * Sets auto_record
     *
     * @param bool $auto_record auto_record
     *
     * @return $this
     */
    public function setAutoRecord($auto_record)
    {
        $this->container['auto_record'] = $auto_record;

        return $this;
    }

    /**
     * Gets enterprise_name
     *
     * @return string
     */
    public function getEnterpriseName()
    {
        return $this->container['enterprise_name'];
    }

    /**
     * Sets enterprise_name
     *
     * @param string $enterprise_name enterprise_name
     *
     * @return $this
     */
    public function setEnterpriseName($enterprise_name)
    {
        $this->container['enterprise_name'] = $enterprise_name;

        return $this;
    }

    /**
     * Gets moderator_less
     *
     * @return bool
     */
    public function getModeratorLess()
    {
        return $this->container['moderator_less'];
    }

    /**
     * Sets moderator_less
     *
     * @param bool $moderator_less moderator_less
     *
     * @return $this
     */
    public function setModeratorLess($moderator_less)
    {
        $this->container['moderator_less'] = $moderator_less;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets total_call_seconds
     *
     * @return int
     */
    public function getTotalCallSeconds()
    {
        return $this->container['total_call_seconds'];
    }

    /**
     * Sets total_call_seconds
     *
     * @param int $total_call_seconds total_call_seconds
     *
     * @return $this
     */
    public function setTotalCallSeconds($total_call_seconds)
    {
        $this->container['total_call_seconds'] = $total_call_seconds;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets endpoints_count
     *
     * @return int
     */
    public function getEndpointsCount()
    {
        return $this->container['endpoints_count'];
    }

    /**
     * Sets endpoints_count
     *
     * @param int $endpoints_count endpoints_count
     *
     * @return $this
     */
    public function setEndpointsCount($endpoints_count)
    {
        $this->container['endpoints_count'] = $endpoints_count;

        return $this;
    }

    /**
     * Gets concurrent_endpoints
     *
     * @return int
     */
    public function getConcurrentEndpoints()
    {
        return $this->container['concurrent_endpoints'];
    }

    /**
     * Sets concurrent_endpoints
     *
     * @param int $concurrent_endpoints concurrent_endpoints
     *
     * @return $this
     */
    public function setConcurrentEndpoints($concurrent_endpoints)
    {
        $this->container['concurrent_endpoints'] = $concurrent_endpoints;

        return $this;
    }

    /**
     * Gets live_visible_endpoints_count
     *
     * @return int
     */
    public function getLiveVisibleEndpointsCount()
    {
        return $this->container['live_visible_endpoints_count'];
    }

    /**
     * Sets live_visible_endpoints_count
     *
     * @param int $live_visible_endpoints_count live_visible_endpoints_count
     *
     * @return $this
     */
    public function setLiveVisibleEndpointsCount($live_visible_endpoints_count)
    {
        $this->container['live_visible_endpoints_count'] = $live_visible_endpoints_count;

        return $this;
    }

    /**
     * Gets qualaroo_rating
     *
     * @return int
     */
    public function getQualarooRating()
    {
        return $this->container['qualaroo_rating'];
    }

    /**
     * Sets qualaroo_rating
     *
     * @param int $qualaroo_rating qualaroo_rating
     *
     * @return $this
     */
    public function setQualarooRating($qualaroo_rating)
    {
        $this->container['qualaroo_rating'] = $qualaroo_rating;

        return $this;
    }

    /**
     * Gets qualaroo_count
     *
     * @return int
     */
    public function getQualarooCount()
    {
        return $this->container['qualaroo_count'];
    }

    /**
     * Sets qualaroo_count
     *
     * @param int $qualaroo_count qualaroo_count
     *
     * @return $this
     */
    public function setQualarooCount($qualaroo_count)
    {
        $this->container['qualaroo_count'] = $qualaroo_count;

        return $this;
    }

    /**
     * Gets meeting_recording
     *
     * @return bool
     */
    public function getMeetingRecording()
    {
        return $this->container['meeting_recording'];
    }

    /**
     * Sets meeting_recording
     *
     * @param bool $meeting_recording meeting_recording
     *
     * @return $this
     */
    public function setMeetingRecording($meeting_recording)
    {
        $this->container['meeting_recording'] = $meeting_recording;

        return $this;
    }

    /**
     * Gets video_share
     *
     * @return bool
     */
    public function getVideoShare()
    {
        return $this->container['video_share'];
    }

    /**
     * Sets video_share
     *
     * @param bool $video_share video_share
     *
     * @return $this
     */
    public function setVideoShare($video_share)
    {
        $this->container['video_share'] = $video_share;

        return $this;
    }

    /**
     * Gets content_share
     *
     * @return bool
     */
    public function getContentShare()
    {
        return $this->container['content_share'];
    }

    /**
     * Sets content_share
     *
     * @param bool $content_share content_share
     *
     * @return $this
     */
    public function setContentShare($content_share)
    {
        $this->container['content_share'] = $content_share;

        return $this;
    }

    /**
     * Gets live_recording
     *
     * @return bool
     */
    public function getLiveRecording()
    {
        return $this->container['live_recording'];
    }

    /**
     * Sets live_recording
     *
     * @param bool $live_recording live_recording
     *
     * @return $this
     */
    public function setLiveRecording($live_recording)
    {
        $this->container['live_recording'] = $live_recording;

        return $this;
    }

    /**
     * Gets live_video_share
     *
     * @return bool
     */
    public function getLiveVideoShare()
    {
        return $this->container['live_video_share'];
    }

    /**
     * Sets live_video_share
     *
     * @param bool $live_video_share live_video_share
     *
     * @return $this
     */
    public function setLiveVideoShare($live_video_share)
    {
        $this->container['live_video_share'] = $live_video_share;

        return $this;
    }

    /**
     * Gets live_content_share
     *
     * @return bool
     */
    public function getLiveContentShare()
    {
        return $this->container['live_content_share'];
    }

    /**
     * Sets live_content_share
     *
     * @param bool $live_content_share live_content_share
     *
     * @return $this
     */
    public function setLiveContentShare($live_content_share)
    {
        $this->container['live_content_share'] = $live_content_share;

        return $this;
    }

    /**
     * Gets large_meeting
     *
     * @return bool
     */
    public function getLargeMeeting()
    {
        return $this->container['large_meeting'];
    }

    /**
     * Sets large_meeting
     *
     * @param bool $large_meeting large_meeting
     *
     * @return $this
     */
    public function setLargeMeeting($large_meeting)
    {
        $this->container['large_meeting'] = $large_meeting;

        return $this;
    }

    /**
     * Gets roi_distance
     *
     * @return float
     */
    public function getRoiDistance()
    {
        return $this->container['roi_distance'];
    }

    /**
     * Sets roi_distance
     *
     * @param float $roi_distance roi_distance
     *
     * @return $this
     */
    public function setRoiDistance($roi_distance)
    {
        $this->container['roi_distance'] = $roi_distance;

        return $this;
    }

    /**
     * Gets mpls
     *
     * @return bool
     */
    public function getMpls()
    {
        return $this->container['mpls'];
    }

    /**
     * Sets mpls
     *
     * @param bool $mpls mpls
     *
     * @return $this
     */
    public function setMpls($mpls)
    {
        $this->container['mpls'] = $mpls;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Same as the meetingUUID property in this object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets endpoints
     *
     * @return \BlueJeansMeetingsRestApi\Model\EndpointIndigo[]
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param \BlueJeansMeetingsRestApi\Model\EndpointIndigo[] $endpoints endpoints
     *
     * @return $this
     */
    public function setEndpoints($endpoints)
    {
        $this->container['endpoints'] = $endpoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


