<?php
/**
 * MeetingState
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * MeetingState Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeetingState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MeetingState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meeting_id' => 'string',
        'meeting_guid' => 'string',
        'meeting_state' => 'string',
        'status' => 'string',
        'is_content_sharing_active' => 'bool',
        'bridged' => 'bool',
        'locked' => 'bool',
        'audio_mute_on_entry' => 'bool',
        'video_mute_on_entry' => 'bool',
        'moderator_less' => 'bool',
        'title' => 'string',
        'chat_enabled' => 'bool',
        'pinned_endpoint_guid' => 'string',
        'audio_endpoint_count' => 'int',
        'video_endpoint_count' => 'int',
        'recording_enabled' => 'bool',
        'participant_web_join_url' => 'string',
        'is_large_meeting' => 'string',
        'features' => 'string[]',
        'delayed_meeting_end_time' => 'int',
        'sm_streams' => 'string',
        'inactive_meeting_status' => 'string',
        'meeting_marked_for_delayed_termination' => 'bool',
        'recordinginfo' => '\BlueJeansMeetingsRestApi\Model\MeetingStateRecordinginfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meeting_id' => null,
        'meeting_guid' => null,
        'meeting_state' => null,
        'status' => null,
        'is_content_sharing_active' => null,
        'bridged' => null,
        'locked' => null,
        'audio_mute_on_entry' => null,
        'video_mute_on_entry' => null,
        'moderator_less' => null,
        'title' => null,
        'chat_enabled' => null,
        'pinned_endpoint_guid' => null,
        'audio_endpoint_count' => null,
        'video_endpoint_count' => null,
        'recording_enabled' => null,
        'participant_web_join_url' => null,
        'is_large_meeting' => null,
        'features' => null,
        'delayed_meeting_end_time' => null,
        'sm_streams' => null,
        'inactive_meeting_status' => null,
        'meeting_marked_for_delayed_termination' => null,
        'recordinginfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meeting_id' => 'meetingId',
        'meeting_guid' => 'meetingGuid',
        'meeting_state' => 'meetingState',
        'status' => 'status',
        'is_content_sharing_active' => 'isContentSharingActive',
        'bridged' => 'bridged',
        'locked' => 'locked',
        'audio_mute_on_entry' => 'audioMuteOnEntry',
        'video_mute_on_entry' => 'videoMuteOnEntry',
        'moderator_less' => 'moderatorLess',
        'title' => 'title',
        'chat_enabled' => 'chatEnabled',
        'pinned_endpoint_guid' => 'pinnedEndpointGuid',
        'audio_endpoint_count' => 'audioEndpointCount',
        'video_endpoint_count' => 'videoEndpointCount',
        'recording_enabled' => 'recordingEnabled',
        'participant_web_join_url' => 'participantWebJoinURL',
        'is_large_meeting' => 'isLargeMeeting',
        'features' => 'features',
        'delayed_meeting_end_time' => 'delayedMeetingEndTime',
        'sm_streams' => 'smStreams',
        'inactive_meeting_status' => 'inactiveMeetingStatus',
        'meeting_marked_for_delayed_termination' => 'meetingMarkedForDelayedTermination',
        'recordinginfo' => 'recordinginfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meeting_id' => 'setMeetingId',
        'meeting_guid' => 'setMeetingGuid',
        'meeting_state' => 'setMeetingState',
        'status' => 'setStatus',
        'is_content_sharing_active' => 'setIsContentSharingActive',
        'bridged' => 'setBridged',
        'locked' => 'setLocked',
        'audio_mute_on_entry' => 'setAudioMuteOnEntry',
        'video_mute_on_entry' => 'setVideoMuteOnEntry',
        'moderator_less' => 'setModeratorLess',
        'title' => 'setTitle',
        'chat_enabled' => 'setChatEnabled',
        'pinned_endpoint_guid' => 'setPinnedEndpointGuid',
        'audio_endpoint_count' => 'setAudioEndpointCount',
        'video_endpoint_count' => 'setVideoEndpointCount',
        'recording_enabled' => 'setRecordingEnabled',
        'participant_web_join_url' => 'setParticipantWebJoinUrl',
        'is_large_meeting' => 'setIsLargeMeeting',
        'features' => 'setFeatures',
        'delayed_meeting_end_time' => 'setDelayedMeetingEndTime',
        'sm_streams' => 'setSmStreams',
        'inactive_meeting_status' => 'setInactiveMeetingStatus',
        'meeting_marked_for_delayed_termination' => 'setMeetingMarkedForDelayedTermination',
        'recordinginfo' => 'setRecordinginfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meeting_id' => 'getMeetingId',
        'meeting_guid' => 'getMeetingGuid',
        'meeting_state' => 'getMeetingState',
        'status' => 'getStatus',
        'is_content_sharing_active' => 'getIsContentSharingActive',
        'bridged' => 'getBridged',
        'locked' => 'getLocked',
        'audio_mute_on_entry' => 'getAudioMuteOnEntry',
        'video_mute_on_entry' => 'getVideoMuteOnEntry',
        'moderator_less' => 'getModeratorLess',
        'title' => 'getTitle',
        'chat_enabled' => 'getChatEnabled',
        'pinned_endpoint_guid' => 'getPinnedEndpointGuid',
        'audio_endpoint_count' => 'getAudioEndpointCount',
        'video_endpoint_count' => 'getVideoEndpointCount',
        'recording_enabled' => 'getRecordingEnabled',
        'participant_web_join_url' => 'getParticipantWebJoinUrl',
        'is_large_meeting' => 'getIsLargeMeeting',
        'features' => 'getFeatures',
        'delayed_meeting_end_time' => 'getDelayedMeetingEndTime',
        'sm_streams' => 'getSmStreams',
        'inactive_meeting_status' => 'getInactiveMeetingStatus',
        'meeting_marked_for_delayed_termination' => 'getMeetingMarkedForDelayedTermination',
        'recordinginfo' => 'getRecordinginfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEETING_STATE_MEETING_STARTED = 'MeetingStarted';
    const STATUS_ACTIVE = 'active';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingStateAllowableValues()
    {
        return [
            self::MEETING_STATE_MEETING_STARTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meeting_id'] = isset($data['meeting_id']) ? $data['meeting_id'] : null;
        $this->container['meeting_guid'] = isset($data['meeting_guid']) ? $data['meeting_guid'] : null;
        $this->container['meeting_state'] = isset($data['meeting_state']) ? $data['meeting_state'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_content_sharing_active'] = isset($data['is_content_sharing_active']) ? $data['is_content_sharing_active'] : null;
        $this->container['bridged'] = isset($data['bridged']) ? $data['bridged'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['audio_mute_on_entry'] = isset($data['audio_mute_on_entry']) ? $data['audio_mute_on_entry'] : null;
        $this->container['video_mute_on_entry'] = isset($data['video_mute_on_entry']) ? $data['video_mute_on_entry'] : null;
        $this->container['moderator_less'] = isset($data['moderator_less']) ? $data['moderator_less'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['chat_enabled'] = isset($data['chat_enabled']) ? $data['chat_enabled'] : null;
        $this->container['pinned_endpoint_guid'] = isset($data['pinned_endpoint_guid']) ? $data['pinned_endpoint_guid'] : null;
        $this->container['audio_endpoint_count'] = isset($data['audio_endpoint_count']) ? $data['audio_endpoint_count'] : null;
        $this->container['video_endpoint_count'] = isset($data['video_endpoint_count']) ? $data['video_endpoint_count'] : null;
        $this->container['recording_enabled'] = isset($data['recording_enabled']) ? $data['recording_enabled'] : null;
        $this->container['participant_web_join_url'] = isset($data['participant_web_join_url']) ? $data['participant_web_join_url'] : null;
        $this->container['is_large_meeting'] = isset($data['is_large_meeting']) ? $data['is_large_meeting'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['delayed_meeting_end_time'] = isset($data['delayed_meeting_end_time']) ? $data['delayed_meeting_end_time'] : null;
        $this->container['sm_streams'] = isset($data['sm_streams']) ? $data['sm_streams'] : null;
        $this->container['inactive_meeting_status'] = isset($data['inactive_meeting_status']) ? $data['inactive_meeting_status'] : null;
        $this->container['meeting_marked_for_delayed_termination'] = isset($data['meeting_marked_for_delayed_termination']) ? $data['meeting_marked_for_delayed_termination'] : null;
        $this->container['recordinginfo'] = isset($data['recordinginfo']) ? $data['recordinginfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeetingStateAllowableValues();
        if (!is_null($this->container['meeting_state']) && !in_array($this->container['meeting_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'meeting_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meeting_id
     *
     * @return string
     */
    public function getMeetingId()
    {
        return $this->container['meeting_id'];
    }

    /**
     * Sets meeting_id
     *
     * @param string $meeting_id meeting_id
     *
     * @return $this
     */
    public function setMeetingId($meeting_id)
    {
        $this->container['meeting_id'] = $meeting_id;

        return $this;
    }

    /**
     * Gets meeting_guid
     *
     * @return string
     */
    public function getMeetingGuid()
    {
        return $this->container['meeting_guid'];
    }

    /**
     * Sets meeting_guid
     *
     * @param string $meeting_guid meeting_guid
     *
     * @return $this
     */
    public function setMeetingGuid($meeting_guid)
    {
        $this->container['meeting_guid'] = $meeting_guid;

        return $this;
    }

    /**
     * Gets meeting_state
     *
     * @return string
     */
    public function getMeetingState()
    {
        return $this->container['meeting_state'];
    }

    /**
     * Sets meeting_state
     *
     * @param string $meeting_state meeting_state
     *
     * @return $this
     */
    public function setMeetingState($meeting_state)
    {
        $allowedValues = $this->getMeetingStateAllowableValues();
        if (!is_null($meeting_state) && !in_array($meeting_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'meeting_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_state'] = $meeting_state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_content_sharing_active
     *
     * @return bool
     */
    public function getIsContentSharingActive()
    {
        return $this->container['is_content_sharing_active'];
    }

    /**
     * Sets is_content_sharing_active
     *
     * @param bool $is_content_sharing_active is_content_sharing_active
     *
     * @return $this
     */
    public function setIsContentSharingActive($is_content_sharing_active)
    {
        $this->container['is_content_sharing_active'] = $is_content_sharing_active;

        return $this;
    }

    /**
     * Gets bridged
     *
     * @return bool
     */
    public function getBridged()
    {
        return $this->container['bridged'];
    }

    /**
     * Sets bridged
     *
     * @param bool $bridged bridged
     *
     * @return $this
     */
    public function setBridged($bridged)
    {
        $this->container['bridged'] = $bridged;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets audio_mute_on_entry
     *
     * @return bool
     */
    public function getAudioMuteOnEntry()
    {
        return $this->container['audio_mute_on_entry'];
    }

    /**
     * Sets audio_mute_on_entry
     *
     * @param bool $audio_mute_on_entry audio_mute_on_entry
     *
     * @return $this
     */
    public function setAudioMuteOnEntry($audio_mute_on_entry)
    {
        $this->container['audio_mute_on_entry'] = $audio_mute_on_entry;

        return $this;
    }

    /**
     * Gets video_mute_on_entry
     *
     * @return bool
     */
    public function getVideoMuteOnEntry()
    {
        return $this->container['video_mute_on_entry'];
    }

    /**
     * Sets video_mute_on_entry
     *
     * @param bool $video_mute_on_entry video_mute_on_entry
     *
     * @return $this
     */
    public function setVideoMuteOnEntry($video_mute_on_entry)
    {
        $this->container['video_mute_on_entry'] = $video_mute_on_entry;

        return $this;
    }

    /**
     * Gets moderator_less
     *
     * @return bool
     */
    public function getModeratorLess()
    {
        return $this->container['moderator_less'];
    }

    /**
     * Sets moderator_less
     *
     * @param bool $moderator_less moderator_less
     *
     * @return $this
     */
    public function setModeratorLess($moderator_less)
    {
        $this->container['moderator_less'] = $moderator_less;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets chat_enabled
     *
     * @return bool
     */
    public function getChatEnabled()
    {
        return $this->container['chat_enabled'];
    }

    /**
     * Sets chat_enabled
     *
     * @param bool $chat_enabled chat_enabled
     *
     * @return $this
     */
    public function setChatEnabled($chat_enabled)
    {
        $this->container['chat_enabled'] = $chat_enabled;

        return $this;
    }

    /**
     * Gets pinned_endpoint_guid
     *
     * @return string
     */
    public function getPinnedEndpointGuid()
    {
        return $this->container['pinned_endpoint_guid'];
    }

    /**
     * Sets pinned_endpoint_guid
     *
     * @param string $pinned_endpoint_guid pinned_endpoint_guid
     *
     * @return $this
     */
    public function setPinnedEndpointGuid($pinned_endpoint_guid)
    {
        $this->container['pinned_endpoint_guid'] = $pinned_endpoint_guid;

        return $this;
    }

    /**
     * Gets audio_endpoint_count
     *
     * @return int
     */
    public function getAudioEndpointCount()
    {
        return $this->container['audio_endpoint_count'];
    }

    /**
     * Sets audio_endpoint_count
     *
     * @param int $audio_endpoint_count audio_endpoint_count
     *
     * @return $this
     */
    public function setAudioEndpointCount($audio_endpoint_count)
    {
        $this->container['audio_endpoint_count'] = $audio_endpoint_count;

        return $this;
    }

    /**
     * Gets video_endpoint_count
     *
     * @return int
     */
    public function getVideoEndpointCount()
    {
        return $this->container['video_endpoint_count'];
    }

    /**
     * Sets video_endpoint_count
     *
     * @param int $video_endpoint_count video_endpoint_count
     *
     * @return $this
     */
    public function setVideoEndpointCount($video_endpoint_count)
    {
        $this->container['video_endpoint_count'] = $video_endpoint_count;

        return $this;
    }

    /**
     * Gets recording_enabled
     *
     * @return bool
     */
    public function getRecordingEnabled()
    {
        return $this->container['recording_enabled'];
    }

    /**
     * Sets recording_enabled
     *
     * @param bool $recording_enabled recording_enabled
     *
     * @return $this
     */
    public function setRecordingEnabled($recording_enabled)
    {
        $this->container['recording_enabled'] = $recording_enabled;

        return $this;
    }

    /**
     * Gets participant_web_join_url
     *
     * @return string
     */
    public function getParticipantWebJoinUrl()
    {
        return $this->container['participant_web_join_url'];
    }

    /**
     * Sets participant_web_join_url
     *
     * @param string $participant_web_join_url participant_web_join_url
     *
     * @return $this
     */
    public function setParticipantWebJoinUrl($participant_web_join_url)
    {
        $this->container['participant_web_join_url'] = $participant_web_join_url;

        return $this;
    }

    /**
     * Gets is_large_meeting
     *
     * @return string
     */
    public function getIsLargeMeeting()
    {
        return $this->container['is_large_meeting'];
    }

    /**
     * Sets is_large_meeting
     *
     * @param string $is_large_meeting is_large_meeting
     *
     * @return $this
     */
    public function setIsLargeMeeting($is_large_meeting)
    {
        $this->container['is_large_meeting'] = $is_large_meeting;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets delayed_meeting_end_time
     *
     * @return int
     */
    public function getDelayedMeetingEndTime()
    {
        return $this->container['delayed_meeting_end_time'];
    }

    /**
     * Sets delayed_meeting_end_time
     *
     * @param int $delayed_meeting_end_time delayed_meeting_end_time
     *
     * @return $this
     */
    public function setDelayedMeetingEndTime($delayed_meeting_end_time)
    {
        $this->container['delayed_meeting_end_time'] = $delayed_meeting_end_time;

        return $this;
    }

    /**
     * Gets sm_streams
     *
     * @return string
     */
    public function getSmStreams()
    {
        return $this->container['sm_streams'];
    }

    /**
     * Sets sm_streams
     *
     * @param string $sm_streams sm_streams
     *
     * @return $this
     */
    public function setSmStreams($sm_streams)
    {
        $this->container['sm_streams'] = $sm_streams;

        return $this;
    }

    /**
     * Gets inactive_meeting_status
     *
     * @return string
     */
    public function getInactiveMeetingStatus()
    {
        return $this->container['inactive_meeting_status'];
    }

    /**
     * Sets inactive_meeting_status
     *
     * @param string $inactive_meeting_status inactive_meeting_status
     *
     * @return $this
     */
    public function setInactiveMeetingStatus($inactive_meeting_status)
    {
        $this->container['inactive_meeting_status'] = $inactive_meeting_status;

        return $this;
    }

    /**
     * Gets meeting_marked_for_delayed_termination
     *
     * @return bool
     */
    public function getMeetingMarkedForDelayedTermination()
    {
        return $this->container['meeting_marked_for_delayed_termination'];
    }

    /**
     * Sets meeting_marked_for_delayed_termination
     *
     * @param bool $meeting_marked_for_delayed_termination meeting_marked_for_delayed_termination
     *
     * @return $this
     */
    public function setMeetingMarkedForDelayedTermination($meeting_marked_for_delayed_termination)
    {
        $this->container['meeting_marked_for_delayed_termination'] = $meeting_marked_for_delayed_termination;

        return $this;
    }

    /**
     * Gets recordinginfo
     *
     * @return \BlueJeansMeetingsRestApi\Model\MeetingStateRecordinginfo
     */
    public function getRecordinginfo()
    {
        return $this->container['recordinginfo'];
    }

    /**
     * Sets recordinginfo
     *
     * @param \BlueJeansMeetingsRestApi\Model\MeetingStateRecordinginfo $recordinginfo recordinginfo
     *
     * @return $this
     */
    public function setRecordinginfo($recordinginfo)
    {
        $this->container['recordinginfo'] = $recordinginfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


