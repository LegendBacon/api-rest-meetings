<?php
/**
 * MeetingsSummaryRec
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * MeetingsSummaryRec Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeetingsSummaryRec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MeetingsSummaryRec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meetings_count' => 'int',
        'country_count' => 'int',
        'registered_users' => 'int',
        'active_users' => 'int',
        'total_minutes' => 'int',
        'average_call_duration' => 'float',
        'total_participants' => 'int',
        'recording_count' => 'int',
        'average_participants' => 'float',
        'video_share_count' => 'int',
        'city_count' => 'int',
        'recording_view_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meetings_count' => null,
        'country_count' => null,
        'registered_users' => null,
        'active_users' => null,
        'total_minutes' => null,
        'average_call_duration' => null,
        'total_participants' => null,
        'recording_count' => null,
        'average_participants' => null,
        'video_share_count' => null,
        'city_count' => null,
        'recording_view_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meetings_count' => 'meetings_count',
        'country_count' => 'country_count',
        'registered_users' => 'registered_users',
        'active_users' => 'active_users',
        'total_minutes' => 'total_minutes',
        'average_call_duration' => 'average_call_duration',
        'total_participants' => 'total_participants',
        'recording_count' => 'recording_count',
        'average_participants' => 'average_participants',
        'video_share_count' => 'video_share_count',
        'city_count' => 'city_count',
        'recording_view_count' => 'recording_view_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meetings_count' => 'setMeetingsCount',
        'country_count' => 'setCountryCount',
        'registered_users' => 'setRegisteredUsers',
        'active_users' => 'setActiveUsers',
        'total_minutes' => 'setTotalMinutes',
        'average_call_duration' => 'setAverageCallDuration',
        'total_participants' => 'setTotalParticipants',
        'recording_count' => 'setRecordingCount',
        'average_participants' => 'setAverageParticipants',
        'video_share_count' => 'setVideoShareCount',
        'city_count' => 'setCityCount',
        'recording_view_count' => 'setRecordingViewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meetings_count' => 'getMeetingsCount',
        'country_count' => 'getCountryCount',
        'registered_users' => 'getRegisteredUsers',
        'active_users' => 'getActiveUsers',
        'total_minutes' => 'getTotalMinutes',
        'average_call_duration' => 'getAverageCallDuration',
        'total_participants' => 'getTotalParticipants',
        'recording_count' => 'getRecordingCount',
        'average_participants' => 'getAverageParticipants',
        'video_share_count' => 'getVideoShareCount',
        'city_count' => 'getCityCount',
        'recording_view_count' => 'getRecordingViewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meetings_count'] = isset($data['meetings_count']) ? $data['meetings_count'] : null;
        $this->container['country_count'] = isset($data['country_count']) ? $data['country_count'] : null;
        $this->container['registered_users'] = isset($data['registered_users']) ? $data['registered_users'] : null;
        $this->container['active_users'] = isset($data['active_users']) ? $data['active_users'] : null;
        $this->container['total_minutes'] = isset($data['total_minutes']) ? $data['total_minutes'] : null;
        $this->container['average_call_duration'] = isset($data['average_call_duration']) ? $data['average_call_duration'] : null;
        $this->container['total_participants'] = isset($data['total_participants']) ? $data['total_participants'] : null;
        $this->container['recording_count'] = isset($data['recording_count']) ? $data['recording_count'] : null;
        $this->container['average_participants'] = isset($data['average_participants']) ? $data['average_participants'] : null;
        $this->container['video_share_count'] = isset($data['video_share_count']) ? $data['video_share_count'] : null;
        $this->container['city_count'] = isset($data['city_count']) ? $data['city_count'] : null;
        $this->container['recording_view_count'] = isset($data['recording_view_count']) ? $data['recording_view_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meetings_count
     *
     * @return int
     */
    public function getMeetingsCount()
    {
        return $this->container['meetings_count'];
    }

    /**
     * Sets meetings_count
     *
     * @param int $meetings_count Number of meetings held
     *
     * @return $this
     */
    public function setMeetingsCount($meetings_count)
    {
        $this->container['meetings_count'] = $meetings_count;

        return $this;
    }

    /**
     * Gets country_count
     *
     * @return int
     */
    public function getCountryCount()
    {
        return $this->container['country_count'];
    }

    /**
     * Sets country_count
     *
     * @param int $country_count Number of countries with participants in a meeting
     *
     * @return $this
     */
    public function setCountryCount($country_count)
    {
        $this->container['country_count'] = $country_count;

        return $this;
    }

    /**
     * Gets registered_users
     *
     * @return int
     */
    public function getRegisteredUsers()
    {
        return $this->container['registered_users'];
    }

    /**
     * Sets registered_users
     *
     * @param int $registered_users Number of registered BlueJeans users who were in meetings.
     *
     * @return $this
     */
    public function setRegisteredUsers($registered_users)
    {
        $this->container['registered_users'] = $registered_users;

        return $this;
    }

    /**
     * Gets active_users
     *
     * @return int
     */
    public function getActiveUsers()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     *
     * @param int $active_users active_users
     *
     * @return $this
     */
    public function setActiveUsers($active_users)
    {
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets total_minutes
     *
     * @return int
     */
    public function getTotalMinutes()
    {
        return $this->container['total_minutes'];
    }

    /**
     * Sets total_minutes
     *
     * @param int $total_minutes Total minutes of meetings.
     *
     * @return $this
     */
    public function setTotalMinutes($total_minutes)
    {
        $this->container['total_minutes'] = $total_minutes;

        return $this;
    }

    /**
     * Gets average_call_duration
     *
     * @return float
     */
    public function getAverageCallDuration()
    {
        return $this->container['average_call_duration'];
    }

    /**
     * Sets average_call_duration
     *
     * @param float $average_call_duration Average number of minutes participants were in a meeting.
     *
     * @return $this
     */
    public function setAverageCallDuration($average_call_duration)
    {
        $this->container['average_call_duration'] = $average_call_duration;

        return $this;
    }

    /**
     * Gets total_participants
     *
     * @return int
     */
    public function getTotalParticipants()
    {
        return $this->container['total_participants'];
    }

    /**
     * Sets total_participants
     *
     * @param int $total_participants Total people who were in meetings.
     *
     * @return $this
     */
    public function setTotalParticipants($total_participants)
    {
        $this->container['total_participants'] = $total_participants;

        return $this;
    }

    /**
     * Gets recording_count
     *
     * @return int
     */
    public function getRecordingCount()
    {
        return $this->container['recording_count'];
    }

    /**
     * Sets recording_count
     *
     * @param int $recording_count Total number of meetings recorded.
     *
     * @return $this
     */
    public function setRecordingCount($recording_count)
    {
        $this->container['recording_count'] = $recording_count;

        return $this;
    }

    /**
     * Gets average_participants
     *
     * @return float
     */
    public function getAverageParticipants()
    {
        return $this->container['average_participants'];
    }

    /**
     * Sets average_participants
     *
     * @param float $average_participants Average number of participants per meeting.
     *
     * @return $this
     */
    public function setAverageParticipants($average_participants)
    {
        $this->container['average_participants'] = $average_participants;

        return $this;
    }

    /**
     * Gets video_share_count
     *
     * @return int
     */
    public function getVideoShareCount()
    {
        return $this->container['video_share_count'];
    }

    /**
     * Sets video_share_count
     *
     * @param int $video_share_count video_share_count
     *
     * @return $this
     */
    public function setVideoShareCount($video_share_count)
    {
        $this->container['video_share_count'] = $video_share_count;

        return $this;
    }

    /**
     * Gets city_count
     *
     * @return int
     */
    public function getCityCount()
    {
        return $this->container['city_count'];
    }

    /**
     * Sets city_count
     *
     * @param int $city_count Total number of cities with meeting participants.
     *
     * @return $this
     */
    public function setCityCount($city_count)
    {
        $this->container['city_count'] = $city_count;

        return $this;
    }

    /**
     * Gets recording_view_count
     *
     * @return int
     */
    public function getRecordingViewCount()
    {
        return $this->container['recording_view_count'];
    }

    /**
     * Sets recording_view_count
     *
     * @param int $recording_view_count Total number of times that recordings were viewed.
     *
     * @return $this
     */
    public function setRecordingViewCount($recording_view_count)
    {
        $this->container['recording_view_count'] = $recording_view_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


