<?php
/**
 * Recording
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * Recording Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recording implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recording_entity_id' => 'int',
        'recording_entity_guid' => 'string',
        'recording_name' => 'string',
        'meeting_guid' => 'string',
        'chapter_count' => 'int',
        'total_size' => 'int',
        'total_duration' => 'int',
        'last_recording_date' => 'int',
        'aggregated_status' => 'string',
        'recording_thumbnail' => 'string',
        'created' => 'int',
        'aggregated_view_count' => 'int',
        'is_premium_recording' => 'bool',
        'show_premium_recording_tag' => 'bool',
        'recording_chapters' => '\BlueJeansMeetingsRestApi\Model\RecordingRecordingChapters[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recording_entity_id' => null,
        'recording_entity_guid' => null,
        'recording_name' => null,
        'meeting_guid' => null,
        'chapter_count' => null,
        'total_size' => null,
        'total_duration' => null,
        'last_recording_date' => null,
        'aggregated_status' => null,
        'recording_thumbnail' => null,
        'created' => null,
        'aggregated_view_count' => null,
        'is_premium_recording' => null,
        'show_premium_recording_tag' => null,
        'recording_chapters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recording_entity_id' => 'recordingEntityId',
        'recording_entity_guid' => 'recordingEntityGuid',
        'recording_name' => 'recordingName',
        'meeting_guid' => 'meetingGuid',
        'chapter_count' => 'chapterCount',
        'total_size' => 'totalSize',
        'total_duration' => 'totalDuration',
        'last_recording_date' => 'lastRecordingDate',
        'aggregated_status' => 'aggregatedStatus',
        'recording_thumbnail' => 'recordingThumbnail',
        'created' => 'created',
        'aggregated_view_count' => 'aggregatedViewCount',
        'is_premium_recording' => 'isPremiumRecording',
        'show_premium_recording_tag' => 'showPremiumRecordingTag',
        'recording_chapters' => 'recordingChapters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recording_entity_id' => 'setRecordingEntityId',
        'recording_entity_guid' => 'setRecordingEntityGuid',
        'recording_name' => 'setRecordingName',
        'meeting_guid' => 'setMeetingGuid',
        'chapter_count' => 'setChapterCount',
        'total_size' => 'setTotalSize',
        'total_duration' => 'setTotalDuration',
        'last_recording_date' => 'setLastRecordingDate',
        'aggregated_status' => 'setAggregatedStatus',
        'recording_thumbnail' => 'setRecordingThumbnail',
        'created' => 'setCreated',
        'aggregated_view_count' => 'setAggregatedViewCount',
        'is_premium_recording' => 'setIsPremiumRecording',
        'show_premium_recording_tag' => 'setShowPremiumRecordingTag',
        'recording_chapters' => 'setRecordingChapters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recording_entity_id' => 'getRecordingEntityId',
        'recording_entity_guid' => 'getRecordingEntityGuid',
        'recording_name' => 'getRecordingName',
        'meeting_guid' => 'getMeetingGuid',
        'chapter_count' => 'getChapterCount',
        'total_size' => 'getTotalSize',
        'total_duration' => 'getTotalDuration',
        'last_recording_date' => 'getLastRecordingDate',
        'aggregated_status' => 'getAggregatedStatus',
        'recording_thumbnail' => 'getRecordingThumbnail',
        'created' => 'getCreated',
        'aggregated_view_count' => 'getAggregatedViewCount',
        'is_premium_recording' => 'getIsPremiumRecording',
        'show_premium_recording_tag' => 'getShowPremiumRecordingTag',
        'recording_chapters' => 'getRecordingChapters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recording_entity_id'] = isset($data['recording_entity_id']) ? $data['recording_entity_id'] : null;
        $this->container['recording_entity_guid'] = isset($data['recording_entity_guid']) ? $data['recording_entity_guid'] : null;
        $this->container['recording_name'] = isset($data['recording_name']) ? $data['recording_name'] : null;
        $this->container['meeting_guid'] = isset($data['meeting_guid']) ? $data['meeting_guid'] : null;
        $this->container['chapter_count'] = isset($data['chapter_count']) ? $data['chapter_count'] : null;
        $this->container['total_size'] = isset($data['total_size']) ? $data['total_size'] : null;
        $this->container['total_duration'] = isset($data['total_duration']) ? $data['total_duration'] : null;
        $this->container['last_recording_date'] = isset($data['last_recording_date']) ? $data['last_recording_date'] : null;
        $this->container['aggregated_status'] = isset($data['aggregated_status']) ? $data['aggregated_status'] : null;
        $this->container['recording_thumbnail'] = isset($data['recording_thumbnail']) ? $data['recording_thumbnail'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['aggregated_view_count'] = isset($data['aggregated_view_count']) ? $data['aggregated_view_count'] : null;
        $this->container['is_premium_recording'] = isset($data['is_premium_recording']) ? $data['is_premium_recording'] : null;
        $this->container['show_premium_recording_tag'] = isset($data['show_premium_recording_tag']) ? $data['show_premium_recording_tag'] : null;
        $this->container['recording_chapters'] = isset($data['recording_chapters']) ? $data['recording_chapters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recording_entity_id
     *
     * @return int
     */
    public function getRecordingEntityId()
    {
        return $this->container['recording_entity_id'];
    }

    /**
     * Sets recording_entity_id
     *
     * @param int $recording_entity_id recording_entity_id
     *
     * @return $this
     */
    public function setRecordingEntityId($recording_entity_id)
    {
        $this->container['recording_entity_id'] = $recording_entity_id;

        return $this;
    }

    /**
     * Gets recording_entity_guid
     *
     * @return string
     */
    public function getRecordingEntityGuid()
    {
        return $this->container['recording_entity_guid'];
    }

    /**
     * Sets recording_entity_guid
     *
     * @param string $recording_entity_guid recording_entity_guid
     *
     * @return $this
     */
    public function setRecordingEntityGuid($recording_entity_guid)
    {
        $this->container['recording_entity_guid'] = $recording_entity_guid;

        return $this;
    }

    /**
     * Gets recording_name
     *
     * @return string
     */
    public function getRecordingName()
    {
        return $this->container['recording_name'];
    }

    /**
     * Sets recording_name
     *
     * @param string $recording_name recording_name
     *
     * @return $this
     */
    public function setRecordingName($recording_name)
    {
        $this->container['recording_name'] = $recording_name;

        return $this;
    }

    /**
     * Gets meeting_guid
     *
     * @return string
     */
    public function getMeetingGuid()
    {
        return $this->container['meeting_guid'];
    }

    /**
     * Sets meeting_guid
     *
     * @param string $meeting_guid meeting_guid
     *
     * @return $this
     */
    public function setMeetingGuid($meeting_guid)
    {
        $this->container['meeting_guid'] = $meeting_guid;

        return $this;
    }

    /**
     * Gets chapter_count
     *
     * @return int
     */
    public function getChapterCount()
    {
        return $this->container['chapter_count'];
    }

    /**
     * Sets chapter_count
     *
     * @param int $chapter_count chapter_count
     *
     * @return $this
     */
    public function setChapterCount($chapter_count)
    {
        $this->container['chapter_count'] = $chapter_count;

        return $this;
    }

    /**
     * Gets total_size
     *
     * @return int
     */
    public function getTotalSize()
    {
        return $this->container['total_size'];
    }

    /**
     * Sets total_size
     *
     * @param int $total_size total_size
     *
     * @return $this
     */
    public function setTotalSize($total_size)
    {
        $this->container['total_size'] = $total_size;

        return $this;
    }

    /**
     * Gets total_duration
     *
     * @return int
     */
    public function getTotalDuration()
    {
        return $this->container['total_duration'];
    }

    /**
     * Sets total_duration
     *
     * @param int $total_duration total_duration
     *
     * @return $this
     */
    public function setTotalDuration($total_duration)
    {
        $this->container['total_duration'] = $total_duration;

        return $this;
    }

    /**
     * Gets last_recording_date
     *
     * @return int
     */
    public function getLastRecordingDate()
    {
        return $this->container['last_recording_date'];
    }

    /**
     * Sets last_recording_date
     *
     * @param int $last_recording_date last_recording_date
     *
     * @return $this
     */
    public function setLastRecordingDate($last_recording_date)
    {
        $this->container['last_recording_date'] = $last_recording_date;

        return $this;
    }

    /**
     * Gets aggregated_status
     *
     * @return string
     */
    public function getAggregatedStatus()
    {
        return $this->container['aggregated_status'];
    }

    /**
     * Sets aggregated_status
     *
     * @param string $aggregated_status aggregated_status
     *
     * @return $this
     */
    public function setAggregatedStatus($aggregated_status)
    {
        $this->container['aggregated_status'] = $aggregated_status;

        return $this;
    }

    /**
     * Gets recording_thumbnail
     *
     * @return string
     */
    public function getRecordingThumbnail()
    {
        return $this->container['recording_thumbnail'];
    }

    /**
     * Sets recording_thumbnail
     *
     * @param string $recording_thumbnail recording_thumbnail
     *
     * @return $this
     */
    public function setRecordingThumbnail($recording_thumbnail)
    {
        $this->container['recording_thumbnail'] = $recording_thumbnail;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets aggregated_view_count
     *
     * @return int
     */
    public function getAggregatedViewCount()
    {
        return $this->container['aggregated_view_count'];
    }

    /**
     * Sets aggregated_view_count
     *
     * @param int $aggregated_view_count aggregated_view_count
     *
     * @return $this
     */
    public function setAggregatedViewCount($aggregated_view_count)
    {
        $this->container['aggregated_view_count'] = $aggregated_view_count;

        return $this;
    }

    /**
     * Gets is_premium_recording
     *
     * @return bool
     */
    public function getIsPremiumRecording()
    {
        return $this->container['is_premium_recording'];
    }

    /**
     * Sets is_premium_recording
     *
     * @param bool $is_premium_recording is_premium_recording
     *
     * @return $this
     */
    public function setIsPremiumRecording($is_premium_recording)
    {
        $this->container['is_premium_recording'] = $is_premium_recording;

        return $this;
    }

    /**
     * Gets show_premium_recording_tag
     *
     * @return bool
     */
    public function getShowPremiumRecordingTag()
    {
        return $this->container['show_premium_recording_tag'];
    }

    /**
     * Sets show_premium_recording_tag
     *
     * @param bool $show_premium_recording_tag show_premium_recording_tag
     *
     * @return $this
     */
    public function setShowPremiumRecordingTag($show_premium_recording_tag)
    {
        $this->container['show_premium_recording_tag'] = $show_premium_recording_tag;

        return $this;
    }

    /**
     * Gets recording_chapters
     *
     * @return \BlueJeansMeetingsRestApi\Model\RecordingRecordingChapters[]
     */
    public function getRecordingChapters()
    {
        return $this->container['recording_chapters'];
    }

    /**
     * Sets recording_chapters
     *
     * @param \BlueJeansMeetingsRestApi\Model\RecordingRecordingChapters[] $recording_chapters recording_chapters
     *
     * @return $this
     */
    public function setRecordingChapters($recording_chapters)
    {
        $this->container['recording_chapters'] = $recording_chapters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


