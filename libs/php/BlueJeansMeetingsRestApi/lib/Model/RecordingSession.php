<?php
/**
 * RecordingSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans Meetings REST API
 *
 * ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>
 *
 * OpenAPI spec version: 1.0.4402212019
 * Contact: glenn@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlueJeansMeetingsRestApi\Model;

use \ArrayAccess;
use \BlueJeansMeetingsRestApi\ObjectSerializer;

/**
 * RecordingSession Class Doc Comment
 *
 * @category Class
 * @package  BlueJeansMeetingsRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordingSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordingSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'content_status' => 'string',
        'recording_type' => 'string',
        'content_id' => 'int',
        'thumbnail_url' => 'string',
        'start_time_offset' => 'int',
        'end_time_offset' => 'int',
        'duration' => 'int',
        'started_by' => '\BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy',
        'stopped_by' => '\BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'content_status' => null,
        'recording_type' => null,
        'content_id' => null,
        'thumbnail_url' => null,
        'start_time_offset' => null,
        'end_time_offset' => null,
        'duration' => null,
        'started_by' => null,
        'stopped_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'content_status' => 'contentStatus',
        'recording_type' => 'recordingType',
        'content_id' => 'contentId',
        'thumbnail_url' => 'thumbnailUrl',
        'start_time_offset' => 'startTimeOffset',
        'end_time_offset' => 'endTimeOffset',
        'duration' => 'duration',
        'started_by' => 'startedBy',
        'stopped_by' => 'stoppedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'content_status' => 'setContentStatus',
        'recording_type' => 'setRecordingType',
        'content_id' => 'setContentId',
        'thumbnail_url' => 'setThumbnailUrl',
        'start_time_offset' => 'setStartTimeOffset',
        'end_time_offset' => 'setEndTimeOffset',
        'duration' => 'setDuration',
        'started_by' => 'setStartedBy',
        'stopped_by' => 'setStoppedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'content_status' => 'getContentStatus',
        'recording_type' => 'getRecordingType',
        'content_id' => 'getContentId',
        'thumbnail_url' => 'getThumbnailUrl',
        'start_time_offset' => 'getStartTimeOffset',
        'end_time_offset' => 'getEndTimeOffset',
        'duration' => 'getDuration',
        'started_by' => 'getStartedBy',
        'stopped_by' => 'getStoppedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['content_status'] = isset($data['content_status']) ? $data['content_status'] : null;
        $this->container['recording_type'] = isset($data['recording_type']) ? $data['recording_type'] : null;
        $this->container['content_id'] = isset($data['content_id']) ? $data['content_id'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['start_time_offset'] = isset($data['start_time_offset']) ? $data['start_time_offset'] : null;
        $this->container['end_time_offset'] = isset($data['end_time_offset']) ? $data['end_time_offset'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['started_by'] = isset($data['started_by']) ? $data['started_by'] : null;
        $this->container['stopped_by'] = isset($data['stopped_by']) ? $data['stopped_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_status
     *
     * @return string
     */
    public function getContentStatus()
    {
        return $this->container['content_status'];
    }

    /**
     * Sets content_status
     *
     * @param string $content_status content_status
     *
     * @return $this
     */
    public function setContentStatus($content_status)
    {
        $this->container['content_status'] = $content_status;

        return $this;
    }

    /**
     * Gets recording_type
     *
     * @return string
     */
    public function getRecordingType()
    {
        return $this->container['recording_type'];
    }

    /**
     * Sets recording_type
     *
     * @param string $recording_type recording_type
     *
     * @return $this
     */
    public function setRecordingType($recording_type)
    {
        $this->container['recording_type'] = $recording_type;

        return $this;
    }

    /**
     * Gets content_id
     *
     * @return int
     */
    public function getContentId()
    {
        return $this->container['content_id'];
    }

    /**
     * Sets content_id
     *
     * @param int $content_id content_id
     *
     * @return $this
     */
    public function setContentId($content_id)
    {
        $this->container['content_id'] = $content_id;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url thumbnail_url
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets start_time_offset
     *
     * @return int
     */
    public function getStartTimeOffset()
    {
        return $this->container['start_time_offset'];
    }

    /**
     * Sets start_time_offset
     *
     * @param int $start_time_offset start_time_offset
     *
     * @return $this
     */
    public function setStartTimeOffset($start_time_offset)
    {
        $this->container['start_time_offset'] = $start_time_offset;

        return $this;
    }

    /**
     * Gets end_time_offset
     *
     * @return int
     */
    public function getEndTimeOffset()
    {
        return $this->container['end_time_offset'];
    }

    /**
     * Sets end_time_offset
     *
     * @param int $end_time_offset end_time_offset
     *
     * @return $this
     */
    public function setEndTimeOffset($end_time_offset)
    {
        $this->container['end_time_offset'] = $end_time_offset;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets started_by
     *
     * @return \BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy
     */
    public function getStartedBy()
    {
        return $this->container['started_by'];
    }

    /**
     * Sets started_by
     *
     * @param \BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy $started_by started_by
     *
     * @return $this
     */
    public function setStartedBy($started_by)
    {
        $this->container['started_by'] = $started_by;

        return $this;
    }

    /**
     * Gets stopped_by
     *
     * @return \BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy
     */
    public function getStoppedBy()
    {
        return $this->container['stopped_by'];
    }

    /**
     * Sets stopped_by
     *
     * @param \BlueJeansMeetingsRestApi\Model\RecordingSessionStartedBy $stopped_by stopped_by
     *
     * @return $this
     */
    public function setStoppedBy($stopped_by)
    {
        $this->container['stopped_by'] = $stopped_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


