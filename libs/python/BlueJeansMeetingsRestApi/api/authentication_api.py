# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from BlueJeansMeetingsRestApi.api_client import ApiClient


class AuthenticationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_authorization_code(self, **kwargs):  # noqa: E501
        """Get Authorization Code  # noqa: E501

        This is **not a true REST endpoint**. <br /> This URL should be used by a user's browser-client application to perform authorization. <br />This API call takes the user to a BlueJeans page that allows the user to login and approve application access.<br />Upon completion, the user will be redirected back to the client application with a code return value. <br />**Note**<ul><li>This API is activated through <b> https://bluejeans.com/oauth2/authorize </b></li><li>The API's return code has a very short valid period of <b>30 seconds</b>.</li><li>Your application must call the <b>/oauth2/token?Code</b> API as soon as possible to exchange the authorization code for an access token.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorization_code(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The 32 character client ID generated when you created the client application.
        :param str redirect_uri: The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application.
        :param str state: Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users.
        :param str scope: A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info. Unfortunately, not all operations in the API are available via this authentication method at the current time.
        :param str response_type: The type of authorization you are peforrming.  Set to \"code\".
        :param str app_name: The name of the client application shown to user during authorization.
        :param str app_logo_url: URL to an 84x84 image shown to user during authorization.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_authorization_code_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_authorization_code_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_authorization_code_with_http_info(self, **kwargs):  # noqa: E501
        """Get Authorization Code  # noqa: E501

        This is **not a true REST endpoint**. <br /> This URL should be used by a user's browser-client application to perform authorization. <br />This API call takes the user to a BlueJeans page that allows the user to login and approve application access.<br />Upon completion, the user will be redirected back to the client application with a code return value. <br />**Note**<ul><li>This API is activated through <b> https://bluejeans.com/oauth2/authorize </b></li><li>The API's return code has a very short valid period of <b>30 seconds</b>.</li><li>Your application must call the <b>/oauth2/token?Code</b> API as soon as possible to exchange the authorization code for an access token.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_authorization_code_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The 32 character client ID generated when you created the client application.
        :param str redirect_uri: The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application.
        :param str state: Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users.
        :param str scope: A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info. Unfortunately, not all operations in the API are available via this authentication method at the current time.
        :param str response_type: The type of authorization you are peforrming.  Set to \"code\".
        :param str app_name: The name of the client application shown to user during authorization.
        :param str app_logo_url: URL to an 84x84 image shown to user during authorization.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'redirect_uri', 'state', 'scope', 'response_type', 'app_name', 'app_logo_url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization_code" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501
        if 'redirect_uri' in params:
            query_params.append(('redirectUri', params['redirect_uri']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'response_type' in params:
            query_params.append(('responseType', params['response_type']))  # noqa: E501
        if 'app_name' in params:
            query_params.append(('appName', params['app_name']))  # noqa: E501
        if 'app_logo_url' in params:
            query_params.append(('appLogoUrl', params['app_logo_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/authorize', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_by_client(self, grant_request_client, **kwargs):  # noqa: E501
        """Authentication via Client Grant Type  # noqa: E501

        This API is typically called from an application that needs to make API requests.  The values for the calling parameters, Client ID, and Secret, are provisioned within the BlueJeans Enterprise Administration console.  A BlueJeans administrator must generate these parameters and provide them to the customer/developer. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**client_credentials**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_client(grant_request_client, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestClient grant_request_client: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *client_credentials*. (required)
        :return: GrantClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_by_client_with_http_info(grant_request_client, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_by_client_with_http_info(grant_request_client, **kwargs)  # noqa: E501
            return data

    def get_token_by_client_with_http_info(self, grant_request_client, **kwargs):  # noqa: E501
        """Authentication via Client Grant Type  # noqa: E501

        This API is typically called from an application that needs to make API requests.  The values for the calling parameters, Client ID, and Secret, are provisioned within the BlueJeans Enterprise Administration console.  A BlueJeans administrator must generate these parameters and provide them to the customer/developer. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**client_credentials**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_client_with_http_info(grant_request_client, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestClient grant_request_client: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *client_credentials*. (required)
        :return: GrantClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_client']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_by_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_client' is set
        if ('grant_request_client' not in params or
                params['grant_request_client'] is None):
            raise ValueError("Missing the required parameter `grant_request_client` when calling `get_token_by_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_client' in params:
            body_params = params['grant_request_client']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantClient',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_by_code(self, grant_request_code, **kwargs):  # noqa: E501
        """Authentication via Code Grant Type  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  The user will be redirected here after successfully authorizing BlueJeans to grant the application access.  You must pass to this API the authorization code received from BlueJeans along with the applications OAuth client_id and secret keys.  Include as well a *success URL* to which the user will be redirected upon successful authentication. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**authorization_code**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_code(grant_request_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestCode grant_request_code: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *authorization_code*. (required)
        :return: GrantCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_by_code_with_http_info(grant_request_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_by_code_with_http_info(grant_request_code, **kwargs)  # noqa: E501
            return data

    def get_token_by_code_with_http_info(self, grant_request_code, **kwargs):  # noqa: E501
        """Authentication via Code Grant Type  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  The user will be redirected here after successfully authorizing BlueJeans to grant the application access.  You must pass to this API the authorization code received from BlueJeans along with the applications OAuth client_id and secret keys.  Include as well a *success URL* to which the user will be redirected upon successful authentication. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**authorization_code**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_code_with_http_info(grant_request_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestCode grant_request_code: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *authorization_code*. (required)
        :return: GrantCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_by_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_code' is set
        if ('grant_request_code' not in params or
                params['grant_request_code'] is None):
            raise ValueError("Missing the required parameter `grant_request_code` when calling `get_token_by_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_code' in params:
            body_params = params['grant_request_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantCode',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_by_meeting(self, grant_request_meeting, **kwargs):  # noqa: E501
        """Authentication via Meeting Grant Type  # noqa: E501

        This API uses an OAuth-like grant/request method similar to the Password grant type.  The API returns an access token whose scope is limited to the meeting only. <br />Call this API with the meeting's numeric ID, and the meeting passcode (if one exists). <br />&nbsp;&nbsp;If you call the API with a Moderator passcode, moderator privileges are granted. <br />&nbsp;&nbsp;If an Attendee access code is passed, the access token will grant attendee abilities.<br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**meeting_passcode**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_meeting(grant_request_meeting, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestMeeting grant_request_meeting: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *meeting_passcode*. (required)
        :return: GrantMeeting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_by_meeting_with_http_info(grant_request_meeting, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_by_meeting_with_http_info(grant_request_meeting, **kwargs)  # noqa: E501
            return data

    def get_token_by_meeting_with_http_info(self, grant_request_meeting, **kwargs):  # noqa: E501
        """Authentication via Meeting Grant Type  # noqa: E501

        This API uses an OAuth-like grant/request method similar to the Password grant type.  The API returns an access token whose scope is limited to the meeting only. <br />Call this API with the meeting's numeric ID, and the meeting passcode (if one exists). <br />&nbsp;&nbsp;If you call the API with a Moderator passcode, moderator privileges are granted. <br />&nbsp;&nbsp;If an Attendee access code is passed, the access token will grant attendee abilities.<br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**meeting_passcode**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_meeting_with_http_info(grant_request_meeting, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestMeeting grant_request_meeting: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *meeting_passcode*. (required)
        :return: GrantMeeting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_meeting']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_by_meeting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_meeting' is set
        if ('grant_request_meeting' not in params or
                params['grant_request_meeting'] is None):
            raise ValueError("Missing the required parameter `grant_request_meeting` when calling `get_token_by_meeting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_meeting' in params:
            body_params = params['grant_request_meeting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Meeting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantMeeting',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_by_password(self, grant_request_password, **kwargs):  # noqa: E501
        """Authentication via Password Grant Type  # noqa: E501

        This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**password**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_password(grant_request_password, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestPassword grant_request_password: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *password*. (required)
        :return: GrantPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_by_password_with_http_info(grant_request_password, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_by_password_with_http_info(grant_request_password, **kwargs)  # noqa: E501
            return data

    def get_token_by_password_with_http_info(self, grant_request_password, **kwargs):  # noqa: E501
        """Authentication via Password Grant Type  # noqa: E501

        This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**password**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_password_with_http_info(grant_request_password, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestPassword grant_request_password: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *password*. (required)
        :return: GrantPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_password']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_by_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_password' is set
        if ('grant_request_password' not in params or
                params['grant_request_password'] is None):
            raise ValueError("Missing the required parameter `grant_request_password` when calling `get_token_by_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_password' in params:
            body_params = params['grant_request_password']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantPassword',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_by_refresh(self, grant_request_refresh, **kwargs):  # noqa: E501
        """Authentication via Refresh Grant Type  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  It only works for access tokens obtained via /oauth2/token?Code endpoint. It allows an application to refresh an existing access token.  You must pass to this API your OAuth client and secret keys as well as the current access token being refreshed.  <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**refresh_token**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_refresh(grant_request_refresh, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestRefresh grant_request_refresh: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *refresh_token*. (required)
        :return: GrantRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_by_refresh_with_http_info(grant_request_refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_by_refresh_with_http_info(grant_request_refresh, **kwargs)  # noqa: E501
            return data

    def get_token_by_refresh_with_http_info(self, grant_request_refresh, **kwargs):  # noqa: E501
        """Authentication via Refresh Grant Type  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  It only works for access tokens obtained via /oauth2/token?Code endpoint. It allows an application to refresh an existing access token.  You must pass to this API your OAuth client and secret keys as well as the current access token being refreshed.  <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**refresh_token**\" (string).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_by_refresh_with_http_info(grant_request_refresh, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestRefresh grant_request_refresh: Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *refresh_token*. (required)
        :return: GrantRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_refresh']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_by_refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_refresh' is set
        if ('grant_request_refresh' not in params or
                params['grant_request_refresh'] is None):
            raise ValueError("Missing the required parameter `grant_request_refresh` when calling `get_token_by_refresh`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_refresh' in params:
            body_params = params['grant_request_refresh']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['access_token']  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_info(self, **kwargs):  # noqa: E501
        """Validate a Token  # noqa: E501

        This endpoint will determine if a token is valid or not.  If the token is valid, it returns the user ID for the owner of the token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_token_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_token_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_token_info_with_http_info(self, **kwargs):  # noqa: E501
        """Validate a Token  # noqa: E501

        This endpoint will determine if a token is valid or not.  If the token is valid, it returns the user ID for the owner of the token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_token_info_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/tokenInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_access_token(self, grant_request_revoke, **kwargs):  # noqa: E501
        """Revoke Access Token  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.revoke_access_token(grant_request_revoke, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestRevoke grant_request_revoke: Contains information about the type of grant you are revoking. (required)
        :param str access_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.revoke_access_token_with_http_info(grant_request_revoke, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_access_token_with_http_info(grant_request_revoke, **kwargs)  # noqa: E501
            return data

    def revoke_access_token_with_http_info(self, grant_request_revoke, **kwargs):  # noqa: E501
        """Revoke Access Token  # noqa: E501

        This API is part of the 3-legged OAuth 2.0 authorization flow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.revoke_access_token_with_http_info(grant_request_revoke, async=True)
        >>> result = thread.get()

        :param async bool
        :param GrantRequestRevoke grant_request_revoke: Contains information about the type of grant you are revoking. (required)
        :param str access_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_request_revoke', 'access_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_request_revoke' is set
        if ('grant_request_revoke' not in params or
                params['grant_request_revoke'] is None):
            raise ValueError("Missing the required parameter `grant_request_revoke` when calling `revoke_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grant_request_revoke' in params:
            body_params = params['grant_request_revoke']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['access_token']  # noqa: E501

        return self.api_client.call_api(
            '/oauth2/token?Revoke', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
