# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsEndpointDistributionDistribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'google': 'int',
        'telepresence': 'int',
        'lync': 'int',
        'i_os': 'int',
        'h323': 'int',
        'inter_call': 'int',
        'jabber': 'int',
        'android': 'int',
        'skype': 'int',
        'isdn': 'int',
        'pstn': 'int',
        'level3': 'int',
        'sip': 'int',
        'blue_jeans_app': 'int',
        'browser': 'int',
        'web_rtc': 'int'
    }

    attribute_map = {
        'google': 'Google',
        'telepresence': 'Telepresence',
        'lync': 'Lync',
        'i_os': 'iOS',
        'h323': 'H323',
        'inter_call': 'InterCall',
        'jabber': 'Jabber',
        'android': 'Android',
        'skype': 'Skype',
        'isdn': 'ISDN',
        'pstn': 'PSTN',
        'level3': 'Level3',
        'sip': 'SIP',
        'blue_jeans_app': 'BlueJeansApp',
        'browser': 'Browser',
        'web_rtc': 'WebRTC'
    }

    def __init__(self, google=None, telepresence=None, lync=None, i_os=None, h323=None, inter_call=None, jabber=None, android=None, skype=None, isdn=None, pstn=None, level3=None, sip=None, blue_jeans_app=None, browser=None, web_rtc=None):  # noqa: E501
        """AnalyticsEndpointDistributionDistribution - a model defined in Swagger"""  # noqa: E501

        self._google = None
        self._telepresence = None
        self._lync = None
        self._i_os = None
        self._h323 = None
        self._inter_call = None
        self._jabber = None
        self._android = None
        self._skype = None
        self._isdn = None
        self._pstn = None
        self._level3 = None
        self._sip = None
        self._blue_jeans_app = None
        self._browser = None
        self._web_rtc = None
        self.discriminator = None

        if google is not None:
            self.google = google
        if telepresence is not None:
            self.telepresence = telepresence
        if lync is not None:
            self.lync = lync
        if i_os is not None:
            self.i_os = i_os
        if h323 is not None:
            self.h323 = h323
        if inter_call is not None:
            self.inter_call = inter_call
        if jabber is not None:
            self.jabber = jabber
        if android is not None:
            self.android = android
        if skype is not None:
            self.skype = skype
        if isdn is not None:
            self.isdn = isdn
        if pstn is not None:
            self.pstn = pstn
        if level3 is not None:
            self.level3 = level3
        if sip is not None:
            self.sip = sip
        if blue_jeans_app is not None:
            self.blue_jeans_app = blue_jeans_app
        if browser is not None:
            self.browser = browser
        if web_rtc is not None:
            self.web_rtc = web_rtc

    @property
    def google(self):
        """Gets the google of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The google of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._google

    @google.setter
    def google(self, google):
        """Sets the google of this AnalyticsEndpointDistributionDistribution.


        :param google: The google of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._google = google

    @property
    def telepresence(self):
        """Gets the telepresence of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The telepresence of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._telepresence

    @telepresence.setter
    def telepresence(self, telepresence):
        """Sets the telepresence of this AnalyticsEndpointDistributionDistribution.


        :param telepresence: The telepresence of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._telepresence = telepresence

    @property
    def lync(self):
        """Gets the lync of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The lync of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._lync

    @lync.setter
    def lync(self, lync):
        """Sets the lync of this AnalyticsEndpointDistributionDistribution.


        :param lync: The lync of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._lync = lync

    @property
    def i_os(self):
        """Gets the i_os of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The i_os of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._i_os

    @i_os.setter
    def i_os(self, i_os):
        """Sets the i_os of this AnalyticsEndpointDistributionDistribution.


        :param i_os: The i_os of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._i_os = i_os

    @property
    def h323(self):
        """Gets the h323 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The h323 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._h323

    @h323.setter
    def h323(self, h323):
        """Sets the h323 of this AnalyticsEndpointDistributionDistribution.


        :param h323: The h323 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._h323 = h323

    @property
    def inter_call(self):
        """Gets the inter_call of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The inter_call of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._inter_call

    @inter_call.setter
    def inter_call(self, inter_call):
        """Sets the inter_call of this AnalyticsEndpointDistributionDistribution.


        :param inter_call: The inter_call of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._inter_call = inter_call

    @property
    def jabber(self):
        """Gets the jabber of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The jabber of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._jabber

    @jabber.setter
    def jabber(self, jabber):
        """Sets the jabber of this AnalyticsEndpointDistributionDistribution.


        :param jabber: The jabber of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._jabber = jabber

    @property
    def android(self):
        """Gets the android of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The android of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this AnalyticsEndpointDistributionDistribution.


        :param android: The android of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._android = android

    @property
    def skype(self):
        """Gets the skype of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The skype of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._skype

    @skype.setter
    def skype(self, skype):
        """Sets the skype of this AnalyticsEndpointDistributionDistribution.


        :param skype: The skype of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._skype = skype

    @property
    def isdn(self):
        """Gets the isdn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The isdn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._isdn

    @isdn.setter
    def isdn(self, isdn):
        """Sets the isdn of this AnalyticsEndpointDistributionDistribution.


        :param isdn: The isdn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._isdn = isdn

    @property
    def pstn(self):
        """Gets the pstn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The pstn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._pstn

    @pstn.setter
    def pstn(self, pstn):
        """Sets the pstn of this AnalyticsEndpointDistributionDistribution.


        :param pstn: The pstn of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._pstn = pstn

    @property
    def level3(self):
        """Gets the level3 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The level3 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._level3

    @level3.setter
    def level3(self, level3):
        """Sets the level3 of this AnalyticsEndpointDistributionDistribution.


        :param level3: The level3 of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._level3 = level3

    @property
    def sip(self):
        """Gets the sip of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The sip of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._sip

    @sip.setter
    def sip(self, sip):
        """Sets the sip of this AnalyticsEndpointDistributionDistribution.


        :param sip: The sip of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._sip = sip

    @property
    def blue_jeans_app(self):
        """Gets the blue_jeans_app of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The blue_jeans_app of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._blue_jeans_app

    @blue_jeans_app.setter
    def blue_jeans_app(self, blue_jeans_app):
        """Sets the blue_jeans_app of this AnalyticsEndpointDistributionDistribution.


        :param blue_jeans_app: The blue_jeans_app of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._blue_jeans_app = blue_jeans_app

    @property
    def browser(self):
        """Gets the browser of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The browser of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this AnalyticsEndpointDistributionDistribution.


        :param browser: The browser of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._browser = browser

    @property
    def web_rtc(self):
        """Gets the web_rtc of this AnalyticsEndpointDistributionDistribution.  # noqa: E501


        :return: The web_rtc of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :rtype: int
        """
        return self._web_rtc

    @web_rtc.setter
    def web_rtc(self, web_rtc):
        """Sets the web_rtc of this AnalyticsEndpointDistributionDistribution.


        :param web_rtc: The web_rtc of this AnalyticsEndpointDistributionDistribution.  # noqa: E501
        :type: int
        """

        self._web_rtc = web_rtc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsEndpointDistributionDistribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsEndpointDistributionDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
