# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsFeedbackCommentsComments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'qualaroo_feedback': 'str',
        'meeting_uuid': 'str',
        'callguid': 'str',
        'qualaroo_comments': 'str'
    }

    attribute_map = {
        'qualaroo_feedback': 'qualaroo_feedback',
        'meeting_uuid': 'meeting_uuid',
        'callguid': 'callguid',
        'qualaroo_comments': 'qualaroo_comments'
    }

    def __init__(self, qualaroo_feedback=None, meeting_uuid=None, callguid=None, qualaroo_comments=None):  # noqa: E501
        """AnalyticsFeedbackCommentsComments - a model defined in Swagger"""  # noqa: E501

        self._qualaroo_feedback = None
        self._meeting_uuid = None
        self._callguid = None
        self._qualaroo_comments = None
        self.discriminator = None

        if qualaroo_feedback is not None:
            self.qualaroo_feedback = qualaroo_feedback
        if meeting_uuid is not None:
            self.meeting_uuid = meeting_uuid
        if callguid is not None:
            self.callguid = callguid
        if qualaroo_comments is not None:
            self.qualaroo_comments = qualaroo_comments

    @property
    def qualaroo_feedback(self):
        """Gets the qualaroo_feedback of this AnalyticsFeedbackCommentsComments.  # noqa: E501

        The comment rating left by the user.  # noqa: E501

        :return: The qualaroo_feedback of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :rtype: str
        """
        return self._qualaroo_feedback

    @qualaroo_feedback.setter
    def qualaroo_feedback(self, qualaroo_feedback):
        """Sets the qualaroo_feedback of this AnalyticsFeedbackCommentsComments.

        The comment rating left by the user.  # noqa: E501

        :param qualaroo_feedback: The qualaroo_feedback of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :type: str
        """

        self._qualaroo_feedback = qualaroo_feedback

    @property
    def meeting_uuid(self):
        """Gets the meeting_uuid of this AnalyticsFeedbackCommentsComments.  # noqa: E501

        The UUID of the meeting.  # noqa: E501

        :return: The meeting_uuid of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :rtype: str
        """
        return self._meeting_uuid

    @meeting_uuid.setter
    def meeting_uuid(self, meeting_uuid):
        """Sets the meeting_uuid of this AnalyticsFeedbackCommentsComments.

        The UUID of the meeting.  # noqa: E501

        :param meeting_uuid: The meeting_uuid of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :type: str
        """

        self._meeting_uuid = meeting_uuid

    @property
    def callguid(self):
        """Gets the callguid of this AnalyticsFeedbackCommentsComments.  # noqa: E501


        :return: The callguid of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :rtype: str
        """
        return self._callguid

    @callguid.setter
    def callguid(self, callguid):
        """Sets the callguid of this AnalyticsFeedbackCommentsComments.


        :param callguid: The callguid of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :type: str
        """

        self._callguid = callguid

    @property
    def qualaroo_comments(self):
        """Gets the qualaroo_comments of this AnalyticsFeedbackCommentsComments.  # noqa: E501

        The comment left by the user.  # noqa: E501

        :return: The qualaroo_comments of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :rtype: str
        """
        return self._qualaroo_comments

    @qualaroo_comments.setter
    def qualaroo_comments(self, qualaroo_comments):
        """Sets the qualaroo_comments of this AnalyticsFeedbackCommentsComments.

        The comment left by the user.  # noqa: E501

        :param qualaroo_comments: The qualaroo_comments of this AnalyticsFeedbackCommentsComments.  # noqa: E501
        :type: str
        """

        self._qualaroo_comments = qualaroo_comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsFeedbackCommentsComments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsFeedbackCommentsComments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
