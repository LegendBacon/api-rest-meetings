# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.content_content_properties import ContentContentProperties  # noqa: F401,E501


class Content(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content_type': 'str',
        'content_description': 'str',
        'content_url': 'str',
        'user_id': 'int',
        'content_location': 'str',
        'created': 'int',
        'modified': 'int',
        'content_status': 'str',
        'content_name': 'str',
        'content_category': 'str',
        'content_size': 'int',
        'content_duration': 'int',
        'content_properties': 'ContentContentProperties'
    }

    attribute_map = {
        'id': 'id',
        'content_type': 'contentType',
        'content_description': 'contentDescription',
        'content_url': 'contentUrl',
        'user_id': 'userId',
        'content_location': 'contentLocation',
        'created': 'created',
        'modified': 'modified',
        'content_status': 'contentStatus',
        'content_name': 'contentName',
        'content_category': 'contentCategory',
        'content_size': 'contentSize',
        'content_duration': 'contentDuration',
        'content_properties': 'contentProperties'
    }

    def __init__(self, id=None, content_type=None, content_description=None, content_url=None, user_id=None, content_location=None, created=None, modified=None, content_status=None, content_name=None, content_category=None, content_size=None, content_duration=None, content_properties=None):  # noqa: E501
        """Content - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._content_type = None
        self._content_description = None
        self._content_url = None
        self._user_id = None
        self._content_location = None
        self._created = None
        self._modified = None
        self._content_status = None
        self._content_name = None
        self._content_category = None
        self._content_size = None
        self._content_duration = None
        self._content_properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if content_type is not None:
            self.content_type = content_type
        if content_description is not None:
            self.content_description = content_description
        if content_url is not None:
            self.content_url = content_url
        if user_id is not None:
            self.user_id = user_id
        if content_location is not None:
            self.content_location = content_location
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if content_status is not None:
            self.content_status = content_status
        if content_name is not None:
            self.content_name = content_name
        if content_category is not None:
            self.content_category = content_category
        if content_size is not None:
            self.content_size = content_size
        if content_duration is not None:
            self.content_duration = content_duration
        if content_properties is not None:
            self.content_properties = content_properties

    @property
    def id(self):
        """Gets the id of this Content.  # noqa: E501


        :return: The id of this Content.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Content.


        :param id: The id of this Content.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content_type(self):
        """Gets the content_type of this Content.  # noqa: E501


        :return: The content_type of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Content.


        :param content_type: The content_type of this Content.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content_description(self):
        """Gets the content_description of this Content.  # noqa: E501


        :return: The content_description of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_description

    @content_description.setter
    def content_description(self, content_description):
        """Sets the content_description of this Content.


        :param content_description: The content_description of this Content.  # noqa: E501
        :type: str
        """

        self._content_description = content_description

    @property
    def content_url(self):
        """Gets the content_url of this Content.  # noqa: E501


        :return: The content_url of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this Content.


        :param content_url: The content_url of this Content.  # noqa: E501
        :type: str
        """

        self._content_url = content_url

    @property
    def user_id(self):
        """Gets the user_id of this Content.  # noqa: E501


        :return: The user_id of this Content.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Content.


        :param user_id: The user_id of this Content.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def content_location(self):
        """Gets the content_location of this Content.  # noqa: E501


        :return: The content_location of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_location

    @content_location.setter
    def content_location(self, content_location):
        """Sets the content_location of this Content.


        :param content_location: The content_location of this Content.  # noqa: E501
        :type: str
        """

        self._content_location = content_location

    @property
    def created(self):
        """Gets the created of this Content.  # noqa: E501


        :return: The created of this Content.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Content.


        :param created: The created of this Content.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Content.  # noqa: E501


        :return: The modified of this Content.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Content.


        :param modified: The modified of this Content.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def content_status(self):
        """Gets the content_status of this Content.  # noqa: E501


        :return: The content_status of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_status

    @content_status.setter
    def content_status(self, content_status):
        """Sets the content_status of this Content.


        :param content_status: The content_status of this Content.  # noqa: E501
        :type: str
        """

        self._content_status = content_status

    @property
    def content_name(self):
        """Gets the content_name of this Content.  # noqa: E501


        :return: The content_name of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_name

    @content_name.setter
    def content_name(self, content_name):
        """Sets the content_name of this Content.


        :param content_name: The content_name of this Content.  # noqa: E501
        :type: str
        """

        self._content_name = content_name

    @property
    def content_category(self):
        """Gets the content_category of this Content.  # noqa: E501


        :return: The content_category of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_category

    @content_category.setter
    def content_category(self, content_category):
        """Sets the content_category of this Content.


        :param content_category: The content_category of this Content.  # noqa: E501
        :type: str
        """

        self._content_category = content_category

    @property
    def content_size(self):
        """Gets the content_size of this Content.  # noqa: E501


        :return: The content_size of this Content.  # noqa: E501
        :rtype: int
        """
        return self._content_size

    @content_size.setter
    def content_size(self, content_size):
        """Sets the content_size of this Content.


        :param content_size: The content_size of this Content.  # noqa: E501
        :type: int
        """

        self._content_size = content_size

    @property
    def content_duration(self):
        """Gets the content_duration of this Content.  # noqa: E501


        :return: The content_duration of this Content.  # noqa: E501
        :rtype: int
        """
        return self._content_duration

    @content_duration.setter
    def content_duration(self, content_duration):
        """Sets the content_duration of this Content.


        :param content_duration: The content_duration of this Content.  # noqa: E501
        :type: int
        """

        self._content_duration = content_duration

    @property
    def content_properties(self):
        """Gets the content_properties of this Content.  # noqa: E501


        :return: The content_properties of this Content.  # noqa: E501
        :rtype: ContentContentProperties
        """
        return self._content_properties

    @content_properties.setter
    def content_properties(self, content_properties):
        """Sets the content_properties of this Content.


        :param content_properties: The content_properties of this Content.  # noqa: E501
        :type: ContentContentProperties
        """

        self._content_properties = content_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Content, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Content):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
