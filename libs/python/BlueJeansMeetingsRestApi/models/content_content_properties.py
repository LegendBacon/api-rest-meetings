# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.content_content_properties_levels import ContentContentPropertiesLevels  # noqa: F401,E501


class ContentContentProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'int',
        'thumbnail': 'str',
        'thumbnail_sprite': 'str',
        'hds_url': 'str',
        'thumbnail_count': 'int',
        'thumbnail_width': 'int',
        'thumbnail_height': 'int',
        'thumbnail_interval': 'int',
        'hls_url': 'str',
        'levels': 'list[ContentContentPropertiesLevels]'
    }

    attribute_map = {
        'duration': 'duration',
        'thumbnail': 'thumbnail',
        'thumbnail_sprite': 'thumbnailSprite',
        'hds_url': 'hdsUrl',
        'thumbnail_count': 'thumbnailCount',
        'thumbnail_width': 'thumbnailWidth',
        'thumbnail_height': 'thumbnailHeight',
        'thumbnail_interval': 'thumbnailInterval',
        'hls_url': 'hlsUrl',
        'levels': 'levels'
    }

    def __init__(self, duration=None, thumbnail=None, thumbnail_sprite=None, hds_url=None, thumbnail_count=None, thumbnail_width=None, thumbnail_height=None, thumbnail_interval=None, hls_url=None, levels=None):  # noqa: E501
        """ContentContentProperties - a model defined in Swagger"""  # noqa: E501

        self._duration = None
        self._thumbnail = None
        self._thumbnail_sprite = None
        self._hds_url = None
        self._thumbnail_count = None
        self._thumbnail_width = None
        self._thumbnail_height = None
        self._thumbnail_interval = None
        self._hls_url = None
        self._levels = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if thumbnail_sprite is not None:
            self.thumbnail_sprite = thumbnail_sprite
        if hds_url is not None:
            self.hds_url = hds_url
        if thumbnail_count is not None:
            self.thumbnail_count = thumbnail_count
        if thumbnail_width is not None:
            self.thumbnail_width = thumbnail_width
        if thumbnail_height is not None:
            self.thumbnail_height = thumbnail_height
        if thumbnail_interval is not None:
            self.thumbnail_interval = thumbnail_interval
        if hls_url is not None:
            self.hls_url = hls_url
        if levels is not None:
            self.levels = levels

    @property
    def duration(self):
        """Gets the duration of this ContentContentProperties.  # noqa: E501


        :return: The duration of this ContentContentProperties.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ContentContentProperties.


        :param duration: The duration of this ContentContentProperties.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def thumbnail(self):
        """Gets the thumbnail of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail of this ContentContentProperties.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this ContentContentProperties.


        :param thumbnail: The thumbnail of this ContentContentProperties.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_sprite(self):
        """Gets the thumbnail_sprite of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail_sprite of this ContentContentProperties.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_sprite

    @thumbnail_sprite.setter
    def thumbnail_sprite(self, thumbnail_sprite):
        """Sets the thumbnail_sprite of this ContentContentProperties.


        :param thumbnail_sprite: The thumbnail_sprite of this ContentContentProperties.  # noqa: E501
        :type: str
        """

        self._thumbnail_sprite = thumbnail_sprite

    @property
    def hds_url(self):
        """Gets the hds_url of this ContentContentProperties.  # noqa: E501


        :return: The hds_url of this ContentContentProperties.  # noqa: E501
        :rtype: str
        """
        return self._hds_url

    @hds_url.setter
    def hds_url(self, hds_url):
        """Sets the hds_url of this ContentContentProperties.


        :param hds_url: The hds_url of this ContentContentProperties.  # noqa: E501
        :type: str
        """

        self._hds_url = hds_url

    @property
    def thumbnail_count(self):
        """Gets the thumbnail_count of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail_count of this ContentContentProperties.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_count

    @thumbnail_count.setter
    def thumbnail_count(self, thumbnail_count):
        """Sets the thumbnail_count of this ContentContentProperties.


        :param thumbnail_count: The thumbnail_count of this ContentContentProperties.  # noqa: E501
        :type: int
        """

        self._thumbnail_count = thumbnail_count

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail_width of this ContentContentProperties.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this ContentContentProperties.


        :param thumbnail_width: The thumbnail_width of this ContentContentProperties.  # noqa: E501
        :type: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail_height of this ContentContentProperties.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this ContentContentProperties.


        :param thumbnail_height: The thumbnail_height of this ContentContentProperties.  # noqa: E501
        :type: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_interval(self):
        """Gets the thumbnail_interval of this ContentContentProperties.  # noqa: E501


        :return: The thumbnail_interval of this ContentContentProperties.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_interval

    @thumbnail_interval.setter
    def thumbnail_interval(self, thumbnail_interval):
        """Sets the thumbnail_interval of this ContentContentProperties.


        :param thumbnail_interval: The thumbnail_interval of this ContentContentProperties.  # noqa: E501
        :type: int
        """

        self._thumbnail_interval = thumbnail_interval

    @property
    def hls_url(self):
        """Gets the hls_url of this ContentContentProperties.  # noqa: E501


        :return: The hls_url of this ContentContentProperties.  # noqa: E501
        :rtype: str
        """
        return self._hls_url

    @hls_url.setter
    def hls_url(self, hls_url):
        """Sets the hls_url of this ContentContentProperties.


        :param hls_url: The hls_url of this ContentContentProperties.  # noqa: E501
        :type: str
        """

        self._hls_url = hls_url

    @property
    def levels(self):
        """Gets the levels of this ContentContentProperties.  # noqa: E501


        :return: The levels of this ContentContentProperties.  # noqa: E501
        :rtype: list[ContentContentPropertiesLevels]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this ContentContentProperties.


        :param levels: The levels of this ContentContentProperties.  # noqa: E501
        :type: list[ContentContentPropertiesLevels]
        """

        self._levels = levels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentContentProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentContentProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
