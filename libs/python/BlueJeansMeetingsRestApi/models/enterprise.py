# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Enterprise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'enterprise': 'int',
        'enterprise_admin': 'bool',
        'join_date': 'int',
        'expiry_date': 'int'
    }

    attribute_map = {
        'id': 'id',
        'enterprise': 'enterprise',
        'enterprise_admin': 'enterpriseAdmin',
        'join_date': 'joinDate',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, id=None, enterprise=None, enterprise_admin=None, join_date=None, expiry_date=None):  # noqa: E501
        """Enterprise - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._enterprise = None
        self._enterprise_admin = None
        self._join_date = None
        self._expiry_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if enterprise is not None:
            self.enterprise = enterprise
        if enterprise_admin is not None:
            self.enterprise_admin = enterprise_admin
        if join_date is not None:
            self.join_date = join_date
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def id(self):
        """Gets the id of this Enterprise.  # noqa: E501

        Unique identifier for the user.  # noqa: E501

        :return: The id of this Enterprise.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Enterprise.

        Unique identifier for the user.  # noqa: E501

        :param id: The id of this Enterprise.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def enterprise(self):
        """Gets the enterprise of this Enterprise.  # noqa: E501

        Unique identifier for the enterprise.  # noqa: E501

        :return: The enterprise of this Enterprise.  # noqa: E501
        :rtype: int
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this Enterprise.

        Unique identifier for the enterprise.  # noqa: E501

        :param enterprise: The enterprise of this Enterprise.  # noqa: E501
        :type: int
        """

        self._enterprise = enterprise

    @property
    def enterprise_admin(self):
        """Gets the enterprise_admin of this Enterprise.  # noqa: E501

        Is this user an administrator for this enterprise?  # noqa: E501

        :return: The enterprise_admin of this Enterprise.  # noqa: E501
        :rtype: bool
        """
        return self._enterprise_admin

    @enterprise_admin.setter
    def enterprise_admin(self, enterprise_admin):
        """Sets the enterprise_admin of this Enterprise.

        Is this user an administrator for this enterprise?  # noqa: E501

        :param enterprise_admin: The enterprise_admin of this Enterprise.  # noqa: E501
        :type: bool
        """

        self._enterprise_admin = enterprise_admin

    @property
    def join_date(self):
        """Gets the join_date of this Enterprise.  # noqa: E501

        Date of enterprise join  # noqa: E501

        :return: The join_date of this Enterprise.  # noqa: E501
        :rtype: int
        """
        return self._join_date

    @join_date.setter
    def join_date(self, join_date):
        """Sets the join_date of this Enterprise.

        Date of enterprise join  # noqa: E501

        :param join_date: The join_date of this Enterprise.  # noqa: E501
        :type: int
        """

        self._join_date = join_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Enterprise.  # noqa: E501

        Date of expiration; null if not set  # noqa: E501

        :return: The expiry_date of this Enterprise.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Enterprise.

        Date of expiration; null if not set  # noqa: E501

        :param expiry_date: The expiry_date of this Enterprise.  # noqa: E501
        :type: int
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Enterprise, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enterprise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
