# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilterObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'value': 'str',
        'field': 'str',
        'comparison': 'str'
    }

    attribute_map = {
        'type': 'type',
        'value': 'value',
        'field': 'field',
        'comparison': 'comparison'
    }

    def __init__(self, type=None, value=None, field=None, comparison=None):  # noqa: E501
        """FilterObject - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._value = None
        self._field = None
        self._comparison = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if field is not None:
            self.field = field
        if comparison is not None:
            self.comparison = comparison

    @property
    def type(self):
        """Gets the type of this FilterObject.  # noqa: E501

        The data type of the comparison variable as selected from this list  # noqa: E501

        :return: The type of this FilterObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FilterObject.

        The data type of the comparison variable as selected from this list  # noqa: E501

        :param type: The type of this FilterObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "boolean", "numeric", "date", "list"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this FilterObject.  # noqa: E501

        Value for comparison testing.  A time field must be formatted as yyyy-mm-ddThh:mm:ss (gmt offset). Example 2018-05-10T23:59:00-07:00  # noqa: E501

        :return: The value of this FilterObject.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FilterObject.

        Value for comparison testing.  A time field must be formatted as yyyy-mm-ddThh:mm:ss (gmt offset). Example 2018-05-10T23:59:00-07:00  # noqa: E501

        :param value: The value of this FilterObject.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def field(self):
        """Gets the field of this FilterObject.  # noqa: E501

        One of the BlueJeans meetings fields selected from this list to be used for comparison testing  # noqa: E501

        :return: The field of this FilterObject.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FilterObject.

        One of the BlueJeans meetings fields selected from this list to be used for comparison testing  # noqa: E501

        :param field: The field of this FilterObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["startTime", "endTime", "meetingUUID", "userId", "enterpriseId"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def comparison(self):
        """Gets the comparison of this FilterObject.  # noqa: E501

        A comparison operator selected from this list- less than, greater than, equal,and in  # noqa: E501

        :return: The comparison of this FilterObject.  # noqa: E501
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this FilterObject.

        A comparison operator selected from this list- less than, greater than, equal,and in  # noqa: E501

        :param comparison: The comparison of this FilterObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["lt", "gt", "eq", "in"]  # noqa: E501
        if comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison` ({0}), must be one of {1}"  # noqa: E501
                .format(comparison, allowed_values)
            )

        self._comparison = comparison

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
