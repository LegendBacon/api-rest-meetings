# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrantMeetingScopeMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'leader_id': 'int',
        'meeting_numeric_id': 'str',
        'meeting_uri': 'str',
        'is_moderator': 'bool',
        'endpoint_uri_set': 'list[object]',
        'meeting_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'leader_id': 'leaderId',
        'meeting_numeric_id': 'meetingNumericId',
        'meeting_uri': 'meetingUri',
        'is_moderator': 'isModerator',
        'endpoint_uri_set': 'endpointUriSet',
        'meeting_id': 'meetingId'
    }

    def __init__(self, id=None, leader_id=None, meeting_numeric_id=None, meeting_uri=None, is_moderator=None, endpoint_uri_set=None, meeting_id=None):  # noqa: E501
        """GrantMeetingScopeMeeting - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._leader_id = None
        self._meeting_numeric_id = None
        self._meeting_uri = None
        self._is_moderator = None
        self._endpoint_uri_set = None
        self._meeting_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if leader_id is not None:
            self.leader_id = leader_id
        if meeting_numeric_id is not None:
            self.meeting_numeric_id = meeting_numeric_id
        if meeting_uri is not None:
            self.meeting_uri = meeting_uri
        if is_moderator is not None:
            self.is_moderator = is_moderator
        if endpoint_uri_set is not None:
            self.endpoint_uri_set = endpoint_uri_set
        if meeting_id is not None:
            self.meeting_id = meeting_id

    @property
    def id(self):
        """Gets the id of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The id of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrantMeetingScopeMeeting.


        :param id: The id of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def leader_id(self):
        """Gets the leader_id of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The leader_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: int
        """
        return self._leader_id

    @leader_id.setter
    def leader_id(self, leader_id):
        """Sets the leader_id of this GrantMeetingScopeMeeting.


        :param leader_id: The leader_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: int
        """

        self._leader_id = leader_id

    @property
    def meeting_numeric_id(self):
        """Gets the meeting_numeric_id of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The meeting_numeric_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._meeting_numeric_id

    @meeting_numeric_id.setter
    def meeting_numeric_id(self, meeting_numeric_id):
        """Sets the meeting_numeric_id of this GrantMeetingScopeMeeting.


        :param meeting_numeric_id: The meeting_numeric_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: str
        """

        self._meeting_numeric_id = meeting_numeric_id

    @property
    def meeting_uri(self):
        """Gets the meeting_uri of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The meeting_uri of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._meeting_uri

    @meeting_uri.setter
    def meeting_uri(self, meeting_uri):
        """Sets the meeting_uri of this GrantMeetingScopeMeeting.


        :param meeting_uri: The meeting_uri of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: str
        """

        self._meeting_uri = meeting_uri

    @property
    def is_moderator(self):
        """Gets the is_moderator of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The is_moderator of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._is_moderator

    @is_moderator.setter
    def is_moderator(self, is_moderator):
        """Sets the is_moderator of this GrantMeetingScopeMeeting.


        :param is_moderator: The is_moderator of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: bool
        """

        self._is_moderator = is_moderator

    @property
    def endpoint_uri_set(self):
        """Gets the endpoint_uri_set of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The endpoint_uri_set of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: list[object]
        """
        return self._endpoint_uri_set

    @endpoint_uri_set.setter
    def endpoint_uri_set(self, endpoint_uri_set):
        """Sets the endpoint_uri_set of this GrantMeetingScopeMeeting.


        :param endpoint_uri_set: The endpoint_uri_set of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: list[object]
        """

        self._endpoint_uri_set = endpoint_uri_set

    @property
    def meeting_id(self):
        """Gets the meeting_id of this GrantMeetingScopeMeeting.  # noqa: E501


        :return: The meeting_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this GrantMeetingScopeMeeting.


        :param meeting_id: The meeting_id of this GrantMeetingScopeMeeting.  # noqa: E501
        :type: str
        """

        self._meeting_id = meeting_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantMeetingScopeMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantMeetingScopeMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
