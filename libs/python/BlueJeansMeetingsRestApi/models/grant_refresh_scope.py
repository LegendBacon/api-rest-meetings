# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.grant_code_scope_app_permissions import GrantCodeScopeAppPermissions  # noqa: F401,E501
from BlueJeansMeetingsRestApi.models.partition import Partition  # noqa: F401,E501


class GrantRefreshScope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'int',
        'app_permissions': 'list[GrantCodeScopeAppPermissions]',
        'partition_name': 'str',
        'partition': 'Partition',
        'bearer_permissions': 'str'
    }

    attribute_map = {
        'user': 'user',
        'app_permissions': 'appPermissions',
        'partition_name': 'partitionName',
        'partition': 'partition',
        'bearer_permissions': 'bearerPermissions'
    }

    def __init__(self, user=None, app_permissions=None, partition_name=None, partition=None, bearer_permissions=None):  # noqa: E501
        """GrantRefreshScope - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._app_permissions = None
        self._partition_name = None
        self._partition = None
        self._bearer_permissions = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if app_permissions is not None:
            self.app_permissions = app_permissions
        if partition_name is not None:
            self.partition_name = partition_name
        if partition is not None:
            self.partition = partition
        if bearer_permissions is not None:
            self.bearer_permissions = bearer_permissions

    @property
    def user(self):
        """Gets the user of this GrantRefreshScope.  # noqa: E501

        The ID of your user.  # noqa: E501

        :return: The user of this GrantRefreshScope.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GrantRefreshScope.

        The ID of your user.  # noqa: E501

        :param user: The user of this GrantRefreshScope.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def app_permissions(self):
        """Gets the app_permissions of this GrantRefreshScope.  # noqa: E501


        :return: The app_permissions of this GrantRefreshScope.  # noqa: E501
        :rtype: list[GrantCodeScopeAppPermissions]
        """
        return self._app_permissions

    @app_permissions.setter
    def app_permissions(self, app_permissions):
        """Sets the app_permissions of this GrantRefreshScope.


        :param app_permissions: The app_permissions of this GrantRefreshScope.  # noqa: E501
        :type: list[GrantCodeScopeAppPermissions]
        """

        self._app_permissions = app_permissions

    @property
    def partition_name(self):
        """Gets the partition_name of this GrantRefreshScope.  # noqa: E501

        The name of the partition you are on.  # noqa: E501

        :return: The partition_name of this GrantRefreshScope.  # noqa: E501
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this GrantRefreshScope.

        The name of the partition you are on.  # noqa: E501

        :param partition_name: The partition_name of this GrantRefreshScope.  # noqa: E501
        :type: str
        """

        self._partition_name = partition_name

    @property
    def partition(self):
        """Gets the partition of this GrantRefreshScope.  # noqa: E501


        :return: The partition of this GrantRefreshScope.  # noqa: E501
        :rtype: Partition
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this GrantRefreshScope.


        :param partition: The partition of this GrantRefreshScope.  # noqa: E501
        :type: Partition
        """

        self._partition = partition

    @property
    def bearer_permissions(self):
        """Gets the bearer_permissions of this GrantRefreshScope.  # noqa: E501

        Comma-delimited list of scopes authorized by this token.  # noqa: E501

        :return: The bearer_permissions of this GrantRefreshScope.  # noqa: E501
        :rtype: str
        """
        return self._bearer_permissions

    @bearer_permissions.setter
    def bearer_permissions(self, bearer_permissions):
        """Sets the bearer_permissions of this GrantRefreshScope.

        Comma-delimited list of scopes authorized by this token.  # noqa: E501

        :param bearer_permissions: The bearer_permissions of this GrantRefreshScope.  # noqa: E501
        :type: str
        """

        self._bearer_permissions = bearer_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantRefreshScope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantRefreshScope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
