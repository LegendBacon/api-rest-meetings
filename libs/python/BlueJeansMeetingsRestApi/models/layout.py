# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Layout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layout_mode': 'str',
        'sub_layout_mode': 'str'
    }

    attribute_map = {
        'layout_mode': 'layoutMode',
        'sub_layout_mode': 'subLayoutMode'
    }

    def __init__(self, layout_mode=None, sub_layout_mode=None):  # noqa: E501
        """Layout - a model defined in Swagger"""  # noqa: E501

        self._layout_mode = None
        self._sub_layout_mode = None
        self.discriminator = None

        if layout_mode is not None:
            self.layout_mode = layout_mode
        if sub_layout_mode is not None:
            self.sub_layout_mode = sub_layout_mode

    @property
    def layout_mode(self):
        """Gets the layout_mode of this Layout.  # noqa: E501


        :return: The layout_mode of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._layout_mode

    @layout_mode.setter
    def layout_mode(self, layout_mode):
        """Sets the layout_mode of this Layout.


        :param layout_mode: The layout_mode of this Layout.  # noqa: E501
        :type: str
        """
        allowed_values = ["Video"]  # noqa: E501
        if layout_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `layout_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(layout_mode, allowed_values)
            )

        self._layout_mode = layout_mode

    @property
    def sub_layout_mode(self):
        """Gets the sub_layout_mode of this Layout.  # noqa: E501

        Note misspelling in Continuous Presence enum.  # noqa: E501

        :return: The sub_layout_mode of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._sub_layout_mode

    @sub_layout_mode.setter
    def sub_layout_mode(self, sub_layout_mode):
        """Sets the sub_layout_mode of this Layout.

        Note misspelling in Continuous Presence enum.  # noqa: E501

        :param sub_layout_mode: The sub_layout_mode of this Layout.  # noqa: E501
        :type: str
        """
        allowed_values = ["VideoCurrentSpeaker(1) VideoContiniousPresence(2) VideoConstantPresence(3) VideoContinuousPresence(4)"]  # noqa: E501
        if sub_layout_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_layout_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_layout_mode, allowed_values)
            )

        self._sub_layout_mode = sub_layout_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
