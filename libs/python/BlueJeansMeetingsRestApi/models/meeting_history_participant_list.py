# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MeetingHistoryParticipantList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_name': 'str',
        'join_time': 'int',
        'minutes': 'int',
        'device_type': 'str',
        'email': 'str',
        'remote_address': 'str',
        'is_encrypted': 'bool',
        'disconnect_time': 'int',
        'is_moderator': 'bool',
        'user_id': 'int',
        'tags': 'str',
        'participant_guid': 'str'
    }

    attribute_map = {
        'endpoint_name': 'endpointName',
        'join_time': 'joinTime',
        'minutes': 'minutes',
        'device_type': 'deviceType',
        'email': 'email',
        'remote_address': 'remoteAddress',
        'is_encrypted': 'isEncrypted',
        'disconnect_time': 'disconnectTime',
        'is_moderator': 'isModerator',
        'user_id': 'userId',
        'tags': 'tags',
        'participant_guid': 'participantGuid'
    }

    def __init__(self, endpoint_name=None, join_time=None, minutes=None, device_type=None, email=None, remote_address=None, is_encrypted=None, disconnect_time=None, is_moderator=None, user_id=None, tags=None, participant_guid=None):  # noqa: E501
        """MeetingHistoryParticipantList - a model defined in Swagger"""  # noqa: E501

        self._endpoint_name = None
        self._join_time = None
        self._minutes = None
        self._device_type = None
        self._email = None
        self._remote_address = None
        self._is_encrypted = None
        self._disconnect_time = None
        self._is_moderator = None
        self._user_id = None
        self._tags = None
        self._participant_guid = None
        self.discriminator = None

        if endpoint_name is not None:
            self.endpoint_name = endpoint_name
        if join_time is not None:
            self.join_time = join_time
        if minutes is not None:
            self.minutes = minutes
        if device_type is not None:
            self.device_type = device_type
        if email is not None:
            self.email = email
        if remote_address is not None:
            self.remote_address = remote_address
        if is_encrypted is not None:
            self.is_encrypted = is_encrypted
        if disconnect_time is not None:
            self.disconnect_time = disconnect_time
        if is_moderator is not None:
            self.is_moderator = is_moderator
        if user_id is not None:
            self.user_id = user_id
        if tags is not None:
            self.tags = tags
        if participant_guid is not None:
            self.participant_guid = participant_guid

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The endpoint_name of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this MeetingHistoryParticipantList.


        :param endpoint_name: The endpoint_name of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """

        self._endpoint_name = endpoint_name

    @property
    def join_time(self):
        """Gets the join_time of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The join_time of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: int
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this MeetingHistoryParticipantList.


        :param join_time: The join_time of this MeetingHistoryParticipantList.  # noqa: E501
        :type: int
        """

        self._join_time = join_time

    @property
    def minutes(self):
        """Gets the minutes of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The minutes of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this MeetingHistoryParticipantList.


        :param minutes: The minutes of this MeetingHistoryParticipantList.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def device_type(self):
        """Gets the device_type of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The device_type of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this MeetingHistoryParticipantList.


        :param device_type: The device_type of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """
        allowed_values = ["Carmel", "WebRTC"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def email(self):
        """Gets the email of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The email of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MeetingHistoryParticipantList.


        :param email: The email of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def remote_address(self):
        """Gets the remote_address of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The remote_address of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this MeetingHistoryParticipantList.


        :param remote_address: The remote_address of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The is_encrypted of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this MeetingHistoryParticipantList.


        :param is_encrypted: The is_encrypted of this MeetingHistoryParticipantList.  # noqa: E501
        :type: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def disconnect_time(self):
        """Gets the disconnect_time of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The disconnect_time of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: int
        """
        return self._disconnect_time

    @disconnect_time.setter
    def disconnect_time(self, disconnect_time):
        """Sets the disconnect_time of this MeetingHistoryParticipantList.


        :param disconnect_time: The disconnect_time of this MeetingHistoryParticipantList.  # noqa: E501
        :type: int
        """

        self._disconnect_time = disconnect_time

    @property
    def is_moderator(self):
        """Gets the is_moderator of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The is_moderator of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: bool
        """
        return self._is_moderator

    @is_moderator.setter
    def is_moderator(self, is_moderator):
        """Sets the is_moderator of this MeetingHistoryParticipantList.


        :param is_moderator: The is_moderator of this MeetingHistoryParticipantList.  # noqa: E501
        :type: bool
        """

        self._is_moderator = is_moderator

    @property
    def user_id(self):
        """Gets the user_id of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The user_id of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MeetingHistoryParticipantList.


        :param user_id: The user_id of this MeetingHistoryParticipantList.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def tags(self):
        """Gets the tags of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The tags of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MeetingHistoryParticipantList.


        :param tags: The tags of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def participant_guid(self):
        """Gets the participant_guid of this MeetingHistoryParticipantList.  # noqa: E501


        :return: The participant_guid of this MeetingHistoryParticipantList.  # noqa: E501
        :rtype: str
        """
        return self._participant_guid

    @participant_guid.setter
    def participant_guid(self, participant_guid):
        """Sets the participant_guid of this MeetingHistoryParticipantList.


        :param participant_guid: The participant_guid of this MeetingHistoryParticipantList.  # noqa: E501
        :type: str
        """

        self._participant_guid = participant_guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingHistoryParticipantList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingHistoryParticipantList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
