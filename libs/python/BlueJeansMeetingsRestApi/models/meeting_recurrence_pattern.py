# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MeetingRecurrencePattern(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recurrence_type': 'str',
        'end_date': 'int',
        'recurrence_count': 'int',
        'frequency': 'int',
        'days_of_week_mask': 'int',
        'day_of_month': 'int',
        'week_of_month': 'str',
        'month_of_year': 'str'
    }

    attribute_map = {
        'recurrence_type': 'recurrenceType',
        'end_date': 'endDate',
        'recurrence_count': 'recurrenceCount',
        'frequency': 'frequency',
        'days_of_week_mask': 'daysOfWeekMask',
        'day_of_month': 'dayOfMonth',
        'week_of_month': 'weekOfMonth',
        'month_of_year': 'monthOfYear'
    }

    def __init__(self, recurrence_type=None, end_date=None, recurrence_count=None, frequency=None, days_of_week_mask=None, day_of_month=None, week_of_month='NONE', month_of_year='NONE'):  # noqa: E501
        """MeetingRecurrencePattern - a model defined in Swagger"""  # noqa: E501

        self._recurrence_type = None
        self._end_date = None
        self._recurrence_count = None
        self._frequency = None
        self._days_of_week_mask = None
        self._day_of_month = None
        self._week_of_month = None
        self._month_of_year = None
        self.discriminator = None

        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if end_date is not None:
            self.end_date = end_date
        if recurrence_count is not None:
            self.recurrence_count = recurrence_count
        if frequency is not None:
            self.frequency = frequency
        if days_of_week_mask is not None:
            self.days_of_week_mask = days_of_week_mask
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if week_of_month is not None:
            self.week_of_month = week_of_month
        if month_of_year is not None:
            self.month_of_year = month_of_year

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this MeetingRecurrencePattern.  # noqa: E501


        :return: The recurrence_type of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this MeetingRecurrencePattern.


        :param recurrence_type: The recurrence_type of this MeetingRecurrencePattern.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if recurrence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    @property
    def end_date(self):
        """Gets the end_date of this MeetingRecurrencePattern.  # noqa: E501

        This is the epoch-based ending-time (in milliseconds) for the recurrence chain of meetings.  # noqa: E501

        :return: The end_date of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MeetingRecurrencePattern.

        This is the epoch-based ending-time (in milliseconds) for the recurrence chain of meetings.  # noqa: E501

        :param end_date: The end_date of this MeetingRecurrencePattern.  # noqa: E501
        :type: int
        """

        self._end_date = end_date

    @property
    def recurrence_count(self):
        """Gets the recurrence_count of this MeetingRecurrencePattern.  # noqa: E501

        The number of reoccurring meetings  # noqa: E501

        :return: The recurrence_count of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_count

    @recurrence_count.setter
    def recurrence_count(self, recurrence_count):
        """Sets the recurrence_count of this MeetingRecurrencePattern.

        The number of reoccurring meetings  # noqa: E501

        :param recurrence_count: The recurrence_count of this MeetingRecurrencePattern.  # noqa: E501
        :type: int
        """

        self._recurrence_count = recurrence_count

    @property
    def frequency(self):
        """Gets the frequency of this MeetingRecurrencePattern.  # noqa: E501

        the interval of reoccurring meetings.  # noqa: E501

        :return: The frequency of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this MeetingRecurrencePattern.

        the interval of reoccurring meetings.  # noqa: E501

        :param frequency: The frequency of this MeetingRecurrencePattern.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def days_of_week_mask(self):
        """Gets the days_of_week_mask of this MeetingRecurrencePattern.  # noqa: E501

        bit mask for selecting which days of the week.  Sunday:1, Monday:2, Tuesday:4, Wednesday:8, Thursday:16, Friday:32, and Saturday:64  # noqa: E501

        :return: The days_of_week_mask of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: int
        """
        return self._days_of_week_mask

    @days_of_week_mask.setter
    def days_of_week_mask(self, days_of_week_mask):
        """Sets the days_of_week_mask of this MeetingRecurrencePattern.

        bit mask for selecting which days of the week.  Sunday:1, Monday:2, Tuesday:4, Wednesday:8, Thursday:16, Friday:32, and Saturday:64  # noqa: E501

        :param days_of_week_mask: The days_of_week_mask of this MeetingRecurrencePattern.  # noqa: E501
        :type: int
        """

        self._days_of_week_mask = days_of_week_mask

    @property
    def day_of_month(self):
        """Gets the day_of_month of this MeetingRecurrencePattern.  # noqa: E501

        the numerical day in the month for monthly reoccurring meetings.  # noqa: E501

        :return: The day_of_month of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this MeetingRecurrencePattern.

        the numerical day in the month for monthly reoccurring meetings.  # noqa: E501

        :param day_of_month: The day_of_month of this MeetingRecurrencePattern.  # noqa: E501
        :type: int
        """

        self._day_of_month = day_of_month

    @property
    def week_of_month(self):
        """Gets the week_of_month of this MeetingRecurrencePattern.  # noqa: E501

        the numerical week in the month for reoccuring meetings.  # noqa: E501

        :return: The week_of_month of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: str
        """
        return self._week_of_month

    @week_of_month.setter
    def week_of_month(self, week_of_month):
        """Sets the week_of_month of this MeetingRecurrencePattern.

        the numerical week in the month for reoccuring meetings.  # noqa: E501

        :param week_of_month: The week_of_month of this MeetingRecurrencePattern.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "FIRST", "SECOND", "THIRD", "FOURTH", "LAST"]  # noqa: E501
        if week_of_month not in allowed_values:
            raise ValueError(
                "Invalid value for `week_of_month` ({0}), must be one of {1}"  # noqa: E501
                .format(week_of_month, allowed_values)
            )

        self._week_of_month = week_of_month

    @property
    def month_of_year(self):
        """Gets the month_of_year of this MeetingRecurrencePattern.  # noqa: E501

        the month in the year for reoccurring meetings.  # noqa: E501

        :return: The month_of_year of this MeetingRecurrencePattern.  # noqa: E501
        :rtype: str
        """
        return self._month_of_year

    @month_of_year.setter
    def month_of_year(self, month_of_year):
        """Sets the month_of_year of this MeetingRecurrencePattern.

        the month in the year for reoccurring meetings.  # noqa: E501

        :param month_of_year: The month_of_year of this MeetingRecurrencePattern.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]  # noqa: E501
        if month_of_year not in allowed_values:
            raise ValueError(
                "Invalid value for `month_of_year` ({0}), must be one of {1}"  # noqa: E501
                .format(month_of_year, allowed_values)
            )

        self._month_of_year = month_of_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingRecurrencePattern, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingRecurrencePattern):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
