# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.meeting_state_recordinginfo import MeetingStateRecordinginfo  # noqa: F401,E501


class MeetingState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meeting_id': 'str',
        'meeting_guid': 'str',
        'meeting_state': 'str',
        'status': 'str',
        'is_content_sharing_active': 'bool',
        'bridged': 'bool',
        'locked': 'bool',
        'audio_mute_on_entry': 'bool',
        'video_mute_on_entry': 'bool',
        'moderator_less': 'bool',
        'title': 'str',
        'chat_enabled': 'bool',
        'pinned_endpoint_guid': 'str',
        'audio_endpoint_count': 'int',
        'video_endpoint_count': 'int',
        'recording_enabled': 'bool',
        'participant_web_join_url': 'str',
        'is_large_meeting': 'str',
        'features': 'list[str]',
        'delayed_meeting_end_time': 'int',
        'sm_streams': 'str',
        'inactive_meeting_status': 'str',
        'meeting_marked_for_delayed_termination': 'bool',
        'recordinginfo': 'MeetingStateRecordinginfo'
    }

    attribute_map = {
        'meeting_id': 'meetingId',
        'meeting_guid': 'meetingGuid',
        'meeting_state': 'meetingState',
        'status': 'status',
        'is_content_sharing_active': 'isContentSharingActive',
        'bridged': 'bridged',
        'locked': 'locked',
        'audio_mute_on_entry': 'audioMuteOnEntry',
        'video_mute_on_entry': 'videoMuteOnEntry',
        'moderator_less': 'moderatorLess',
        'title': 'title',
        'chat_enabled': 'chatEnabled',
        'pinned_endpoint_guid': 'pinnedEndpointGuid',
        'audio_endpoint_count': 'audioEndpointCount',
        'video_endpoint_count': 'videoEndpointCount',
        'recording_enabled': 'recordingEnabled',
        'participant_web_join_url': 'participantWebJoinURL',
        'is_large_meeting': 'isLargeMeeting',
        'features': 'features',
        'delayed_meeting_end_time': 'delayedMeetingEndTime',
        'sm_streams': 'smStreams',
        'inactive_meeting_status': 'inactiveMeetingStatus',
        'meeting_marked_for_delayed_termination': 'meetingMarkedForDelayedTermination',
        'recordinginfo': 'recordinginfo'
    }

    def __init__(self, meeting_id=None, meeting_guid=None, meeting_state=None, status=None, is_content_sharing_active=None, bridged=None, locked=None, audio_mute_on_entry=None, video_mute_on_entry=None, moderator_less=None, title=None, chat_enabled=None, pinned_endpoint_guid=None, audio_endpoint_count=None, video_endpoint_count=None, recording_enabled=None, participant_web_join_url=None, is_large_meeting=None, features=None, delayed_meeting_end_time=None, sm_streams=None, inactive_meeting_status=None, meeting_marked_for_delayed_termination=None, recordinginfo=None):  # noqa: E501
        """MeetingState - a model defined in Swagger"""  # noqa: E501

        self._meeting_id = None
        self._meeting_guid = None
        self._meeting_state = None
        self._status = None
        self._is_content_sharing_active = None
        self._bridged = None
        self._locked = None
        self._audio_mute_on_entry = None
        self._video_mute_on_entry = None
        self._moderator_less = None
        self._title = None
        self._chat_enabled = None
        self._pinned_endpoint_guid = None
        self._audio_endpoint_count = None
        self._video_endpoint_count = None
        self._recording_enabled = None
        self._participant_web_join_url = None
        self._is_large_meeting = None
        self._features = None
        self._delayed_meeting_end_time = None
        self._sm_streams = None
        self._inactive_meeting_status = None
        self._meeting_marked_for_delayed_termination = None
        self._recordinginfo = None
        self.discriminator = None

        if meeting_id is not None:
            self.meeting_id = meeting_id
        if meeting_guid is not None:
            self.meeting_guid = meeting_guid
        if meeting_state is not None:
            self.meeting_state = meeting_state
        if status is not None:
            self.status = status
        if is_content_sharing_active is not None:
            self.is_content_sharing_active = is_content_sharing_active
        if bridged is not None:
            self.bridged = bridged
        if locked is not None:
            self.locked = locked
        if audio_mute_on_entry is not None:
            self.audio_mute_on_entry = audio_mute_on_entry
        if video_mute_on_entry is not None:
            self.video_mute_on_entry = video_mute_on_entry
        if moderator_less is not None:
            self.moderator_less = moderator_less
        if title is not None:
            self.title = title
        if chat_enabled is not None:
            self.chat_enabled = chat_enabled
        if pinned_endpoint_guid is not None:
            self.pinned_endpoint_guid = pinned_endpoint_guid
        if audio_endpoint_count is not None:
            self.audio_endpoint_count = audio_endpoint_count
        if video_endpoint_count is not None:
            self.video_endpoint_count = video_endpoint_count
        if recording_enabled is not None:
            self.recording_enabled = recording_enabled
        if participant_web_join_url is not None:
            self.participant_web_join_url = participant_web_join_url
        if is_large_meeting is not None:
            self.is_large_meeting = is_large_meeting
        if features is not None:
            self.features = features
        if delayed_meeting_end_time is not None:
            self.delayed_meeting_end_time = delayed_meeting_end_time
        if sm_streams is not None:
            self.sm_streams = sm_streams
        if inactive_meeting_status is not None:
            self.inactive_meeting_status = inactive_meeting_status
        if meeting_marked_for_delayed_termination is not None:
            self.meeting_marked_for_delayed_termination = meeting_marked_for_delayed_termination
        if recordinginfo is not None:
            self.recordinginfo = recordinginfo

    @property
    def meeting_id(self):
        """Gets the meeting_id of this MeetingState.  # noqa: E501


        :return: The meeting_id of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this MeetingState.


        :param meeting_id: The meeting_id of this MeetingState.  # noqa: E501
        :type: str
        """

        self._meeting_id = meeting_id

    @property
    def meeting_guid(self):
        """Gets the meeting_guid of this MeetingState.  # noqa: E501


        :return: The meeting_guid of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._meeting_guid

    @meeting_guid.setter
    def meeting_guid(self, meeting_guid):
        """Sets the meeting_guid of this MeetingState.


        :param meeting_guid: The meeting_guid of this MeetingState.  # noqa: E501
        :type: str
        """

        self._meeting_guid = meeting_guid

    @property
    def meeting_state(self):
        """Gets the meeting_state of this MeetingState.  # noqa: E501


        :return: The meeting_state of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._meeting_state

    @meeting_state.setter
    def meeting_state(self, meeting_state):
        """Sets the meeting_state of this MeetingState.


        :param meeting_state: The meeting_state of this MeetingState.  # noqa: E501
        :type: str
        """
        allowed_values = ["MeetingStarted"]  # noqa: E501
        if meeting_state not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_state` ({0}), must be one of {1}"  # noqa: E501
                .format(meeting_state, allowed_values)
            )

        self._meeting_state = meeting_state

    @property
    def status(self):
        """Gets the status of this MeetingState.  # noqa: E501


        :return: The status of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MeetingState.


        :param status: The status of this MeetingState.  # noqa: E501
        :type: str
        """
        allowed_values = ["active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_content_sharing_active(self):
        """Gets the is_content_sharing_active of this MeetingState.  # noqa: E501


        :return: The is_content_sharing_active of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._is_content_sharing_active

    @is_content_sharing_active.setter
    def is_content_sharing_active(self, is_content_sharing_active):
        """Sets the is_content_sharing_active of this MeetingState.


        :param is_content_sharing_active: The is_content_sharing_active of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._is_content_sharing_active = is_content_sharing_active

    @property
    def bridged(self):
        """Gets the bridged of this MeetingState.  # noqa: E501


        :return: The bridged of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._bridged

    @bridged.setter
    def bridged(self, bridged):
        """Sets the bridged of this MeetingState.


        :param bridged: The bridged of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._bridged = bridged

    @property
    def locked(self):
        """Gets the locked of this MeetingState.  # noqa: E501


        :return: The locked of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this MeetingState.


        :param locked: The locked of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def audio_mute_on_entry(self):
        """Gets the audio_mute_on_entry of this MeetingState.  # noqa: E501


        :return: The audio_mute_on_entry of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._audio_mute_on_entry

    @audio_mute_on_entry.setter
    def audio_mute_on_entry(self, audio_mute_on_entry):
        """Sets the audio_mute_on_entry of this MeetingState.


        :param audio_mute_on_entry: The audio_mute_on_entry of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._audio_mute_on_entry = audio_mute_on_entry

    @property
    def video_mute_on_entry(self):
        """Gets the video_mute_on_entry of this MeetingState.  # noqa: E501


        :return: The video_mute_on_entry of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._video_mute_on_entry

    @video_mute_on_entry.setter
    def video_mute_on_entry(self, video_mute_on_entry):
        """Sets the video_mute_on_entry of this MeetingState.


        :param video_mute_on_entry: The video_mute_on_entry of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._video_mute_on_entry = video_mute_on_entry

    @property
    def moderator_less(self):
        """Gets the moderator_less of this MeetingState.  # noqa: E501


        :return: The moderator_less of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._moderator_less

    @moderator_less.setter
    def moderator_less(self, moderator_less):
        """Sets the moderator_less of this MeetingState.


        :param moderator_less: The moderator_less of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._moderator_less = moderator_less

    @property
    def title(self):
        """Gets the title of this MeetingState.  # noqa: E501


        :return: The title of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MeetingState.


        :param title: The title of this MeetingState.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def chat_enabled(self):
        """Gets the chat_enabled of this MeetingState.  # noqa: E501


        :return: The chat_enabled of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._chat_enabled

    @chat_enabled.setter
    def chat_enabled(self, chat_enabled):
        """Sets the chat_enabled of this MeetingState.


        :param chat_enabled: The chat_enabled of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._chat_enabled = chat_enabled

    @property
    def pinned_endpoint_guid(self):
        """Gets the pinned_endpoint_guid of this MeetingState.  # noqa: E501


        :return: The pinned_endpoint_guid of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._pinned_endpoint_guid

    @pinned_endpoint_guid.setter
    def pinned_endpoint_guid(self, pinned_endpoint_guid):
        """Sets the pinned_endpoint_guid of this MeetingState.


        :param pinned_endpoint_guid: The pinned_endpoint_guid of this MeetingState.  # noqa: E501
        :type: str
        """

        self._pinned_endpoint_guid = pinned_endpoint_guid

    @property
    def audio_endpoint_count(self):
        """Gets the audio_endpoint_count of this MeetingState.  # noqa: E501


        :return: The audio_endpoint_count of this MeetingState.  # noqa: E501
        :rtype: int
        """
        return self._audio_endpoint_count

    @audio_endpoint_count.setter
    def audio_endpoint_count(self, audio_endpoint_count):
        """Sets the audio_endpoint_count of this MeetingState.


        :param audio_endpoint_count: The audio_endpoint_count of this MeetingState.  # noqa: E501
        :type: int
        """

        self._audio_endpoint_count = audio_endpoint_count

    @property
    def video_endpoint_count(self):
        """Gets the video_endpoint_count of this MeetingState.  # noqa: E501


        :return: The video_endpoint_count of this MeetingState.  # noqa: E501
        :rtype: int
        """
        return self._video_endpoint_count

    @video_endpoint_count.setter
    def video_endpoint_count(self, video_endpoint_count):
        """Sets the video_endpoint_count of this MeetingState.


        :param video_endpoint_count: The video_endpoint_count of this MeetingState.  # noqa: E501
        :type: int
        """

        self._video_endpoint_count = video_endpoint_count

    @property
    def recording_enabled(self):
        """Gets the recording_enabled of this MeetingState.  # noqa: E501


        :return: The recording_enabled of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._recording_enabled

    @recording_enabled.setter
    def recording_enabled(self, recording_enabled):
        """Sets the recording_enabled of this MeetingState.


        :param recording_enabled: The recording_enabled of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._recording_enabled = recording_enabled

    @property
    def participant_web_join_url(self):
        """Gets the participant_web_join_url of this MeetingState.  # noqa: E501


        :return: The participant_web_join_url of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._participant_web_join_url

    @participant_web_join_url.setter
    def participant_web_join_url(self, participant_web_join_url):
        """Sets the participant_web_join_url of this MeetingState.


        :param participant_web_join_url: The participant_web_join_url of this MeetingState.  # noqa: E501
        :type: str
        """

        self._participant_web_join_url = participant_web_join_url

    @property
    def is_large_meeting(self):
        """Gets the is_large_meeting of this MeetingState.  # noqa: E501


        :return: The is_large_meeting of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._is_large_meeting

    @is_large_meeting.setter
    def is_large_meeting(self, is_large_meeting):
        """Sets the is_large_meeting of this MeetingState.


        :param is_large_meeting: The is_large_meeting of this MeetingState.  # noqa: E501
        :type: str
        """

        self._is_large_meeting = is_large_meeting

    @property
    def features(self):
        """Gets the features of this MeetingState.  # noqa: E501


        :return: The features of this MeetingState.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this MeetingState.


        :param features: The features of this MeetingState.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def delayed_meeting_end_time(self):
        """Gets the delayed_meeting_end_time of this MeetingState.  # noqa: E501


        :return: The delayed_meeting_end_time of this MeetingState.  # noqa: E501
        :rtype: int
        """
        return self._delayed_meeting_end_time

    @delayed_meeting_end_time.setter
    def delayed_meeting_end_time(self, delayed_meeting_end_time):
        """Sets the delayed_meeting_end_time of this MeetingState.


        :param delayed_meeting_end_time: The delayed_meeting_end_time of this MeetingState.  # noqa: E501
        :type: int
        """

        self._delayed_meeting_end_time = delayed_meeting_end_time

    @property
    def sm_streams(self):
        """Gets the sm_streams of this MeetingState.  # noqa: E501


        :return: The sm_streams of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._sm_streams

    @sm_streams.setter
    def sm_streams(self, sm_streams):
        """Sets the sm_streams of this MeetingState.


        :param sm_streams: The sm_streams of this MeetingState.  # noqa: E501
        :type: str
        """

        self._sm_streams = sm_streams

    @property
    def inactive_meeting_status(self):
        """Gets the inactive_meeting_status of this MeetingState.  # noqa: E501


        :return: The inactive_meeting_status of this MeetingState.  # noqa: E501
        :rtype: str
        """
        return self._inactive_meeting_status

    @inactive_meeting_status.setter
    def inactive_meeting_status(self, inactive_meeting_status):
        """Sets the inactive_meeting_status of this MeetingState.


        :param inactive_meeting_status: The inactive_meeting_status of this MeetingState.  # noqa: E501
        :type: str
        """

        self._inactive_meeting_status = inactive_meeting_status

    @property
    def meeting_marked_for_delayed_termination(self):
        """Gets the meeting_marked_for_delayed_termination of this MeetingState.  # noqa: E501


        :return: The meeting_marked_for_delayed_termination of this MeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._meeting_marked_for_delayed_termination

    @meeting_marked_for_delayed_termination.setter
    def meeting_marked_for_delayed_termination(self, meeting_marked_for_delayed_termination):
        """Sets the meeting_marked_for_delayed_termination of this MeetingState.


        :param meeting_marked_for_delayed_termination: The meeting_marked_for_delayed_termination of this MeetingState.  # noqa: E501
        :type: bool
        """

        self._meeting_marked_for_delayed_termination = meeting_marked_for_delayed_termination

    @property
    def recordinginfo(self):
        """Gets the recordinginfo of this MeetingState.  # noqa: E501


        :return: The recordinginfo of this MeetingState.  # noqa: E501
        :rtype: MeetingStateRecordinginfo
        """
        return self._recordinginfo

    @recordinginfo.setter
    def recordinginfo(self, recordinginfo):
        """Sets the recordinginfo of this MeetingState.


        :param recordinginfo: The recordinginfo of this MeetingState.  # noqa: E501
        :type: MeetingStateRecordinginfo
        """

        self._recordinginfo = recordinginfo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
