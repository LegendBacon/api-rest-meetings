# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MeetingsSummaryRec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meetings_count': 'int',
        'country_count': 'int',
        'registered_users': 'int',
        'active_users': 'int',
        'total_minutes': 'int',
        'average_call_duration': 'float',
        'total_participants': 'int',
        'recording_count': 'int',
        'average_participants': 'float',
        'video_share_count': 'int',
        'city_count': 'int',
        'recording_view_count': 'int'
    }

    attribute_map = {
        'meetings_count': 'meetings_count',
        'country_count': 'country_count',
        'registered_users': 'registered_users',
        'active_users': 'active_users',
        'total_minutes': 'total_minutes',
        'average_call_duration': 'average_call_duration',
        'total_participants': 'total_participants',
        'recording_count': 'recording_count',
        'average_participants': 'average_participants',
        'video_share_count': 'video_share_count',
        'city_count': 'city_count',
        'recording_view_count': 'recording_view_count'
    }

    def __init__(self, meetings_count=None, country_count=None, registered_users=None, active_users=None, total_minutes=None, average_call_duration=None, total_participants=None, recording_count=None, average_participants=None, video_share_count=None, city_count=None, recording_view_count=None):  # noqa: E501
        """MeetingsSummaryRec - a model defined in Swagger"""  # noqa: E501

        self._meetings_count = None
        self._country_count = None
        self._registered_users = None
        self._active_users = None
        self._total_minutes = None
        self._average_call_duration = None
        self._total_participants = None
        self._recording_count = None
        self._average_participants = None
        self._video_share_count = None
        self._city_count = None
        self._recording_view_count = None
        self.discriminator = None

        if meetings_count is not None:
            self.meetings_count = meetings_count
        if country_count is not None:
            self.country_count = country_count
        if registered_users is not None:
            self.registered_users = registered_users
        if active_users is not None:
            self.active_users = active_users
        if total_minutes is not None:
            self.total_minutes = total_minutes
        if average_call_duration is not None:
            self.average_call_duration = average_call_duration
        if total_participants is not None:
            self.total_participants = total_participants
        if recording_count is not None:
            self.recording_count = recording_count
        if average_participants is not None:
            self.average_participants = average_participants
        if video_share_count is not None:
            self.video_share_count = video_share_count
        if city_count is not None:
            self.city_count = city_count
        if recording_view_count is not None:
            self.recording_view_count = recording_view_count

    @property
    def meetings_count(self):
        """Gets the meetings_count of this MeetingsSummaryRec.  # noqa: E501

        Number of meetings held  # noqa: E501

        :return: The meetings_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._meetings_count

    @meetings_count.setter
    def meetings_count(self, meetings_count):
        """Sets the meetings_count of this MeetingsSummaryRec.

        Number of meetings held  # noqa: E501

        :param meetings_count: The meetings_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._meetings_count = meetings_count

    @property
    def country_count(self):
        """Gets the country_count of this MeetingsSummaryRec.  # noqa: E501

        Number of countries with participants in a meeting  # noqa: E501

        :return: The country_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._country_count

    @country_count.setter
    def country_count(self, country_count):
        """Sets the country_count of this MeetingsSummaryRec.

        Number of countries with participants in a meeting  # noqa: E501

        :param country_count: The country_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._country_count = country_count

    @property
    def registered_users(self):
        """Gets the registered_users of this MeetingsSummaryRec.  # noqa: E501

        Number of registered BlueJeans users who were in meetings.  # noqa: E501

        :return: The registered_users of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._registered_users

    @registered_users.setter
    def registered_users(self, registered_users):
        """Sets the registered_users of this MeetingsSummaryRec.

        Number of registered BlueJeans users who were in meetings.  # noqa: E501

        :param registered_users: The registered_users of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._registered_users = registered_users

    @property
    def active_users(self):
        """Gets the active_users of this MeetingsSummaryRec.  # noqa: E501


        :return: The active_users of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users):
        """Sets the active_users of this MeetingsSummaryRec.


        :param active_users: The active_users of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._active_users = active_users

    @property
    def total_minutes(self):
        """Gets the total_minutes of this MeetingsSummaryRec.  # noqa: E501

        Total minutes of meetings.  # noqa: E501

        :return: The total_minutes of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._total_minutes

    @total_minutes.setter
    def total_minutes(self, total_minutes):
        """Sets the total_minutes of this MeetingsSummaryRec.

        Total minutes of meetings.  # noqa: E501

        :param total_minutes: The total_minutes of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._total_minutes = total_minutes

    @property
    def average_call_duration(self):
        """Gets the average_call_duration of this MeetingsSummaryRec.  # noqa: E501

        Average number of minutes participants were in a meeting.  # noqa: E501

        :return: The average_call_duration of this MeetingsSummaryRec.  # noqa: E501
        :rtype: float
        """
        return self._average_call_duration

    @average_call_duration.setter
    def average_call_duration(self, average_call_duration):
        """Sets the average_call_duration of this MeetingsSummaryRec.

        Average number of minutes participants were in a meeting.  # noqa: E501

        :param average_call_duration: The average_call_duration of this MeetingsSummaryRec.  # noqa: E501
        :type: float
        """

        self._average_call_duration = average_call_duration

    @property
    def total_participants(self):
        """Gets the total_participants of this MeetingsSummaryRec.  # noqa: E501

        Total people who were in meetings.  # noqa: E501

        :return: The total_participants of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._total_participants

    @total_participants.setter
    def total_participants(self, total_participants):
        """Sets the total_participants of this MeetingsSummaryRec.

        Total people who were in meetings.  # noqa: E501

        :param total_participants: The total_participants of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._total_participants = total_participants

    @property
    def recording_count(self):
        """Gets the recording_count of this MeetingsSummaryRec.  # noqa: E501

        Total number of meetings recorded.  # noqa: E501

        :return: The recording_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._recording_count

    @recording_count.setter
    def recording_count(self, recording_count):
        """Sets the recording_count of this MeetingsSummaryRec.

        Total number of meetings recorded.  # noqa: E501

        :param recording_count: The recording_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._recording_count = recording_count

    @property
    def average_participants(self):
        """Gets the average_participants of this MeetingsSummaryRec.  # noqa: E501

        Average number of participants per meeting.  # noqa: E501

        :return: The average_participants of this MeetingsSummaryRec.  # noqa: E501
        :rtype: float
        """
        return self._average_participants

    @average_participants.setter
    def average_participants(self, average_participants):
        """Sets the average_participants of this MeetingsSummaryRec.

        Average number of participants per meeting.  # noqa: E501

        :param average_participants: The average_participants of this MeetingsSummaryRec.  # noqa: E501
        :type: float
        """

        self._average_participants = average_participants

    @property
    def video_share_count(self):
        """Gets the video_share_count of this MeetingsSummaryRec.  # noqa: E501


        :return: The video_share_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._video_share_count

    @video_share_count.setter
    def video_share_count(self, video_share_count):
        """Sets the video_share_count of this MeetingsSummaryRec.


        :param video_share_count: The video_share_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._video_share_count = video_share_count

    @property
    def city_count(self):
        """Gets the city_count of this MeetingsSummaryRec.  # noqa: E501

        Total number of cities with meeting participants.  # noqa: E501

        :return: The city_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._city_count

    @city_count.setter
    def city_count(self, city_count):
        """Sets the city_count of this MeetingsSummaryRec.

        Total number of cities with meeting participants.  # noqa: E501

        :param city_count: The city_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._city_count = city_count

    @property
    def recording_view_count(self):
        """Gets the recording_view_count of this MeetingsSummaryRec.  # noqa: E501

        Total number of times that recordings were viewed.  # noqa: E501

        :return: The recording_view_count of this MeetingsSummaryRec.  # noqa: E501
        :rtype: int
        """
        return self._recording_view_count

    @recording_view_count.setter
    def recording_view_count(self, recording_view_count):
        """Sets the recording_view_count of this MeetingsSummaryRec.

        Total number of times that recordings were viewed.  # noqa: E501

        :param recording_view_count: The recording_view_count of this MeetingsSummaryRec.  # noqa: E501
        :type: int
        """

        self._recording_view_count = recording_view_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeetingsSummaryRec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeetingsSummaryRec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
