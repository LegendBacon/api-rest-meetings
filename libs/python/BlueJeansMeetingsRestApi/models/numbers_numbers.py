# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.numbers_label import NumbersLabel  # noqa: F401,E501


class NumbersNumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'number': 'str',
        'tollfree': 'bool',
        'premium': 'bool',
        'custom': 'bool',
        'country': 'str',
        'country_name': 'str',
        'state': 'str',
        'city': 'str',
        'label': 'NumbersLabel',
        'default_settings_inherited': 'bool',
        'default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'number': 'number',
        'tollfree': 'tollfree',
        'premium': 'premium',
        'custom': 'custom',
        'country': 'country',
        'country_name': 'countryName',
        'state': 'state',
        'city': 'city',
        'label': 'label',
        'default_settings_inherited': 'defaultSettingsInherited',
        'default': 'default'
    }

    def __init__(self, id=None, number=None, tollfree=None, premium=None, custom=None, country=None, country_name=None, state=None, city=None, label=None, default_settings_inherited=None, default=None):  # noqa: E501
        """NumbersNumbers - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._number = None
        self._tollfree = None
        self._premium = None
        self._custom = None
        self._country = None
        self._country_name = None
        self._state = None
        self._city = None
        self._label = None
        self._default_settings_inherited = None
        self._default = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if tollfree is not None:
            self.tollfree = tollfree
        if premium is not None:
            self.premium = premium
        if custom is not None:
            self.custom = custom
        if country is not None:
            self.country = country
        if country_name is not None:
            self.country_name = country_name
        if state is not None:
            self.state = state
        if city is not None:
            self.city = city
        if label is not None:
            self.label = label
        if default_settings_inherited is not None:
            self.default_settings_inherited = default_settings_inherited
        if default is not None:
            self.default = default

    @property
    def id(self):
        """Gets the id of this NumbersNumbers.  # noqa: E501


        :return: The id of this NumbersNumbers.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NumbersNumbers.


        :param id: The id of this NumbersNumbers.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this NumbersNumbers.  # noqa: E501


        :return: The number of this NumbersNumbers.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumbersNumbers.


        :param number: The number of this NumbersNumbers.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def tollfree(self):
        """Gets the tollfree of this NumbersNumbers.  # noqa: E501


        :return: The tollfree of this NumbersNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._tollfree

    @tollfree.setter
    def tollfree(self, tollfree):
        """Sets the tollfree of this NumbersNumbers.


        :param tollfree: The tollfree of this NumbersNumbers.  # noqa: E501
        :type: bool
        """

        self._tollfree = tollfree

    @property
    def premium(self):
        """Gets the premium of this NumbersNumbers.  # noqa: E501


        :return: The premium of this NumbersNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this NumbersNumbers.


        :param premium: The premium of this NumbersNumbers.  # noqa: E501
        :type: bool
        """

        self._premium = premium

    @property
    def custom(self):
        """Gets the custom of this NumbersNumbers.  # noqa: E501


        :return: The custom of this NumbersNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this NumbersNumbers.


        :param custom: The custom of this NumbersNumbers.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def country(self):
        """Gets the country of this NumbersNumbers.  # noqa: E501


        :return: The country of this NumbersNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NumbersNumbers.


        :param country: The country of this NumbersNumbers.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this NumbersNumbers.  # noqa: E501


        :return: The country_name of this NumbersNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this NumbersNumbers.


        :param country_name: The country_name of this NumbersNumbers.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def state(self):
        """Gets the state of this NumbersNumbers.  # noqa: E501


        :return: The state of this NumbersNumbers.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NumbersNumbers.


        :param state: The state of this NumbersNumbers.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def city(self):
        """Gets the city of this NumbersNumbers.  # noqa: E501


        :return: The city of this NumbersNumbers.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NumbersNumbers.


        :param city: The city of this NumbersNumbers.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def label(self):
        """Gets the label of this NumbersNumbers.  # noqa: E501


        :return: The label of this NumbersNumbers.  # noqa: E501
        :rtype: NumbersLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NumbersNumbers.


        :param label: The label of this NumbersNumbers.  # noqa: E501
        :type: NumbersLabel
        """

        self._label = label

    @property
    def default_settings_inherited(self):
        """Gets the default_settings_inherited of this NumbersNumbers.  # noqa: E501


        :return: The default_settings_inherited of this NumbersNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._default_settings_inherited

    @default_settings_inherited.setter
    def default_settings_inherited(self, default_settings_inherited):
        """Sets the default_settings_inherited of this NumbersNumbers.


        :param default_settings_inherited: The default_settings_inherited of this NumbersNumbers.  # noqa: E501
        :type: bool
        """

        self._default_settings_inherited = default_settings_inherited

    @property
    def default(self):
        """Gets the default of this NumbersNumbers.  # noqa: E501


        :return: The default of this NumbersNumbers.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this NumbersNumbers.


        :param default: The default of this NumbersNumbers.  # noqa: E501
        :type: bool
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NumbersNumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumbersNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
