# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.pairing_code_sip_turnservers import PairingCodeSIPTurnservers  # noqa: F401,E501


class PairingCodeWebRTC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callguid': 'str',
        'endpoint_guid': 'str',
        'force_turn': 'bool',
        'pairing_code': 'str',
        'status': 'int',
        'status_text': 'str',
        'turnservers': 'list[PairingCodeSIPTurnservers]',
        'uri': 'str',
        'seam_endpoint_guid': 'str',
        'connection_guid': 'str',
        'endpoint_name': 'str'
    }

    attribute_map = {
        'callguid': 'callguid',
        'endpoint_guid': 'endpointGuid',
        'force_turn': 'forceTURN',
        'pairing_code': 'pairingCode',
        'status': 'status',
        'status_text': 'statusText',
        'turnservers': 'turnservers',
        'uri': 'uri',
        'seam_endpoint_guid': 'seamEndpointGuid',
        'connection_guid': 'connectionGuid',
        'endpoint_name': 'endpointName'
    }

    def __init__(self, callguid=None, endpoint_guid=None, force_turn=None, pairing_code=None, status=None, status_text=None, turnservers=None, uri=None, seam_endpoint_guid=None, connection_guid=None, endpoint_name=None):  # noqa: E501
        """PairingCodeWebRTC - a model defined in Swagger"""  # noqa: E501

        self._callguid = None
        self._endpoint_guid = None
        self._force_turn = None
        self._pairing_code = None
        self._status = None
        self._status_text = None
        self._turnservers = None
        self._uri = None
        self._seam_endpoint_guid = None
        self._connection_guid = None
        self._endpoint_name = None
        self.discriminator = None

        if callguid is not None:
            self.callguid = callguid
        if endpoint_guid is not None:
            self.endpoint_guid = endpoint_guid
        if force_turn is not None:
            self.force_turn = force_turn
        if pairing_code is not None:
            self.pairing_code = pairing_code
        if status is not None:
            self.status = status
        if status_text is not None:
            self.status_text = status_text
        if turnservers is not None:
            self.turnservers = turnservers
        if uri is not None:
            self.uri = uri
        if seam_endpoint_guid is not None:
            self.seam_endpoint_guid = seam_endpoint_guid
        if connection_guid is not None:
            self.connection_guid = connection_guid
        if endpoint_name is not None:
            self.endpoint_name = endpoint_name

    @property
    def callguid(self):
        """Gets the callguid of this PairingCodeWebRTC.  # noqa: E501


        :return: The callguid of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._callguid

    @callguid.setter
    def callguid(self, callguid):
        """Sets the callguid of this PairingCodeWebRTC.


        :param callguid: The callguid of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._callguid = callguid

    @property
    def endpoint_guid(self):
        """Gets the endpoint_guid of this PairingCodeWebRTC.  # noqa: E501


        :return: The endpoint_guid of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_guid

    @endpoint_guid.setter
    def endpoint_guid(self, endpoint_guid):
        """Sets the endpoint_guid of this PairingCodeWebRTC.


        :param endpoint_guid: The endpoint_guid of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._endpoint_guid = endpoint_guid

    @property
    def force_turn(self):
        """Gets the force_turn of this PairingCodeWebRTC.  # noqa: E501


        :return: The force_turn of this PairingCodeWebRTC.  # noqa: E501
        :rtype: bool
        """
        return self._force_turn

    @force_turn.setter
    def force_turn(self, force_turn):
        """Sets the force_turn of this PairingCodeWebRTC.


        :param force_turn: The force_turn of this PairingCodeWebRTC.  # noqa: E501
        :type: bool
        """

        self._force_turn = force_turn

    @property
    def pairing_code(self):
        """Gets the pairing_code of this PairingCodeWebRTC.  # noqa: E501


        :return: The pairing_code of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._pairing_code

    @pairing_code.setter
    def pairing_code(self, pairing_code):
        """Sets the pairing_code of this PairingCodeWebRTC.


        :param pairing_code: The pairing_code of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._pairing_code = pairing_code

    @property
    def status(self):
        """Gets the status of this PairingCodeWebRTC.  # noqa: E501


        :return: The status of this PairingCodeWebRTC.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PairingCodeWebRTC.


        :param status: The status of this PairingCodeWebRTC.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_text(self):
        """Gets the status_text of this PairingCodeWebRTC.  # noqa: E501


        :return: The status_text of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this PairingCodeWebRTC.


        :param status_text: The status_text of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK"]  # noqa: E501
        if status_text not in allowed_values:
            raise ValueError(
                "Invalid value for `status_text` ({0}), must be one of {1}"  # noqa: E501
                .format(status_text, allowed_values)
            )

        self._status_text = status_text

    @property
    def turnservers(self):
        """Gets the turnservers of this PairingCodeWebRTC.  # noqa: E501


        :return: The turnservers of this PairingCodeWebRTC.  # noqa: E501
        :rtype: list[PairingCodeSIPTurnservers]
        """
        return self._turnservers

    @turnservers.setter
    def turnservers(self, turnservers):
        """Sets the turnservers of this PairingCodeWebRTC.


        :param turnservers: The turnservers of this PairingCodeWebRTC.  # noqa: E501
        :type: list[PairingCodeSIPTurnservers]
        """

        self._turnservers = turnservers

    @property
    def uri(self):
        """Gets the uri of this PairingCodeWebRTC.  # noqa: E501


        :return: The uri of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PairingCodeWebRTC.


        :param uri: The uri of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def seam_endpoint_guid(self):
        """Gets the seam_endpoint_guid of this PairingCodeWebRTC.  # noqa: E501

        Globally unique identifier associated with the media component of this endpoint for this meeting.  (Typically a string starting with \"seamguid:\")  # noqa: E501

        :return: The seam_endpoint_guid of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._seam_endpoint_guid

    @seam_endpoint_guid.setter
    def seam_endpoint_guid(self, seam_endpoint_guid):
        """Sets the seam_endpoint_guid of this PairingCodeWebRTC.

        Globally unique identifier associated with the media component of this endpoint for this meeting.  (Typically a string starting with \"seamguid:\")  # noqa: E501

        :param seam_endpoint_guid: The seam_endpoint_guid of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._seam_endpoint_guid = seam_endpoint_guid

    @property
    def connection_guid(self):
        """Gets the connection_guid of this PairingCodeWebRTC.  # noqa: E501

        Globally unique identifier associated with this endpoint in this meeting. (Typically a string starting with \"connguid:\")  # noqa: E501

        :return: The connection_guid of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._connection_guid

    @connection_guid.setter
    def connection_guid(self, connection_guid):
        """Sets the connection_guid of this PairingCodeWebRTC.

        Globally unique identifier associated with this endpoint in this meeting. (Typically a string starting with \"connguid:\")  # noqa: E501

        :param connection_guid: The connection_guid of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._connection_guid = connection_guid

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this PairingCodeWebRTC.  # noqa: E501


        :return: The endpoint_name of this PairingCodeWebRTC.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this PairingCodeWebRTC.


        :param endpoint_name: The endpoint_name of this PairingCodeWebRTC.  # noqa: E501
        :type: str
        """

        self._endpoint_name = endpoint_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PairingCodeWebRTC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PairingCodeWebRTC):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
