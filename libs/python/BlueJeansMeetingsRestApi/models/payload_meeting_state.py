# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PayloadMeetingState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locked': 'bool',
        'status': 'str',
        'audio_mute_on_entry': 'bool',
        'is_large_meeting': 'bool'
    }

    attribute_map = {
        'locked': 'locked',
        'status': 'status',
        'audio_mute_on_entry': 'audioMuteOnEntry',
        'is_large_meeting': 'isLargeMeeting'
    }

    def __init__(self, locked=None, status=None, audio_mute_on_entry=None, is_large_meeting=None):  # noqa: E501
        """PayloadMeetingState - a model defined in Swagger"""  # noqa: E501

        self._locked = None
        self._status = None
        self._audio_mute_on_entry = None
        self._is_large_meeting = None
        self.discriminator = None

        if locked is not None:
            self.locked = locked
        if status is not None:
            self.status = status
        if audio_mute_on_entry is not None:
            self.audio_mute_on_entry = audio_mute_on_entry
        if is_large_meeting is not None:
            self.is_large_meeting = is_large_meeting

    @property
    def locked(self):
        """Gets the locked of this PayloadMeetingState.  # noqa: E501

        True to lock, false to unlock.  # noqa: E501

        :return: The locked of this PayloadMeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this PayloadMeetingState.

        True to lock, false to unlock.  # noqa: E501

        :param locked: The locked of this PayloadMeetingState.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def status(self):
        """Gets the status of this PayloadMeetingState.  # noqa: E501

        Set to \"terminated\" to end the meeting.  # noqa: E501

        :return: The status of this PayloadMeetingState.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayloadMeetingState.

        Set to \"terminated\" to end the meeting.  # noqa: E501

        :param status: The status of this PayloadMeetingState.  # noqa: E501
        :type: str
        """
        allowed_values = ["terminated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def audio_mute_on_entry(self):
        """Gets the audio_mute_on_entry of this PayloadMeetingState.  # noqa: E501

        True forces each party to automatically mute when the connect into the meeting  # noqa: E501

        :return: The audio_mute_on_entry of this PayloadMeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._audio_mute_on_entry

    @audio_mute_on_entry.setter
    def audio_mute_on_entry(self, audio_mute_on_entry):
        """Sets the audio_mute_on_entry of this PayloadMeetingState.

        True forces each party to automatically mute when the connect into the meeting  # noqa: E501

        :param audio_mute_on_entry: The audio_mute_on_entry of this PayloadMeetingState.  # noqa: E501
        :type: bool
        """

        self._audio_mute_on_entry = audio_mute_on_entry

    @property
    def is_large_meeting(self):
        """Gets the is_large_meeting of this PayloadMeetingState.  # noqa: E501

        True causes BlueJeans to suppress playing announcement/tones when a party joins the meeting  # noqa: E501

        :return: The is_large_meeting of this PayloadMeetingState.  # noqa: E501
        :rtype: bool
        """
        return self._is_large_meeting

    @is_large_meeting.setter
    def is_large_meeting(self, is_large_meeting):
        """Sets the is_large_meeting of this PayloadMeetingState.

        True causes BlueJeans to suppress playing announcement/tones when a party joins the meeting  # noqa: E501

        :param is_large_meeting: The is_large_meeting of this PayloadMeetingState.  # noqa: E501
        :type: bool
        """

        self._is_large_meeting = is_large_meeting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayloadMeetingState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayloadMeetingState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
