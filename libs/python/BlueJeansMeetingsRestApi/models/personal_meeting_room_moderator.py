# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PersonalMeetingRoomModerator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'profile_pic_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'profile_pic_url': 'profile_pic_url'
    }

    def __init__(self, id=None, username=None, firstname=None, lastname=None, profile_pic_url=None):  # noqa: E501
        """PersonalMeetingRoomModerator - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._username = None
        self._firstname = None
        self._lastname = None
        self._profile_pic_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if profile_pic_url is not None:
            self.profile_pic_url = profile_pic_url

    @property
    def id(self):
        """Gets the id of this PersonalMeetingRoomModerator.  # noqa: E501

        This is the unique number associated with the moderator's account.  # noqa: E501

        :return: The id of this PersonalMeetingRoomModerator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalMeetingRoomModerator.

        This is the unique number associated with the moderator's account.  # noqa: E501

        :param id: The id of this PersonalMeetingRoomModerator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this PersonalMeetingRoomModerator.  # noqa: E501

        This is the moderator account's user name  # noqa: E501

        :return: The username of this PersonalMeetingRoomModerator.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PersonalMeetingRoomModerator.

        This is the moderator account's user name  # noqa: E501

        :param username: The username of this PersonalMeetingRoomModerator.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def firstname(self):
        """Gets the firstname of this PersonalMeetingRoomModerator.  # noqa: E501

        This is the moderator account's first name.  # noqa: E501

        :return: The firstname of this PersonalMeetingRoomModerator.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this PersonalMeetingRoomModerator.

        This is the moderator account's first name.  # noqa: E501

        :param firstname: The firstname of this PersonalMeetingRoomModerator.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this PersonalMeetingRoomModerator.  # noqa: E501

        This is the moderator account's last name.  # noqa: E501

        :return: The lastname of this PersonalMeetingRoomModerator.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this PersonalMeetingRoomModerator.

        This is the moderator account's last name.  # noqa: E501

        :param lastname: The lastname of this PersonalMeetingRoomModerator.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def profile_pic_url(self):
        """Gets the profile_pic_url of this PersonalMeetingRoomModerator.  # noqa: E501

        This is a URL to a profile picture associated with the moderator's BlueJeans account.  # noqa: E501

        :return: The profile_pic_url of this PersonalMeetingRoomModerator.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_url

    @profile_pic_url.setter
    def profile_pic_url(self, profile_pic_url):
        """Sets the profile_pic_url of this PersonalMeetingRoomModerator.

        This is a URL to a profile picture associated with the moderator's BlueJeans account.  # noqa: E501

        :param profile_pic_url: The profile_pic_url of this PersonalMeetingRoomModerator.  # noqa: E501
        :type: str
        """

        self._profile_pic_url = profile_pic_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalMeetingRoomModerator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalMeetingRoomModerator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
