# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.recording_recording_chapters import RecordingRecordingChapters  # noqa: F401,E501


class Recording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recording_entity_id': 'int',
        'recording_entity_guid': 'str',
        'recording_name': 'str',
        'meeting_guid': 'str',
        'chapter_count': 'int',
        'total_size': 'int',
        'total_duration': 'int',
        'last_recording_date': 'int',
        'aggregated_status': 'str',
        'recording_thumbnail': 'str',
        'created': 'int',
        'aggregated_view_count': 'int',
        'is_premium_recording': 'bool',
        'show_premium_recording_tag': 'bool',
        'recording_chapters': 'list[RecordingRecordingChapters]'
    }

    attribute_map = {
        'recording_entity_id': 'recordingEntityId',
        'recording_entity_guid': 'recordingEntityGuid',
        'recording_name': 'recordingName',
        'meeting_guid': 'meetingGuid',
        'chapter_count': 'chapterCount',
        'total_size': 'totalSize',
        'total_duration': 'totalDuration',
        'last_recording_date': 'lastRecordingDate',
        'aggregated_status': 'aggregatedStatus',
        'recording_thumbnail': 'recordingThumbnail',
        'created': 'created',
        'aggregated_view_count': 'aggregatedViewCount',
        'is_premium_recording': 'isPremiumRecording',
        'show_premium_recording_tag': 'showPremiumRecordingTag',
        'recording_chapters': 'recordingChapters'
    }

    def __init__(self, recording_entity_id=None, recording_entity_guid=None, recording_name=None, meeting_guid=None, chapter_count=None, total_size=None, total_duration=None, last_recording_date=None, aggregated_status=None, recording_thumbnail=None, created=None, aggregated_view_count=None, is_premium_recording=None, show_premium_recording_tag=None, recording_chapters=None):  # noqa: E501
        """Recording - a model defined in Swagger"""  # noqa: E501

        self._recording_entity_id = None
        self._recording_entity_guid = None
        self._recording_name = None
        self._meeting_guid = None
        self._chapter_count = None
        self._total_size = None
        self._total_duration = None
        self._last_recording_date = None
        self._aggregated_status = None
        self._recording_thumbnail = None
        self._created = None
        self._aggregated_view_count = None
        self._is_premium_recording = None
        self._show_premium_recording_tag = None
        self._recording_chapters = None
        self.discriminator = None

        if recording_entity_id is not None:
            self.recording_entity_id = recording_entity_id
        if recording_entity_guid is not None:
            self.recording_entity_guid = recording_entity_guid
        if recording_name is not None:
            self.recording_name = recording_name
        if meeting_guid is not None:
            self.meeting_guid = meeting_guid
        if chapter_count is not None:
            self.chapter_count = chapter_count
        if total_size is not None:
            self.total_size = total_size
        if total_duration is not None:
            self.total_duration = total_duration
        if last_recording_date is not None:
            self.last_recording_date = last_recording_date
        if aggregated_status is not None:
            self.aggregated_status = aggregated_status
        if recording_thumbnail is not None:
            self.recording_thumbnail = recording_thumbnail
        if created is not None:
            self.created = created
        if aggregated_view_count is not None:
            self.aggregated_view_count = aggregated_view_count
        if is_premium_recording is not None:
            self.is_premium_recording = is_premium_recording
        if show_premium_recording_tag is not None:
            self.show_premium_recording_tag = show_premium_recording_tag
        if recording_chapters is not None:
            self.recording_chapters = recording_chapters

    @property
    def recording_entity_id(self):
        """Gets the recording_entity_id of this Recording.  # noqa: E501


        :return: The recording_entity_id of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._recording_entity_id

    @recording_entity_id.setter
    def recording_entity_id(self, recording_entity_id):
        """Sets the recording_entity_id of this Recording.


        :param recording_entity_id: The recording_entity_id of this Recording.  # noqa: E501
        :type: int
        """

        self._recording_entity_id = recording_entity_id

    @property
    def recording_entity_guid(self):
        """Gets the recording_entity_guid of this Recording.  # noqa: E501


        :return: The recording_entity_guid of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_entity_guid

    @recording_entity_guid.setter
    def recording_entity_guid(self, recording_entity_guid):
        """Sets the recording_entity_guid of this Recording.


        :param recording_entity_guid: The recording_entity_guid of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_entity_guid = recording_entity_guid

    @property
    def recording_name(self):
        """Gets the recording_name of this Recording.  # noqa: E501


        :return: The recording_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_name

    @recording_name.setter
    def recording_name(self, recording_name):
        """Sets the recording_name of this Recording.


        :param recording_name: The recording_name of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_name = recording_name

    @property
    def meeting_guid(self):
        """Gets the meeting_guid of this Recording.  # noqa: E501


        :return: The meeting_guid of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._meeting_guid

    @meeting_guid.setter
    def meeting_guid(self, meeting_guid):
        """Sets the meeting_guid of this Recording.


        :param meeting_guid: The meeting_guid of this Recording.  # noqa: E501
        :type: str
        """

        self._meeting_guid = meeting_guid

    @property
    def chapter_count(self):
        """Gets the chapter_count of this Recording.  # noqa: E501


        :return: The chapter_count of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._chapter_count

    @chapter_count.setter
    def chapter_count(self, chapter_count):
        """Sets the chapter_count of this Recording.


        :param chapter_count: The chapter_count of this Recording.  # noqa: E501
        :type: int
        """

        self._chapter_count = chapter_count

    @property
    def total_size(self):
        """Gets the total_size of this Recording.  # noqa: E501


        :return: The total_size of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this Recording.


        :param total_size: The total_size of this Recording.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def total_duration(self):
        """Gets the total_duration of this Recording.  # noqa: E501


        :return: The total_duration of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this Recording.


        :param total_duration: The total_duration of this Recording.  # noqa: E501
        :type: int
        """

        self._total_duration = total_duration

    @property
    def last_recording_date(self):
        """Gets the last_recording_date of this Recording.  # noqa: E501


        :return: The last_recording_date of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._last_recording_date

    @last_recording_date.setter
    def last_recording_date(self, last_recording_date):
        """Sets the last_recording_date of this Recording.


        :param last_recording_date: The last_recording_date of this Recording.  # noqa: E501
        :type: int
        """

        self._last_recording_date = last_recording_date

    @property
    def aggregated_status(self):
        """Gets the aggregated_status of this Recording.  # noqa: E501


        :return: The aggregated_status of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._aggregated_status

    @aggregated_status.setter
    def aggregated_status(self, aggregated_status):
        """Sets the aggregated_status of this Recording.


        :param aggregated_status: The aggregated_status of this Recording.  # noqa: E501
        :type: str
        """

        self._aggregated_status = aggregated_status

    @property
    def recording_thumbnail(self):
        """Gets the recording_thumbnail of this Recording.  # noqa: E501


        :return: The recording_thumbnail of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_thumbnail

    @recording_thumbnail.setter
    def recording_thumbnail(self, recording_thumbnail):
        """Sets the recording_thumbnail of this Recording.


        :param recording_thumbnail: The recording_thumbnail of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_thumbnail = recording_thumbnail

    @property
    def created(self):
        """Gets the created of this Recording.  # noqa: E501


        :return: The created of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Recording.


        :param created: The created of this Recording.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def aggregated_view_count(self):
        """Gets the aggregated_view_count of this Recording.  # noqa: E501


        :return: The aggregated_view_count of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._aggregated_view_count

    @aggregated_view_count.setter
    def aggregated_view_count(self, aggregated_view_count):
        """Sets the aggregated_view_count of this Recording.


        :param aggregated_view_count: The aggregated_view_count of this Recording.  # noqa: E501
        :type: int
        """

        self._aggregated_view_count = aggregated_view_count

    @property
    def is_premium_recording(self):
        """Gets the is_premium_recording of this Recording.  # noqa: E501


        :return: The is_premium_recording of this Recording.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium_recording

    @is_premium_recording.setter
    def is_premium_recording(self, is_premium_recording):
        """Sets the is_premium_recording of this Recording.


        :param is_premium_recording: The is_premium_recording of this Recording.  # noqa: E501
        :type: bool
        """

        self._is_premium_recording = is_premium_recording

    @property
    def show_premium_recording_tag(self):
        """Gets the show_premium_recording_tag of this Recording.  # noqa: E501


        :return: The show_premium_recording_tag of this Recording.  # noqa: E501
        :rtype: bool
        """
        return self._show_premium_recording_tag

    @show_premium_recording_tag.setter
    def show_premium_recording_tag(self, show_premium_recording_tag):
        """Sets the show_premium_recording_tag of this Recording.


        :param show_premium_recording_tag: The show_premium_recording_tag of this Recording.  # noqa: E501
        :type: bool
        """

        self._show_premium_recording_tag = show_premium_recording_tag

    @property
    def recording_chapters(self):
        """Gets the recording_chapters of this Recording.  # noqa: E501


        :return: The recording_chapters of this Recording.  # noqa: E501
        :rtype: list[RecordingRecordingChapters]
        """
        return self._recording_chapters

    @recording_chapters.setter
    def recording_chapters(self, recording_chapters):
        """Sets the recording_chapters of this Recording.


        :param recording_chapters: The recording_chapters of this Recording.  # noqa: E501
        :type: list[RecordingRecordingChapters]
        """

        self._recording_chapters = recording_chapters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
