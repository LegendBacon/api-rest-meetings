# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.recording_session_started_by import RecordingSessionStartedBy  # noqa: F401,E501


class RecordingSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content_status': 'str',
        'recording_type': 'str',
        'content_id': 'int',
        'thumbnail_url': 'str',
        'start_time_offset': 'int',
        'end_time_offset': 'int',
        'duration': 'int',
        'started_by': 'RecordingSessionStartedBy',
        'stopped_by': 'RecordingSessionStartedBy'
    }

    attribute_map = {
        'id': 'id',
        'content_status': 'contentStatus',
        'recording_type': 'recordingType',
        'content_id': 'contentId',
        'thumbnail_url': 'thumbnailUrl',
        'start_time_offset': 'startTimeOffset',
        'end_time_offset': 'endTimeOffset',
        'duration': 'duration',
        'started_by': 'startedBy',
        'stopped_by': 'stoppedBy'
    }

    def __init__(self, id=None, content_status=None, recording_type=None, content_id=None, thumbnail_url=None, start_time_offset=None, end_time_offset=None, duration=None, started_by=None, stopped_by=None):  # noqa: E501
        """RecordingSession - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._content_status = None
        self._recording_type = None
        self._content_id = None
        self._thumbnail_url = None
        self._start_time_offset = None
        self._end_time_offset = None
        self._duration = None
        self._started_by = None
        self._stopped_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if content_status is not None:
            self.content_status = content_status
        if recording_type is not None:
            self.recording_type = recording_type
        if content_id is not None:
            self.content_id = content_id
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if start_time_offset is not None:
            self.start_time_offset = start_time_offset
        if end_time_offset is not None:
            self.end_time_offset = end_time_offset
        if duration is not None:
            self.duration = duration
        if started_by is not None:
            self.started_by = started_by
        if stopped_by is not None:
            self.stopped_by = stopped_by

    @property
    def id(self):
        """Gets the id of this RecordingSession.  # noqa: E501


        :return: The id of this RecordingSession.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordingSession.


        :param id: The id of this RecordingSession.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content_status(self):
        """Gets the content_status of this RecordingSession.  # noqa: E501


        :return: The content_status of this RecordingSession.  # noqa: E501
        :rtype: str
        """
        return self._content_status

    @content_status.setter
    def content_status(self, content_status):
        """Sets the content_status of this RecordingSession.


        :param content_status: The content_status of this RecordingSession.  # noqa: E501
        :type: str
        """

        self._content_status = content_status

    @property
    def recording_type(self):
        """Gets the recording_type of this RecordingSession.  # noqa: E501


        :return: The recording_type of this RecordingSession.  # noqa: E501
        :rtype: str
        """
        return self._recording_type

    @recording_type.setter
    def recording_type(self, recording_type):
        """Sets the recording_type of this RecordingSession.


        :param recording_type: The recording_type of this RecordingSession.  # noqa: E501
        :type: str
        """

        self._recording_type = recording_type

    @property
    def content_id(self):
        """Gets the content_id of this RecordingSession.  # noqa: E501


        :return: The content_id of this RecordingSession.  # noqa: E501
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this RecordingSession.


        :param content_id: The content_id of this RecordingSession.  # noqa: E501
        :type: int
        """

        self._content_id = content_id

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this RecordingSession.  # noqa: E501


        :return: The thumbnail_url of this RecordingSession.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this RecordingSession.


        :param thumbnail_url: The thumbnail_url of this RecordingSession.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def start_time_offset(self):
        """Gets the start_time_offset of this RecordingSession.  # noqa: E501


        :return: The start_time_offset of this RecordingSession.  # noqa: E501
        :rtype: int
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """Sets the start_time_offset of this RecordingSession.


        :param start_time_offset: The start_time_offset of this RecordingSession.  # noqa: E501
        :type: int
        """

        self._start_time_offset = start_time_offset

    @property
    def end_time_offset(self):
        """Gets the end_time_offset of this RecordingSession.  # noqa: E501


        :return: The end_time_offset of this RecordingSession.  # noqa: E501
        :rtype: int
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """Sets the end_time_offset of this RecordingSession.


        :param end_time_offset: The end_time_offset of this RecordingSession.  # noqa: E501
        :type: int
        """

        self._end_time_offset = end_time_offset

    @property
    def duration(self):
        """Gets the duration of this RecordingSession.  # noqa: E501


        :return: The duration of this RecordingSession.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RecordingSession.


        :param duration: The duration of this RecordingSession.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def started_by(self):
        """Gets the started_by of this RecordingSession.  # noqa: E501


        :return: The started_by of this RecordingSession.  # noqa: E501
        :rtype: RecordingSessionStartedBy
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this RecordingSession.


        :param started_by: The started_by of this RecordingSession.  # noqa: E501
        :type: RecordingSessionStartedBy
        """

        self._started_by = started_by

    @property
    def stopped_by(self):
        """Gets the stopped_by of this RecordingSession.  # noqa: E501


        :return: The stopped_by of this RecordingSession.  # noqa: E501
        :rtype: RecordingSessionStartedBy
        """
        return self._stopped_by

    @stopped_by.setter
    def stopped_by(self, stopped_by):
        """Sets the stopped_by of this RecordingSession.


        :param stopped_by: The stopped_by of this RecordingSession.  # noqa: E501
        :type: RecordingSessionStartedBy
        """

        self._stopped_by = stopped_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordingSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordingSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
