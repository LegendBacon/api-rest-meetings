# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from BlueJeansMeetingsRestApi.models.attendee import Attendee  # noqa: F401,E501


class ScheduleMeetingMinComp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'start': 'int',
        'end': 'int',
        'timezone': 'str',
        'end_point_type': 'str',
        'end_point_version': 'str',
        'attendees': 'list[Attendee]',
        'is_large_meeting': 'bool',
        'is_personal_meeting': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'start': 'start',
        'end': 'end',
        'timezone': 'timezone',
        'end_point_type': 'endPointType',
        'end_point_version': 'endPointVersion',
        'attendees': 'attendees',
        'is_large_meeting': 'isLargeMeeting',
        'is_personal_meeting': 'isPersonalMeeting'
    }

    def __init__(self, title='My Test Meeting', description=None, start=None, end=None, timezone='America/New_York', end_point_type='WEB_APP', end_point_version='2.10', attendees=None, is_large_meeting=None, is_personal_meeting=False):  # noqa: E501
        """ScheduleMeetingMinComp - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._description = None
        self._start = None
        self._end = None
        self._timezone = None
        self._end_point_type = None
        self._end_point_version = None
        self._attendees = None
        self._is_large_meeting = None
        self._is_personal_meeting = None
        self.discriminator = None

        self.title = title
        if description is not None:
            self.description = description
        self.start = start
        self.end = end
        self.timezone = timezone
        self.end_point_type = end_point_type
        self.end_point_version = end_point_version
        if attendees is not None:
            self.attendees = attendees
        if is_large_meeting is not None:
            self.is_large_meeting = is_large_meeting
        if is_personal_meeting is not None:
            self.is_personal_meeting = is_personal_meeting

    @property
    def title(self):
        """Gets the title of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The title of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScheduleMeetingMinComp.


        :param title: The title of this ScheduleMeetingMinComp.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The description of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScheduleMeetingMinComp.


        :param description: The description of this ScheduleMeetingMinComp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """Gets the start of this ScheduleMeetingMinComp.  # noqa: E501

        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds  # noqa: E501

        :return: The start of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ScheduleMeetingMinComp.

        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds  # noqa: E501

        :param start: The start of this ScheduleMeetingMinComp.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this ScheduleMeetingMinComp.  # noqa: E501

        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds  # noqa: E501

        :return: The end of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ScheduleMeetingMinComp.

        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds  # noqa: E501

        :param end: The end of this ScheduleMeetingMinComp.  # noqa: E501
        :type: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def timezone(self):
        """Gets the timezone of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The timezone of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ScheduleMeetingMinComp.


        :param timezone: The timezone of this ScheduleMeetingMinComp.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def end_point_type(self):
        """Gets the end_point_type of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The end_point_type of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: str
        """
        return self._end_point_type

    @end_point_type.setter
    def end_point_type(self, end_point_type):
        """Sets the end_point_type of this ScheduleMeetingMinComp.


        :param end_point_type: The end_point_type of this ScheduleMeetingMinComp.  # noqa: E501
        :type: str
        """
        if end_point_type is None:
            raise ValueError("Invalid value for `end_point_type`, must not be `None`")  # noqa: E501

        self._end_point_type = end_point_type

    @property
    def end_point_version(self):
        """Gets the end_point_version of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The end_point_version of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: str
        """
        return self._end_point_version

    @end_point_version.setter
    def end_point_version(self, end_point_version):
        """Sets the end_point_version of this ScheduleMeetingMinComp.


        :param end_point_version: The end_point_version of this ScheduleMeetingMinComp.  # noqa: E501
        :type: str
        """
        if end_point_version is None:
            raise ValueError("Invalid value for `end_point_version`, must not be `None`")  # noqa: E501

        self._end_point_version = end_point_version

    @property
    def attendees(self):
        """Gets the attendees of this ScheduleMeetingMinComp.  # noqa: E501


        :return: The attendees of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: list[Attendee]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this ScheduleMeetingMinComp.


        :param attendees: The attendees of this ScheduleMeetingMinComp.  # noqa: E501
        :type: list[Attendee]
        """

        self._attendees = attendees

    @property
    def is_large_meeting(self):
        """Gets the is_large_meeting of this ScheduleMeetingMinComp.  # noqa: E501

        If true, the meeting is assumed to be large and thus no announcement will be made when a participant joins.  # noqa: E501

        :return: The is_large_meeting of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: bool
        """
        return self._is_large_meeting

    @is_large_meeting.setter
    def is_large_meeting(self, is_large_meeting):
        """Sets the is_large_meeting of this ScheduleMeetingMinComp.

        If true, the meeting is assumed to be large and thus no announcement will be made when a participant joins.  # noqa: E501

        :param is_large_meeting: The is_large_meeting of this ScheduleMeetingMinComp.  # noqa: E501
        :type: bool
        """

        self._is_large_meeting = is_large_meeting

    @property
    def is_personal_meeting(self):
        """Gets the is_personal_meeting of this ScheduleMeetingMinComp.  # noqa: E501

        Use the scheduler's personal meeting room and Id for this meeting.  # noqa: E501

        :return: The is_personal_meeting of this ScheduleMeetingMinComp.  # noqa: E501
        :rtype: bool
        """
        return self._is_personal_meeting

    @is_personal_meeting.setter
    def is_personal_meeting(self, is_personal_meeting):
        """Sets the is_personal_meeting of this ScheduleMeetingMinComp.

        Use the scheduler's personal meeting room and Id for this meeting.  # noqa: E501

        :param is_personal_meeting: The is_personal_meeting of this ScheduleMeetingMinComp.  # noqa: E501
        :type: bool
        """

        self._is_personal_meeting = is_personal_meeting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleMeetingMinComp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleMeetingMinComp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
