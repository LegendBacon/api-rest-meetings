# coding: utf-8

"""
    BlueJeans Meetings REST API

     ## Video That Works Where You Do. <p>This site provides developers access to APIs from BlueJean's Meetings meeting service.  From here you can see and try actual API calls to manage User Accounts, Meetings, and Recordings, pull Analytical Data and Current State information.</p>    <nosdk> <hr> <div> <div class=\"key\">     <a href=\"./basics.html\" target=\"_\"><img class=\"keyimg\" src=\"./img/bjnmeeting.png\"/></a> </div> <div class=\"keybox\"> Basic instructions about What is a BlueJeans Meeting, and Getting Started Using API's, are <a href=\"./basics.html\" target=\"_blank\">available here <i class=\"glyphicon glyphicon-new-window\"></i></a>. </div> </div> <hr> <alert>2/21/2019</alert> Change response of Change layout and Endpoint API's to 204<br/> 12/03/2018 Add API for setting user profile photograph.<br/> 10/17/2018 Updated API field definitions for time variables to be 64-bit .<br/> 7/23/2018 Corrected errors in API definition file.<br/> 7/10/2018 Deprecated some Command Center API's.  Exposed API's that Summarize usage.<br/> 7/06/2018 Added API for changing ownership of recordings.<br/> 6/28/2018 Restored Create Enterprise Account, added Enterprise and User Profile Tag API's.<br/> 6/01/2018 Clarified Access Token requirements for meeting endpoint API's.<br/> 5/21/2018 Corrected return model for meeting history call.<br/> </nosdk> <hr>   # noqa: E501

    OpenAPI spec version: 1.0.4402212019
    Contact: glenn@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserDeprecated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email_id': 'str',
        'company': 'str',
        'title': 'str',
        'phone': 'str',
        'profile_picture': 'str',
        'timezone': 'str',
        'time_format': 'int',
        'language': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'email_id': 'emailId',
        'company': 'company',
        'title': 'title',
        'phone': 'phone',
        'profile_picture': 'profilePicture',
        'timezone': 'timezone',
        'time_format': 'timeFormat',
        'language': 'language'
    }

    def __init__(self, id=None, username=None, first_name=None, middle_name=None, last_name=None, email_id=None, company=None, title=None, phone=None, profile_picture=None, timezone=None, time_format=None, language=None):  # noqa: E501
        """UserDeprecated - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._username = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email_id = None
        self._company = None
        self._title = None
        self._phone = None
        self._profile_picture = None
        self._timezone = None
        self._time_format = None
        self._language = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if email_id is not None:
            self.email_id = email_id
        if company is not None:
            self.company = company
        if title is not None:
            self.title = title
        if phone is not None:
            self.phone = phone
        if profile_picture is not None:
            self.profile_picture = profile_picture
        if timezone is not None:
            self.timezone = timezone
        if time_format is not None:
            self.time_format = time_format
        if language is not None:
            self.language = language

    @property
    def id(self):
        """Gets the id of this UserDeprecated.  # noqa: E501

        Unique identifier for the user.  # noqa: E501

        :return: The id of this UserDeprecated.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDeprecated.

        Unique identifier for the user.  # noqa: E501

        :param id: The id of this UserDeprecated.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this UserDeprecated.  # noqa: E501

        User's username  # noqa: E501

        :return: The username of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserDeprecated.

        User's username  # noqa: E501

        :param username: The username of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this UserDeprecated.  # noqa: E501

        User's first name  # noqa: E501

        :return: The first_name of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDeprecated.

        User's first name  # noqa: E501

        :param first_name: The first_name of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserDeprecated.  # noqa: E501

        User's middle name  # noqa: E501

        :return: The middle_name of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserDeprecated.

        User's middle name  # noqa: E501

        :param middle_name: The middle_name of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDeprecated.  # noqa: E501

        User's last name  # noqa: E501

        :return: The last_name of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDeprecated.

        User's last name  # noqa: E501

        :param last_name: The last_name of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email_id(self):
        """Gets the email_id of this UserDeprecated.  # noqa: E501

        User's email address  # noqa: E501

        :return: The email_id of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this UserDeprecated.

        User's email address  # noqa: E501

        :param email_id: The email_id of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._email_id = email_id

    @property
    def company(self):
        """Gets the company of this UserDeprecated.  # noqa: E501

        User's company name  # noqa: E501

        :return: The company of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserDeprecated.

        User's company name  # noqa: E501

        :param company: The company of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this UserDeprecated.  # noqa: E501

        User's title  # noqa: E501

        :return: The title of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserDeprecated.

        User's title  # noqa: E501

        :param title: The title of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def phone(self):
        """Gets the phone of this UserDeprecated.  # noqa: E501

        User's phone  # noqa: E501

        :return: The phone of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserDeprecated.

        User's phone  # noqa: E501

        :param phone: The phone of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def profile_picture(self):
        """Gets the profile_picture of this UserDeprecated.  # noqa: E501

        Path to user's profile picture  # noqa: E501

        :return: The profile_picture of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this UserDeprecated.

        Path to user's profile picture  # noqa: E501

        :param profile_picture: The profile_picture of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._profile_picture = profile_picture

    @property
    def timezone(self):
        """Gets the timezone of this UserDeprecated.  # noqa: E501

        User's timezone  # noqa: E501

        :return: The timezone of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserDeprecated.

        User's timezone  # noqa: E501

        :param timezone: The timezone of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def time_format(self):
        """Gets the time_format of this UserDeprecated.  # noqa: E501

        User's preference of 12 or 24 hour time display  # noqa: E501

        :return: The time_format of this UserDeprecated.  # noqa: E501
        :rtype: int
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this UserDeprecated.

        User's preference of 12 or 24 hour time display  # noqa: E501

        :param time_format: The time_format of this UserDeprecated.  # noqa: E501
        :type: int
        """

        self._time_format = time_format

    @property
    def language(self):
        """Gets the language of this UserDeprecated.  # noqa: E501

        User's language code  # noqa: E501

        :return: The language of this UserDeprecated.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserDeprecated.

        User's language code  # noqa: E501

        :param language: The language of this UserDeprecated.  # noqa: E501
        :type: str
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDeprecated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDeprecated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
